{"version":3,"file":"angular-material-datatransfer-lib.js","sources":["../../../projects/amd-lib/src/lib/enums/custom-event-type.enum.ts","../../../projects/amd-lib/src/lib/directives/host.directive.ts","../../../projects/amd-lib/src/lib/models/app-config.model.ts","../../../projects/amd-lib/src/lib/services/config.service.ts","../../../projects/amd-lib/src/lib/enums/transfer-status.enum.ts","../../../projects/amd-lib/src/lib/enums/transfer-type.enum.ts","../../../projects/amd-lib/src/lib/components/browse-dialog.component.ts","../../../projects/amd-lib/src/lib/components/browse-dialog.component.html","../../../projects/amd-lib/src/lib/components/edit-dialog.component.html","../../../projects/amd-lib/src/lib/components/edit-dialog.component.ts","../../../projects/amd-lib/src/lib/facades/datatransfer.facade.ts","../../../projects/amd-lib/src/lib/models/pagination-container.model.ts","../../../projects/amd-lib/src/lib/utils/date.util.ts","../../../projects/amd-lib/src/lib/enums/decimal-byte-unit.enum.ts","../../../projects/amd-lib/src/lib/extensions/enum.extension.ts","../../../projects/amd-lib/src/lib/utils/decimal-byte-unit.util.ts","../../../projects/amd-lib/src/lib/models/size-container.model.ts","../../../projects/amd-lib/src/lib/models/progress-container.model.ts","../../../projects/amd-lib/src/lib/stores/datatransfer.store.ts","../../../projects/amd-lib/src/lib/services/pagination.service.ts","../../../projects/amd-lib/src/lib/services/logger.service.ts","../../../projects/amd-lib/src/lib/components/pagination.component.html","../../../projects/amd-lib/src/lib/components/pagination.component.ts","../../../projects/amd-lib/src/lib/components/dropzone.component.ts","../../../projects/amd-lib/src/lib/components/dropzone.component.html","../../../projects/amd-lib/src/lib/components/progress.component.html","../../../projects/amd-lib/src/lib/components/progress.component.ts","../../../projects/amd-lib/src/lib/components/main.component.html","../../../projects/amd-lib/src/lib/components/main.component.ts","../../../projects/amd-lib/src/lib/io/exporters/base.exporter.ts","../../../projects/amd-lib/src/lib/io/exporters/csv.exporter.ts","../../../projects/amd-lib/src/lib/io/exporters/json.exporter.ts","../../../projects/amd-lib/src/lib/enums/export-type.enum.ts","../../../projects/amd-lib/src/lib/services/export.service.ts","../../../projects/amd-lib/src/lib/models/preprocess-container.model.ts","../../../projects/amd-lib/src/lib/enums/hash-type.enum.ts","../../../projects/amd-lib/src/lib/enums/encoding-type.enum.ts","../../../projects/amd-lib/src/lib/models/hash-container.model.ts","../../../projects/amd-lib/src/lib/io/datatransfer.io.ts","../../../projects/amd-lib/src/lib/io/uploaders/base.uploader.ts","../../../projects/amd-lib/src/lib/utils/guid.util.ts","../../../projects/amd-lib/src/lib/services/crypto.service.ts","../../../projects/amd-lib/src/lib/models/datatransfer-item.model.ts","../../../projects/amd-lib/src/lib/io/uploaders/resumablejs.uploader.ts","../../../projects/amd-lib/src/lib/io/downloaders/base.downloader.ts","../../../projects/amd-lib/src/lib/utils/common.util.ts","../../../projects/amd-lib/src/lib/io/downloaders/blob.downloader.ts","../../../projects/amd-lib/src/lib/factories/datatransfer-facade.factory.ts","../../../projects/amd-lib/src/lib/angular-material-datatransfer.component.ts","../../../projects/amd-lib/src/lib/angular-material-datatransfer.component.html","../../../projects/amd-lib/src/lib/services/demo.service.ts","../../../projects/amd-lib/src/lib/angular-material-datatransfer.module.ts","../../../projects/amd-lib/src/public-api.ts","../../../projects/amd-lib/src/angular-material-datatransfer-lib.ts"],"sourcesContent":["export enum CustomEventType {\r\n    UNKNOWN,\r\n    // This event can be used to bootstrap the app module. An IAppConfig can be passed as detail payload.\r\n    CREATE,\r\n    // This event can be used to trigger an item download. The filename, url and size can be passed as detail payload.\r\n    DOWNLOAD_ITEM,\r\n    // This event can be used to update the app configuration. An IAppConfig can be passed as detail payload.\r\n    UPDATE_CONFIG,\r\n    // Indicates that the app has been initialized.\r\n    INIT,\r\n    // Indicates that the overall upload has been completed.\r\n    UPLOAD_COMPLETED,\r\n    // Indicates that the overall download has been completed.\r\n    DOWNLOAD_COMPLETED,\r\n    // Indicates that an item has been added. It will be passed a IDatatransferItem as detail payload.\r\n    ITEM_ADDED,\r\n    // Indicates that an item has been removed. It will be passed a IDatatransferItem as detail payload.\r\n    ITEM_REMOVED,\r\n    // Indicates that an item has been completed.\r\n    ITEM_COMPLETED,\r\n    // Indicates that all items have been cleared.\r\n    ITEMS_CLEARED,\r\n    // Indicates that an item have been clicked.\r\n    ITEM_CLICKED\r\n}\r\n\r\n// tslint:disable-next-line: no-namespace\r\nexport namespace CustomEventTypeExtensions {\r\n    const CUSTOM_EVENT_TYPE_NS = 'github:niklr/angular-material-datatransfer.';\r\n    const CUSTOM_EVENT_TYPE_UNKNOWN = CUSTOM_EVENT_TYPE_NS + 'unknown';\r\n    const CUSTOM_EVENT_TYPE_CREATE = CUSTOM_EVENT_TYPE_NS + 'create';\r\n    const CUSTOM_EVENT_TYPE_DOWNLOAD_ITEM = CUSTOM_EVENT_TYPE_NS + 'download-item';\r\n    const CUSTOM_EVENT_TYPE_UPDATE_CONFIG = CUSTOM_EVENT_TYPE_NS + 'update-config';\r\n    const CUSTOM_EVENT_TYPE_INIT = CUSTOM_EVENT_TYPE_NS + 'init';\r\n    const CUSTOM_EVENT_TYPE_UPLOAD_COMPLETED = CUSTOM_EVENT_TYPE_NS + 'upload-completed';\r\n    const CUSTOM_EVENT_TYPE_DOWNLOAD_COMPLETED = CUSTOM_EVENT_TYPE_NS + 'download-completed';\r\n    const CUSTOM_EVENT_TYPE_ITEM_ADDED = CUSTOM_EVENT_TYPE_NS + 'item-added';\r\n    const CUSTOM_EVENT_TYPE_ITEM_REMOVED = CUSTOM_EVENT_TYPE_NS + 'item-removed';\r\n    const CUSTOM_EVENT_TYPE_ITEM_COMPLETED = CUSTOM_EVENT_TYPE_NS + 'item-completed';\r\n    const CUSTOM_EVENT_TYPE_ITEMS_CLEARED = CUSTOM_EVENT_TYPE_NS + 'items-cleared';\r\n    const CUSTOM_EVENT_TYPE_ITEM_CLICKED = CUSTOM_EVENT_TYPE_NS + 'item-clicked';\r\n    export function toString(type: CustomEventType): string {\r\n        switch (type) {\r\n            case CustomEventType.CREATE:\r\n                return CUSTOM_EVENT_TYPE_CREATE;\r\n            case CustomEventType.DOWNLOAD_ITEM:\r\n                return CUSTOM_EVENT_TYPE_DOWNLOAD_ITEM;\r\n            case CustomEventType.UPDATE_CONFIG:\r\n                return CUSTOM_EVENT_TYPE_UPDATE_CONFIG;\r\n            case CustomEventType.INIT:\r\n                return CUSTOM_EVENT_TYPE_INIT;\r\n            case CustomEventType.UPLOAD_COMPLETED:\r\n                return CUSTOM_EVENT_TYPE_UPLOAD_COMPLETED;\r\n            case CustomEventType.DOWNLOAD_COMPLETED:\r\n                return CUSTOM_EVENT_TYPE_DOWNLOAD_COMPLETED;\r\n            case CustomEventType.ITEM_ADDED:\r\n                return CUSTOM_EVENT_TYPE_ITEM_ADDED;\r\n            case CustomEventType.ITEM_REMOVED:\r\n                return CUSTOM_EVENT_TYPE_ITEM_REMOVED;\r\n            case CustomEventType.ITEM_COMPLETED:\r\n                return CUSTOM_EVENT_TYPE_ITEM_COMPLETED;\r\n            case CustomEventType.ITEMS_CLEARED:\r\n                return CUSTOM_EVENT_TYPE_ITEMS_CLEARED;\r\n            case CustomEventType.ITEM_CLICKED:\r\n                return CUSTOM_EVENT_TYPE_ITEM_CLICKED;\r\n            default:\r\n                return CUSTOM_EVENT_TYPE_UNKNOWN;\r\n        }\r\n    }\r\n    export function toEnum(type: string): CustomEventType {\r\n        switch (type) {\r\n            case CUSTOM_EVENT_TYPE_CREATE:\r\n                return CustomEventType.CREATE;\r\n            case CUSTOM_EVENT_TYPE_DOWNLOAD_ITEM:\r\n                return CustomEventType.DOWNLOAD_ITEM;\r\n            case CUSTOM_EVENT_TYPE_UPDATE_CONFIG:\r\n                return CustomEventType.UPDATE_CONFIG;\r\n            case CUSTOM_EVENT_TYPE_INIT:\r\n                return CustomEventType.INIT;\r\n            case CUSTOM_EVENT_TYPE_UPLOAD_COMPLETED:\r\n                return CustomEventType.UPLOAD_COMPLETED;\r\n            case CUSTOM_EVENT_TYPE_DOWNLOAD_COMPLETED:\r\n                return CustomEventType.DOWNLOAD_COMPLETED;\r\n            case CUSTOM_EVENT_TYPE_ITEM_ADDED:\r\n                return CustomEventType.ITEM_ADDED;\r\n            case CUSTOM_EVENT_TYPE_ITEM_REMOVED:\r\n                return CustomEventType.ITEM_REMOVED;\r\n            case CUSTOM_EVENT_TYPE_ITEM_COMPLETED:\r\n                return CustomEventType.ITEM_COMPLETED;\r\n            case CUSTOM_EVENT_TYPE_ITEMS_CLEARED:\r\n                return CustomEventType.ITEMS_CLEARED;\r\n            case CUSTOM_EVENT_TYPE_ITEM_CLICKED:\r\n                return CustomEventType.ITEM_CLICKED;\r\n            default:\r\n                return CustomEventType.UNKNOWN;\r\n        }\r\n    }\r\n}\r\n","import { Directive, ViewContainerRef } from '@angular/core';\r\n\r\n@Directive({\r\n    // tslint:disable-next-line: directive-selector\r\n    selector: '[amd-host]',\r\n})\r\nexport class HostDirective {\r\n    constructor(public viewContainerRef: ViewContainerRef) { }\r\n}\r\n","export class CoreAppConfig {\r\n  showUploadDropzone = true;\r\n  uploadBrowseElementId = undefined;\r\n  uploadDropElementId = undefined;\r\n  paginationRppOptions = [5, 10, 25];\r\n  simultaneousDownloads = 2;\r\n  downloadMethod = \"GET\";\r\n  downloadHeaders: any = {};\r\n  downloadWithCredentials = false;\r\n  downloadXhrTimeout = 0;\r\n  preprocessHashEnabled = false;\r\n  preprocessHashChecked = true;\r\n  preprocessHashTarget = \"https://httpbin.org\";\r\n  preprocessHashMethod = \"GET\";\r\n  preprocessHashParameterName = \"hash\";\r\n  preprocessHashFileNameParameterName = \"filename\";\r\n  preprocessHashFunctionName = \"sha1\";\r\n  preprocessHashEncodingName = \"hex\";\r\n  preprocessHashInputEncodingName = \"latin1\";\r\n  preprocessHashTooltipContent =\r\n    \"The preprocess option checks if the file is already on the system before uploading.\";\r\n  saveDownloadFileAs: (response: any, name: string) => void = null;\r\n  parseMessageCallback = function (message) {\r\n    return message;\r\n  };\r\n  getTarget = function (request, params) {\r\n    let target;\r\n\r\n    if (request === \"preprocessHash\" && this.preprocessHashChecked) {\r\n      target = this.preprocessHashTarget;\r\n    }\r\n\r\n    if (typeof target === \"function\") {\r\n      return target(params);\r\n    }\r\n\r\n    if (target) {\r\n      const separator = target.indexOf(\"?\") < 0 ? \"?\" : \"&\";\r\n      const joinedParams = params.join(\"&\");\r\n\r\n      return target + separator + joinedParams;\r\n    } else {\r\n      return;\r\n    }\r\n  };\r\n}\r\n\r\nexport class ResumableJsAppConfig {\r\n  chunkSize = 1 * 1024 * 1024;\r\n  forceChunkSize = false;\r\n  simultaneousUploads = 3;\r\n  fileParameterName = \"file\";\r\n  chunkNumberParameterName = \"resumableChunkNumber\";\r\n  chunkSizeParameterName = \"resumableChunkSize\";\r\n  currentChunkSizeParameterName = \"resumableCurrentChunkSize\";\r\n  totalSizeParameterName = \"resumableTotalSize\";\r\n  typeParameterName = \"resumableType\";\r\n  identifierParameterName = \"resumableIdentifier\";\r\n  fileNameParameterName = \"resumableFilename\";\r\n  relativePathParameterName = \"resumableRelativePath\";\r\n  totalChunksParameterName = \"resumableTotalChunks\";\r\n  throttleProgressCallbacks = 0.5;\r\n  query = {};\r\n  headers = {};\r\n  preprocess = null;\r\n  preprocessFile = null;\r\n  method = \"multipart\";\r\n  uploadMethod = \"POST\";\r\n  testMethod = \"GET\";\r\n  prioritizeFirstAndLastChunk: false;\r\n  target = \"https://httpbin.org\";\r\n  testTarget = null;\r\n  parameterNamespace = \"\";\r\n  testChunks = true;\r\n  generateUniqueIdentifier = null;\r\n  getTarget = null;\r\n  maxChunkRetries = 100;\r\n  chunkRetryInterval = undefined;\r\n  permanentErrors = [400, 404, 405, 415, 501];\r\n  maxFiles = undefined;\r\n  withCredentials = false;\r\n  xhrTimeout = 0;\r\n  clearInput = true;\r\n  chunkFormat = \"blob\";\r\n  minFileSize = 1;\r\n  maxFileSize = undefined;\r\n  fileType = [];\r\n  maxFilesErrorCallback = function (files, errorCount) {\r\n    alert(\r\n      \"Please upload no more than \" +\r\n        this.maxFiles +\r\n        \" file\" +\r\n        (this.maxFiles === 1 ? \"\" : \"s\") +\r\n        \" at a time.\"\r\n    );\r\n  };\r\n  minFileSizeErrorCallback = function (file, errorCount) {\r\n    alert(\r\n      file.fileName ||\r\n        file.name +\r\n          \" is too small; please upload files larger than \" +\r\n          this.minFileSize +\r\n          \".\"\r\n    );\r\n  };\r\n  maxFileSizeErrorCallback = function (file, errorCount) {\r\n    alert(\r\n      file.fileName ||\r\n        file.name +\r\n          \" is too large; please upload files less than \" +\r\n          this.maxFileSize +\r\n          \".\"\r\n    );\r\n  };\r\n  fileTypeErrorCallback = function (file, errorCount) {\r\n    alert(\r\n      file.fileName ||\r\n        file.name +\r\n          \" has type not allowed; please upload files of type \" +\r\n          this.fileType +\r\n          \".\"\r\n    );\r\n  };\r\n}\r\n\r\nexport interface IAppConfig {\r\n  production: boolean;\r\n  core: CoreAppConfig;\r\n  resumablejs: ResumableJsAppConfig;\r\n}\r\n\r\nexport class AppConfig implements IAppConfig {\r\n  production = true;\r\n  core = new CoreAppConfig();\r\n  resumablejs = new ResumableJsAppConfig();\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { IAppConfig, AppConfig } from '../models/app-config.model';\r\n\r\n@Injectable()\r\nexport class ConfigService {\r\n\r\n    public static settings: IAppConfig = new AppConfig();\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    public load(config: IAppConfig) {\r\n        if (!!config) {\r\n            ConfigService.settings.production = config.production;\r\n            if (!!config.core) {\r\n                Object.keys(config.core).forEach(propertyName => {\r\n                    if (typeof config.core[propertyName] !== 'undefined') {\r\n                        ConfigService.settings.core[propertyName] = config.core[propertyName];\r\n                    }\r\n                });\r\n            }\r\n            if (!!config.resumablejs) {\r\n                Object.keys(config.resumablejs).forEach(propertyName => {\r\n                    if (typeof config.resumablejs[propertyName] !== 'undefined') {\r\n                        ConfigService.settings.resumablejs[propertyName] = config.resumablejs[propertyName];\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n","export enum TransferStatus {\r\n    Ready,\r\n    Queued,\r\n    Preprocessing,\r\n    Uploading,\r\n    Downloading,\r\n    Finished,\r\n    Failed\r\n}\r\n","export enum TransferType {\r\n    Upload,\r\n    Download\r\n}\r\n","import { Component, Inject, AfterViewInit } from \"@angular/core\";\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from \"@angular/material/dialog\";\r\nimport { DatatransferFacade } from \"../facades/datatransfer.facade\";\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: \"amd-browse-dialog\",\r\n  templateUrl: \"browse-dialog.component.html\",\r\n})\r\nexport class BrowseDialogComponent implements AfterViewInit {\r\n  datatransferFacade: DatatransferFacade;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<BrowseDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any\r\n  ) {\r\n    this.datatransferFacade = <DatatransferFacade>this.data.datatransferFacade;\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.datatransferFacade.assignUploadBrowse(\r\n      document.getElementById(\"amd-browse-files\")\r\n    );\r\n    this.datatransferFacade.assignUploadBrowse(\r\n      document.getElementById(\"amd-browse-folder\"),\r\n      true\r\n    );\r\n  }\r\n\r\n  close(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onNoClick(): void {\r\n    this.close();\r\n  }\r\n}\r\n","<mat-dialog-content>Select specific files or a folder</mat-dialog-content>\r\n<mat-dialog-actions>\r\n    <button mat-raised-button id=\"amd-browse-files\" (click)=\"close()\" tabindex=\"1\">\r\n        <mat-icon>insert_drive_file</mat-icon> Files</button>\r\n    <button mat-raised-button id=\"amd-browse-folder\" (click)=\"close()\" tabindex=\"2\">\r\n        <mat-icon>folder_open</mat-icon> Folder</button>\r\n</mat-dialog-actions>","<div *ngIf=\"mode === 'edit-path'\">\r\n    <mat-dialog-content>\r\n        <p>Enter a new path:</p>\r\n        <form>\r\n            <mat-form-field>\r\n                <input matInput autocomplete=\"off\" tabindex=\"1\" [value]=\"itemPath\"\r\n                    (input)=\"itemPath = $event.target.value; errorMessage = undefined;\" [formControl]=\"editFormControl\">\r\n            </mat-form-field>\r\n            <mat-error *ngIf=\"errorMessage\">\r\n                {{errorMessage}}\r\n            </mat-error>\r\n        </form>\r\n    </mat-dialog-content>\r\n    <mat-dialog-actions>\r\n        <button mat-raised-button (click)=\"editPath()\" tabindex=\"2\">Ok</button>\r\n        <button mat-raised-button (click)=\"close()\" tabindex=\"-1\">Cancel</button>\r\n    </mat-dialog-actions>\r\n</div>\r\n<div *ngIf=\"mode === 'edit-filename'\">\r\n    <mat-dialog-content>\r\n        <p>Enter a new filename:</p>\r\n        <form>\r\n            <mat-form-field>\r\n                <input matInput autocomplete=\"off\" tabindex=\"1\" [value]=\"itemName\"\r\n                    (input)=\"itemName = $event.target.value; errorMessage = undefined;\" [formControl]=\"editFormControl\">\r\n            </mat-form-field>\r\n            <mat-error *ngIf=\"errorMessage\">\r\n                {{errorMessage}}\r\n            </mat-error>\r\n        </form>\r\n    </mat-dialog-content>\r\n    <mat-dialog-actions>\r\n        <button mat-raised-button (click)=\"editFilename()\" tabindex=\"2\">Ok</button>\r\n        <button mat-raised-button (click)=\"close()\" tabindex=\"-1\">Cancel</button>\r\n    </mat-dialog-actions>\r\n</div>","import { Component, Inject, AfterViewInit } from \"@angular/core\";\r\nimport { FormControl } from \"@angular/forms\";\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from \"@angular/material/dialog\";\r\nimport { DatatransferFacade } from \"../facades/datatransfer.facade\";\r\nimport { IDatatransferItem } from \"../models/datatransfer-item.model\";\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: \"amd-edit-dialog\",\r\n  templateUrl: \"edit-dialog.component.html\",\r\n})\r\nexport class EditDialogComponent implements AfterViewInit {\r\n  datatransferFacade: DatatransferFacade;\r\n  mode: string;\r\n  item: IDatatransferItem;\r\n  itemPath: string;\r\n  itemName: string;\r\n  errorMessage: string;\r\n  editFormControl: FormControl;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<EditDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any\r\n  ) {\r\n    this.datatransferFacade = <DatatransferFacade>this.data.datatransferFacade;\r\n    this.mode = this.data.mode;\r\n    this.item = <IDatatransferItem>this.data.item;\r\n    this.itemPath = this.item.path;\r\n    this.itemName = this.item.name;\r\n\r\n    this.editFormControl = new FormControl(\"\", []);\r\n  }\r\n\r\n  ngAfterViewInit() {}\r\n\r\n  close(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onNoClick(): void {\r\n    this.close();\r\n  }\r\n\r\n  editPath(): void {\r\n    try {\r\n      this.datatransferFacade.editPath(\r\n        this.item,\r\n        this.item.path,\r\n        this.itemPath\r\n      );\r\n      this.close();\r\n    } catch (error) {\r\n      this.errorMessage = error;\r\n    }\r\n  }\r\n\r\n  editFilename(): void {\r\n    try {\r\n      this.datatransferFacade.editFilename(this.item, this.itemName);\r\n      this.close();\r\n    } catch (error) {\r\n      this.errorMessage = error;\r\n    }\r\n  }\r\n}\r\n","import { NgZone } from \"@angular/core\";\r\nimport { MatDialog } from \"@angular/material/dialog\";\r\nimport { IProgressContainer } from \"../models/progress-container.model\";\r\nimport { ConfigService } from \"../services/config.service\";\r\nimport { LoggerService } from \"../services/logger.service\";\r\nimport { DatatransferStore } from \"../stores/datatransfer.store\";\r\nimport { DateUtil } from \"../utils/date.util\";\r\nimport { PaginationService } from \"../services/pagination.service\";\r\nimport { ExportService } from \"../services/export.service\";\r\nimport { IUploader } from \"../io/uploaders/base.uploader\";\r\nimport { IDownloader } from \"../io/downloaders/base.downloader\";\r\nimport { IDatatransfer } from \"../io/datatransfer.io\";\r\nimport { IDatatransferItem } from \"../models/datatransfer-item.model\";\r\nimport { TransferStatus } from \"../enums/transfer-status.enum\";\r\nimport { TransferType } from \"../enums/transfer-type.enum\";\r\nimport { BrowseDialogComponent } from \"../components/browse-dialog.component\";\r\nimport { EditDialogComponent } from \"../components/edit-dialog.component\";\r\nimport {\r\n  CustomEventType,\r\n  CustomEventTypeExtensions,\r\n} from \"../enums/custom-event-type.enum\";\r\n\r\nexport class DatatransferFacade {\r\n  private uploadProgress: IProgressContainer;\r\n  private downloadProgress: IProgressContainer;\r\n\r\n  // Interval in milliseconds to calculate progress:\r\n  private progressInterval = 200;\r\n  // Interval in milliseconds to calculate bitrate:\r\n  private bitrateInterval = 1000;\r\n\r\n  constructor(\r\n    private logger: LoggerService,\r\n    private zone: NgZone,\r\n    private store: DatatransferStore,\r\n    private dateUtil: DateUtil,\r\n    private paginationService: PaginationService,\r\n    private exportService: ExportService,\r\n    private uploader: IUploader,\r\n    private downloader: IDownloader,\r\n    private dialog: MatDialog\r\n  ) {\r\n    this.uploadProgress = this.store.uploadProgress;\r\n    this.downloadProgress = this.store.downloadProgress;\r\n    this.init(this.uploader, this.uploadProgress);\r\n    this.init(this.downloader, this.downloadProgress);\r\n  }\r\n\r\n  private init(\r\n    datatransfer: IDatatransfer,\r\n    progressContainer: IProgressContainer\r\n  ): void {\r\n    datatransfer.on(\r\n      \"itemAdded\",\r\n      function (item: IDatatransferItem) {\r\n        const that = this as DatatransferFacade;\r\n        that.zone.run(() => {\r\n          that.addItem(item);\r\n        });\r\n      }.bind(this)\r\n    );\r\n    datatransfer.on(\r\n      \"zoneUpdated\",\r\n      function (\r\n        item: IDatatransferItem,\r\n        status: TransferStatus,\r\n        message?: string\r\n      ) {\r\n        const that = this as DatatransferFacade;\r\n        that.zone.run(() => {\r\n          // console.log(that.uploader.isWorking());\r\n        });\r\n      }.bind(this)\r\n    );\r\n    datatransfer.on(\r\n      \"itemStatusChanged\",\r\n      function (\r\n        item: IDatatransferItem,\r\n        status: TransferStatus,\r\n        message?: string\r\n      ) {\r\n        const that = this as DatatransferFacade;\r\n        that.zone.run(() => {\r\n          that.changeItemStatus(item, status, message);\r\n        });\r\n      }.bind(this)\r\n    );\r\n    datatransfer.on(\r\n      \"itemProgressUpdated\",\r\n      function (item: IDatatransferItem, progress: number) {\r\n        const that = this as DatatransferFacade;\r\n        that.zone.run(() => {\r\n          that.updateItemProgress(item, progress);\r\n        });\r\n      }.bind(this)\r\n    );\r\n    datatransfer.on(\r\n      \"overallProgressUpdated\",\r\n      function (transferType: TransferType, progress: number) {\r\n        const that = this as DatatransferFacade;\r\n        that.zone.run(() => {\r\n          that.updateOverallProgress(progressContainer, transferType, progress);\r\n        });\r\n      }.bind(this)\r\n    );\r\n    datatransfer.on(\r\n      \"overallSizeUpdated\",\r\n      function (size: number) {\r\n        const that = this as DatatransferFacade;\r\n        that.zone.run(() => {\r\n          that.updateOverallSize(progressContainer, size);\r\n        });\r\n      }.bind(this)\r\n    );\r\n  }\r\n\r\n  public assignUploadBrowse(element, isDirectory = false): void {\r\n    this.uploader.assignBrowse(element, isDirectory);\r\n  }\r\n\r\n  public assignUploadDrop(element): void {\r\n    this.uploader.assignDrop(element);\r\n  }\r\n\r\n  public openBrowseDialog(): void {\r\n    const dialogRef = this.dialog.open(BrowseDialogComponent, {\r\n      data: {\r\n        datatransferFacade: this,\r\n      },\r\n    });\r\n  }\r\n\r\n  public openEditPathDialog(item: IDatatransferItem): void {\r\n    const dialogRef = this.dialog.open(EditDialogComponent, {\r\n      data: {\r\n        datatransferFacade: this,\r\n        mode: \"edit-path\",\r\n        item,\r\n      },\r\n    });\r\n  }\r\n\r\n  public openEditFilenameDialog(item: IDatatransferItem): void {\r\n    const dialogRef = this.dialog.open(EditDialogComponent, {\r\n      data: {\r\n        datatransferFacade: this,\r\n        mode: \"edit-filename\",\r\n        item,\r\n      },\r\n    });\r\n  }\r\n\r\n  public toggleVisible(checked: boolean): void {\r\n    this.paginationService.paginatedItems.forEach((item, index) => {\r\n      item.isSelected = checked;\r\n    });\r\n  }\r\n\r\n  public startAll(): void {\r\n    this.store.getItems().forEach((item, index) => {\r\n      const that = this as DatatransferFacade;\r\n      if (\r\n        item.transferType === TransferType.Upload &&\r\n        item.status === TransferStatus.Ready\r\n      ) {\r\n        that.changeItemStatus(item, TransferStatus.Queued);\r\n      }\r\n    });\r\n    this.uploader.startAll();\r\n  }\r\n\r\n  public pauseAll(): void {\r\n    this.store.getItems().forEach((item, index) => {\r\n      item.preprocessContainer.pause(true);\r\n    });\r\n    this.uploader.pauseAll();\r\n    this.downloader.pauseAll();\r\n  }\r\n\r\n  public removeAll(): void {\r\n    this.store.getItems().forEach((item, index) => {\r\n      item.preprocessContainer.cancel(true);\r\n    });\r\n    this.uploader.removeAll();\r\n    this.downloader.removeAll();\r\n    this.store.clear();\r\n    this.uploadProgress.reset(0);\r\n    this.paginationService.update(0);\r\n    document.dispatchEvent(\r\n      new CustomEvent(\r\n        CustomEventTypeExtensions.toString(CustomEventType.ITEMS_CLEARED)\r\n      )\r\n    );\r\n  }\r\n\r\n  public retryAll(): void {\r\n    this.store.getByStatus(TransferStatus.Failed).forEach((item, index) => {\r\n      const that = this as DatatransferFacade;\r\n      that.retryItem(item);\r\n    });\r\n  }\r\n\r\n  public removeSelected(): void {\r\n    const temp = this.store.getSelected().slice();\r\n    temp.forEach((item, index) => {\r\n      const that = this as DatatransferFacade;\r\n      that.removeItem(item);\r\n    });\r\n  }\r\n\r\n  public addItem(item: IDatatransferItem): void {\r\n    if (!!item) {\r\n      this.store.addItem(item);\r\n      this.paginationService.update(this.store.count);\r\n      document.dispatchEvent(\r\n        new CustomEvent(\r\n          CustomEventTypeExtensions.toString(CustomEventType.ITEM_ADDED),\r\n          { detail: item }\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  public removeItem(item: IDatatransferItem): void {\r\n    if (!!item) {\r\n      item.preprocessContainer.cancel(true);\r\n      switch (item.transferType) {\r\n        case TransferType.Upload:\r\n          this.uploader.removeItem(item);\r\n          break;\r\n        case TransferType.Download:\r\n          this.downloader.removeItem(item);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n      this.store.removeById(item.id);\r\n      this.paginationService.update(this.store.count);\r\n      document.dispatchEvent(\r\n        new CustomEvent(\r\n          CustomEventTypeExtensions.toString(CustomEventType.ITEM_REMOVED),\r\n          { detail: item }\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  public retryItem(item: IDatatransferItem): void {\r\n    if (!!item) {\r\n      item.preprocessContainer.cancel(true);\r\n      switch (item.transferType) {\r\n        case TransferType.Upload:\r\n          this.uploader.retryItem(item);\r\n          break;\r\n        case TransferType.Download:\r\n          this.downloader.retryItem(item);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  public itemClick(item: IDatatransferItem) {\r\n   document.dispatchEvent(\r\n     new CustomEvent(\r\n       CustomEventTypeExtensions.toString(CustomEventType.ITEM_CLICKED),\r\n       { detail: item }\r\n     )\r\n   );\r\n  }\r\n\r\n  public changeItemStatus(\r\n    item: IDatatransferItem,\r\n    status: TransferStatus,\r\n    message?: string\r\n  ): void {\r\n    if (!!item && !!status) {\r\n      if (item.status !== status) {\r\n        this.paginationService.setPageByItemId(item.id);\r\n        item.status = status;\r\n        if (!!message) {\r\n          item.message = message;\r\n        }\r\n        this.store.updateFailedCount();\r\n        if (status === TransferStatus.Finished) {\r\n          document.dispatchEvent(\r\n            new CustomEvent(\r\n              CustomEventTypeExtensions.toString(\r\n                CustomEventType.ITEM_COMPLETED\r\n              ),\r\n              { detail: item }\r\n            )\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public updateItemProgress(item: IDatatransferItem, progress: number): void {\r\n    if (!!item) {\r\n      const now: number = this.dateUtil.now();\r\n      const loaded: number = item.progressContainer.total * progress;\r\n      item.progressContainer.updateBitrate(now, loaded, this.bitrateInterval);\r\n      item.progressContainer.updateProgress(now, loaded, this.progressInterval);\r\n    }\r\n  }\r\n\r\n  public updateOverallProgress(\r\n    progressContainer: IProgressContainer,\r\n    transferType: TransferType,\r\n    progress: number\r\n  ): void {\r\n    const now: number = this.dateUtil.now();\r\n    const loaded: number = progressContainer.total * progress;\r\n    // this.logger.log('total: ' + progressContainer.total + ' progress: ' + progress + ' loaded: ' + loaded);\r\n    progressContainer.updateBitrate(now, loaded, this.bitrateInterval);\r\n    progressContainer.updateProgress(now, loaded, this.progressInterval);\r\n    if (progressContainer.total > 0 && loaded >= progressContainer.total) {\r\n      switch (transferType) {\r\n        case TransferType.Upload:\r\n          document.dispatchEvent(\r\n            new CustomEvent(\r\n              CustomEventTypeExtensions.toString(\r\n                CustomEventType.UPLOAD_COMPLETED\r\n              )\r\n            )\r\n          );\r\n          break;\r\n        case TransferType.Download:\r\n          document.dispatchEvent(\r\n            new CustomEvent(\r\n              CustomEventTypeExtensions.toString(\r\n                CustomEventType.DOWNLOAD_COMPLETED\r\n              )\r\n            )\r\n          );\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  public updateOverallSize(\r\n    progressContainer: IProgressContainer,\r\n    size: number\r\n  ): void {\r\n    progressContainer.reset(size);\r\n  }\r\n\r\n  public download(filename: string, url: string, sizeInBytes: number): void {\r\n    this.downloader.download(filename, url, sizeInBytes);\r\n  }\r\n\r\n  public export(exportType: string): void {\r\n    this.exportService.export(exportType);\r\n  }\r\n\r\n  public getStatusClass(status: TransferStatus): string {\r\n    switch (status) {\r\n      case TransferStatus.Ready:\r\n        return \"add_circle_outline\";\r\n      case TransferStatus.Uploading:\r\n        return \"arrow_upward\";\r\n      case TransferStatus.Downloading:\r\n        return \"arrow_downward\";\r\n      case TransferStatus.Failed:\r\n        return \"error_outline\";\r\n      case TransferStatus.Queued:\r\n      case TransferStatus.Preprocessing:\r\n        return \"schedule\";\r\n      case TransferStatus.Finished:\r\n        return \"done_all\";\r\n      default:\r\n        return \"\";\r\n    }\r\n  }\r\n\r\n  public showStartButton(): boolean {\r\n    return (\r\n      this.store.count > 0 &&\r\n      !this.uploader.isWorking() &&\r\n      !this.downloader.isWorking()\r\n    );\r\n  }\r\n\r\n  public showPauseButton(): boolean {\r\n    return this.uploader.isWorking();\r\n  }\r\n\r\n  public showRemoveButton(): boolean {\r\n    return this.store.count > 0;\r\n  }\r\n\r\n  public showRetryButton(): boolean {\r\n    return (\r\n      this.store.failedCount > 0 &&\r\n      !this.uploader.isWorking() &&\r\n      !this.downloader.isWorking()\r\n    );\r\n  }\r\n\r\n  public showRetryButtonByItem(item: IDatatransferItem): boolean {\r\n    return item.status === TransferStatus.Failed;\r\n  }\r\n\r\n  public showExportButton(): boolean {\r\n    return this.store.count > 0;\r\n  }\r\n\r\n  public showPreprocessingCheckbox(): boolean {\r\n    return (\r\n      this.store.count > 0 && ConfigService.settings.core.preprocessHashEnabled\r\n    );\r\n  }\r\n\r\n  public showPreprocessingTooltip(): boolean {\r\n    return (\r\n      this.showPreprocessingCheckbox() &&\r\n      !!ConfigService.settings.core.preprocessHashTooltipContent\r\n    );\r\n  }\r\n\r\n  public showSpinner(item: IDatatransferItem): boolean {\r\n    return (\r\n      item.preprocessContainer.percent > 0 &&\r\n      item.status === TransferStatus.Preprocessing\r\n    );\r\n  }\r\n\r\n  public showProgressbar(item: IDatatransferItem): boolean {\r\n    return (\r\n      item.progressContainer.percent > 0 &&\r\n      (item.status === TransferStatus.Uploading ||\r\n        item.status === TransferStatus.Downloading)\r\n    );\r\n  }\r\n\r\n  public showPath(items: IDatatransferItem[], index: number): boolean {\r\n    if (index > 0 && items.length > index) {\r\n      const currentPath = items[index].path;\r\n      // don't show if previous path is same as current\r\n      return items[index - 1].path !== currentPath;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  public showEditDialog(item: IDatatransferItem): boolean {\r\n    let result = false;\r\n    if (item) {\r\n      switch (item.transferType) {\r\n        case TransferType.Upload:\r\n          if (item.status === TransferStatus.Ready) {\r\n            result = true;\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public editPath(\r\n    item: IDatatransferItem,\r\n    oldPath: string,\r\n    newPath: string\r\n  ): void {\r\n    switch (item.transferType) {\r\n      case TransferType.Upload:\r\n        // replace all \\ with /\r\n        let cleanedPath = newPath.replace(/\\\\/g, \"/\");\r\n        // replace repeated / with one\r\n        cleanedPath = cleanedPath.replace(/\\/+/g, \"/\");\r\n        if (cleanedPath.startsWith(\"/\")) {\r\n          cleanedPath = cleanedPath.slice(1);\r\n        }\r\n        if (cleanedPath && !cleanedPath.endsWith(\"/\")) {\r\n          cleanedPath += \"/\";\r\n        }\r\n        this.uploader.editPath(oldPath, cleanedPath);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  public editFilename(item: IDatatransferItem, name: string): void {\r\n    switch (item.transferType) {\r\n      case TransferType.Upload:\r\n        this.uploader.editFilename(item, name);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  public parseMessage(item: IDatatransferItem): string {\r\n    if (ConfigService.settings.core.parseMessageCallback instanceof Function) {\r\n      return ConfigService.settings.core.parseMessageCallback(item.message);\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n}\r\n","export interface IPaginationContainer {\r\n    pages: number[];\r\n    page: number;\r\n    rpp: number;\r\n    total: number;\r\n    rppOptions: number[];\r\n}\r\n\r\nexport class PaginationContainer implements IPaginationContainer {\r\n    public pages: number[];\r\n    public page: number;\r\n    public rpp: number;\r\n    public total: number;\r\n    public rppOptions: number[];\r\n\r\n    constructor() {\r\n        this.pages = [];\r\n        this.page = 1;\r\n        this.rpp = 5;\r\n        this.total = 0;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class DateUtil {\r\n    public now(): number {\r\n        return ((Date.now) ? Date.now() : (new Date()).getTime());\r\n    }\r\n\r\n    public format(seconds): string {\r\n        let date = new Date(seconds * 1000);\r\n        if (isNaN(date.getTime())) {\r\n            return undefined;\r\n        } else {\r\n            return ('0' + date.getUTCHours()).slice(-2) + ':' +\r\n                ('0' + date.getUTCMinutes()).slice(-2) + ':' +\r\n                ('0' + date.getUTCSeconds()).slice(-2);\r\n        }\r\n    }\r\n}\r\n","export enum DecimalByteUnit {\r\n\t/**\r\n\t * Byte (B)\r\n\t * 1 Byte\r\n\t */\r\n    Byte,\r\n\r\n\t/**\r\n\t * Kilobyte (kB)\r\n\t * 10^3 Byte = 1.000 Byte\r\n\t */\r\n    KB,\r\n\r\n\t/**\r\n\t * Megabyte (MB)\r\n\t * 10^6 Byte = 1.000.000 Byte\r\n\t */\r\n    MB,\r\n\r\n\t/**\r\n\t * Gigabyte (GB)\r\n\t * 10^9 Byte = 1.000.000.000 Byte\r\n\t */\r\n    GB,\r\n\r\n\t/**\r\n\t * Terabyte (TB)\r\n\t * 10^12 Byte = 1.000.000.000.000 Byte\r\n\t */\r\n    TB,\r\n\r\n\t/**\r\n\t * Petabyte (PB)\r\n\t * 10^15 Byte = 1.000.000.000.000.000 Byte\r\n\t */\r\n    PB\r\n}\r\n","// @dynamic\r\nexport class EnumExtension {\r\n    static getNamesAndValues<T extends number>(e: any) {\r\n        return this.getNames(e).map(n => ({ name: n, value: e[n] as T }));\r\n    }\r\n\r\n    static getNames(e: any) {\r\n        return this.getObjValues(e).filter(v => typeof v === 'string') as string[];\r\n    }\r\n\r\n    static getValues<T extends number>(e: any) {\r\n        return this.getObjValues(e).filter(v => typeof v === 'number') as T[];\r\n    }\r\n\r\n    private static getObjValues(e: any): (number | string)[] {\r\n        return Object.keys(e).map(k => e[k]);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { EnumExtension } from '../extensions/enum.extension';\r\nimport { DecimalByteUnit } from '../enums/decimal-byte-unit.enum';\r\n\r\n@Injectable()\r\nexport class DecimalByteUnitUtil {\r\n    C_KB: number = Math.pow(10, 3);\r\n    C_MB: number = Math.pow(10, 6);\r\n    C_GB: number = Math.pow(10, 9);\r\n    C_TB: number = Math.pow(10, 12);\r\n    C_PB: number = Math.pow(10, 15);\r\n\r\n    MAX: number = Number.MAX_VALUE;\r\n\r\n    byteUnits = EnumExtension.getNames(DecimalByteUnit);\r\n\r\n    private multiply(number: number, multiplier: number): number {\r\n        const limit: number = this.MAX / multiplier;\r\n\r\n        if (number > limit) {\r\n            return Number.MAX_VALUE;\r\n        }\r\n        if (number < -limit) {\r\n            return Number.MIN_VALUE;\r\n        }\r\n\r\n        return number * multiplier;\r\n    }\r\n\r\n    public convert(number: number, fromUnit: DecimalByteUnit, toUnit: DecimalByteUnit): number {\r\n        const bytes: number = this.toBytes(number, fromUnit);\r\n        switch (toUnit) {\r\n            case DecimalByteUnit.Byte:\r\n                return bytes;\r\n            case DecimalByteUnit.KB:\r\n                return bytes / this.C_KB;\r\n            case DecimalByteUnit.MB:\r\n                return bytes / this.C_MB;\r\n            case DecimalByteUnit.GB:\r\n                return bytes / this.C_GB;\r\n            case DecimalByteUnit.TB:\r\n                return bytes / this.C_TB;\r\n            case DecimalByteUnit.PB:\r\n                return bytes / this.C_PB;\r\n        }\r\n        return number;\r\n    }\r\n\r\n    public toBytes(number: number, fromUnit: DecimalByteUnit): number {\r\n        switch (fromUnit) {\r\n            case DecimalByteUnit.Byte:\r\n                return number;\r\n            case DecimalByteUnit.KB:\r\n                return this.multiply(number, this.C_KB);\r\n            case DecimalByteUnit.MB:\r\n                return this.multiply(number, this.C_MB);\r\n            case DecimalByteUnit.GB:\r\n                return this.multiply(number, this.C_GB);\r\n            case DecimalByteUnit.TB:\r\n                return this.multiply(number, this.C_TB);\r\n            case DecimalByteUnit.PB:\r\n                return this.multiply(number, this.C_PB);\r\n        }\r\n        return number;\r\n    }\r\n\r\n    public format(number: number, fromUnit: DecimalByteUnit): [DecimalByteUnit, number] {\r\n        let result: [DecimalByteUnit, number];\r\n        result = [DecimalByteUnit.Byte, this.toBytes(number, fromUnit)];\r\n        for (const currentUnit of this.byteUnits) {\r\n            if (Math.abs(result[1]) < 1000) {\r\n                result[0] = DecimalByteUnit[currentUnit];\r\n                break;\r\n            } else {\r\n                result[1] /= 1000;\r\n            }\r\n        }\r\n        result[1] = Number(result[1].toFixed(2));\r\n        return result;\r\n    }\r\n}\r\n","import { ReflectiveInjector } from '@angular/core';\r\nimport { DecimalByteUnit } from '../enums/decimal-byte-unit.enum';\r\nimport { DecimalByteUnitUtil } from '../utils/decimal-byte-unit.util';\r\n\r\nexport interface ISizeContainer {\r\n    displayUnit: string;\r\n    displaySize: number;\r\n    decimalByteUnit: DecimalByteUnit;\r\n    decimalByteUnitSize: number;\r\n    update(init?: Partial<SizeContainer>): void;\r\n    updateDecimal(decimalByteUnit: DecimalByteUnit, decimalByteUnitSize: number): void;\r\n}\r\n\r\nexport class SizeContainer implements ISizeContainer {\r\n\r\n    private decimalByteUnitUtil: DecimalByteUnitUtil;\r\n\r\n    public displayUnit: string;\r\n    public displaySize: number;\r\n    public decimalByteUnit: DecimalByteUnit = DecimalByteUnit.MB;\r\n    public decimalByteUnitSize = 0;\r\n\r\n    public constructor(init?: Partial<SizeContainer>) {\r\n        let injector = ReflectiveInjector.resolveAndCreate([DecimalByteUnitUtil]);\r\n        this.decimalByteUnitUtil = injector.get(DecimalByteUnitUtil);\r\n        this.update(init);\r\n    }\r\n\r\n    public update(init?: Partial<SizeContainer>): void {\r\n        if (!!this.decimalByteUnitUtil && !!init && !!init.decimalByteUnitSize) {\r\n            this.updateDecimal(init.decimalByteUnit, init.decimalByteUnitSize);\r\n        }\r\n    }\r\n\r\n    public updateDecimal(decimalByteUnit: DecimalByteUnit, decimalByteUnitSize: number): void {\r\n        let convertResult: [DecimalByteUnit, number] =\r\n            this.decimalByteUnitUtil.format(decimalByteUnitSize, decimalByteUnit);\r\n\r\n        this.decimalByteUnit = convertResult[0];\r\n        this.decimalByteUnitSize = convertResult[1];\r\n\r\n        this.displayUnit = DecimalByteUnit[this.decimalByteUnit];\r\n        this.displaySize = !!this.decimalByteUnitSize ? this.decimalByteUnitSize : 0;\r\n    }\r\n}\r\n","import { ReflectiveInjector } from '@angular/core';\r\nimport { DateUtil } from '../utils/date.util';\r\nimport { ISizeContainer, SizeContainer } from './size-container.model';\r\nimport { DecimalByteUnit } from '../enums/decimal-byte-unit.enum';\r\n\r\nexport interface IProgressContainer {\r\n    total: number; // bytes\r\n    progressTimestamp: number; // milliseconds\r\n    bitrateTimestamp: number; // milliseconds\r\n    bitrate: number; // bit/s\r\n    percent: number; // 0-100\r\n    displayBitrate: string;\r\n    displayTimeLeft: string;\r\n    loadedSizeContainer: ISizeContainer;\r\n    totalSizeContainer: ISizeContainer;\r\n    reset(total: number): void;\r\n    updateProgress(now: number, loaded: number, interval: number): void;\r\n    updateBitrate(now: number, loaded: number, interval: number): void;\r\n}\r\n\r\nexport class ProgressContainer implements IProgressContainer {\r\n    private dateUtil: DateUtil;\r\n    private loaded: number; // bytes\r\n    private bitrateSizeContainer: ISizeContainer;\r\n\r\n    public total: number;\r\n    public progressTimestamp: number;\r\n    public bitrateTimestamp: number;\r\n    public bitrate: number;\r\n    public percent: number;\r\n    public displayBitrate: string;\r\n    public displayTimeLeft: string;\r\n    public loadedSizeContainer: ISizeContainer;\r\n    public totalSizeContainer: ISizeContainer;\r\n\r\n    public constructor(total: number) {\r\n        const injector = ReflectiveInjector.resolveAndCreate([DateUtil]);\r\n        this.dateUtil = injector.get(DateUtil);\r\n\r\n        this.bitrateSizeContainer = new SizeContainer();\r\n        this.loadedSizeContainer = new SizeContainer();\r\n        this.totalSizeContainer = new SizeContainer();\r\n        this.reset(total);\r\n    }\r\n\r\n    public reset(total: number): void {\r\n        this.progressTimestamp = this.dateUtil.now();\r\n        this.bitrateTimestamp = this.dateUtil.now();\r\n        this.loaded = 0;\r\n        this.bitrate = 0;\r\n        this.percent = 0;\r\n        this.total = total;\r\n        this.displayBitrate = undefined;\r\n        this.displayTimeLeft = undefined;\r\n        this.bitrateSizeContainer.updateDecimal(DecimalByteUnit.Byte, this.bitrate);\r\n        this.loadedSizeContainer.updateDecimal(DecimalByteUnit.Byte, this.loaded);\r\n        this.totalSizeContainer.updateDecimal(DecimalByteUnit.Byte, this.total);\r\n    }\r\n\r\n    public updateProgress(now: number, loaded: number, interval: number): void {\r\n        const timeDiff = now - this.progressTimestamp;\r\n        // console.log('loaded: ' + loaded + ' total: ' + this.total);\r\n        if (!this.percent || timeDiff > interval) {\r\n            this.percent = Number((loaded / this.total * 100).toFixed(2));\r\n            this.loaded = loaded;\r\n            this.loadedSizeContainer.updateDecimal(DecimalByteUnit.Byte, this.loaded);\r\n            this.progressTimestamp = now;\r\n            if (this.bitrate > 0) {\r\n                this.displayTimeLeft = this.dateUtil.format((this.total - this.loaded) * 8 / this.bitrate);\r\n            } else {\r\n                this.displayTimeLeft = this.dateUtil.format(0);\r\n            }\r\n        } else if (loaded >= this.total) {\r\n            this.percent = 100;\r\n            this.loaded = this.total;\r\n        }\r\n    }\r\n\r\n    public updateBitrate(now: number, loaded: number, interval: number): void {\r\n        const timeDiff = now - this.bitrateTimestamp;\r\n        if (!this.bitrate || timeDiff > interval) {\r\n            this.bitrate = (loaded - this.loaded) * (1000 / timeDiff) * 8;\r\n            if (this.bitrate === Number.POSITIVE_INFINITY || this.bitrate === Number.NEGATIVE_INFINITY) {\r\n                this.bitrate = 0;\r\n            }\r\n            this.bitrateSizeContainer.updateDecimal(DecimalByteUnit.Byte, this.bitrate / 8);\r\n            this.displayBitrate = this.bitrateSizeContainer.displaySize + ' ' + this.bitrateSizeContainer.displayUnit + '/s';\r\n            this.bitrateTimestamp = now;\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { IDatatransferItem } from '../models/datatransfer-item.model';\r\nimport { IProgressContainer, ProgressContainer } from '../models/progress-container.model';\r\nimport { TransferStatus } from '../enums/transfer-status.enum';\r\n\r\n@Injectable()\r\nexport class DatatransferStore {\r\n\r\n    private items: IDatatransferItem[] = [];\r\n\r\n    public count = 0;\r\n    public failedCount = 0;\r\n    public uploadProgress: IProgressContainer = new ProgressContainer(0);\r\n    public downloadProgress: IProgressContainer = new ProgressContainer(0);\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    private updateCount(): void {\r\n        this.count = this.items.length;\r\n    }\r\n\r\n    public updateFailedCount(): void {\r\n        this.failedCount = this.getByStatus(TransferStatus.Failed).length;\r\n    }\r\n\r\n    public getItems(): IDatatransferItem[] {\r\n        return this.items;\r\n    }\r\n\r\n    public getSelected(): IDatatransferItem[] {\r\n        return this.items.filter((item) => item.isSelected === true);\r\n    }\r\n\r\n    public getById(id: string): IDatatransferItem {\r\n        return this.items.find((item) => item.id === id);\r\n    }\r\n\r\n    public getIndexById(id: string): number {\r\n        return this.items.findIndex(i => i.id === id);\r\n    }\r\n\r\n    public clear(): void {\r\n        this.items.length = 0;\r\n        this.updateCount();\r\n        this.updateFailedCount();\r\n    }\r\n\r\n    public addItem(item: IDatatransferItem): void {\r\n        this.items.push(item);\r\n        this.updateCount();\r\n    }\r\n\r\n    public removeById(id: string): void {\r\n        const index: number = this.getIndexById(id);\r\n        if (index > -1) {\r\n            this.items.splice(index, 1);\r\n            this.updateCount();\r\n        }\r\n    }\r\n\r\n    public getByStatus(status: TransferStatus) {\r\n        return this.items.filter((item) => item.status === status);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { IPaginationContainer, PaginationContainer } from '../models/pagination-container.model';\r\nimport { IDatatransferItem } from '../models/datatransfer-item.model';\r\nimport { DatatransferStore } from '../stores/datatransfer.store';\r\n\r\n@Injectable()\r\nexport class PaginationService {\r\n\r\n    public pagination: IPaginationContainer;\r\n    public paginatedItems: IDatatransferItem[] = [];\r\n\r\n    constructor(private datatransferStore: DatatransferStore) {\r\n        this.pagination = new PaginationContainer();\r\n    }\r\n\r\n    setRppOptions(rppOptions: number[]): void {\r\n        this.pagination.rppOptions = rppOptions;\r\n        this.setPaginationContainer();\r\n    }\r\n\r\n    update(total: number): void {\r\n        if (total <= 0) {\r\n            this.paginatedItems.length = 0;\r\n        }\r\n        this.pagination.total = total;\r\n        this.setPaginationContainer();\r\n    }\r\n\r\n    setPaginationContainer(): void {\r\n        const pageCount: number = this.pageCount();\r\n        if (this.pagination.pages.length > pageCount) {\r\n            this.pagination.pages.splice(pageCount);\r\n        } else {\r\n            for (let i = this.pagination.pages.length; i < pageCount; i++) {\r\n                this.pagination.pages.push(i + 1);\r\n            }\r\n        }\r\n        if (!this.pagination.pages.includes(this.pagination.page)) {\r\n            this.pagination.page = 1;\r\n        }\r\n        if (!!this.pagination.rppOptions && this.pagination.rppOptions.length > 0\r\n            && !this.pagination.rppOptions.includes(this.pagination.rpp)) {\r\n            this.pagination.rpp = this.pagination.rppOptions[0];\r\n        }\r\n        this.onPaginationChange();\r\n    }\r\n\r\n    max(): number {\r\n        return this.hasNext() ? this.pagination.page * this.pagination.rpp : this.pagination.total;\r\n    }\r\n\r\n    min(): number {\r\n        return this.pagination.total > 0 ? this.pagination.page * this.pagination.rpp - this.pagination.rpp + 1 : 0;\r\n    }\r\n\r\n    first(): void {\r\n        this.pagination.page = 1;\r\n        this.onPaginationChange();\r\n    }\r\n\r\n    last(): void {\r\n        this.pagination.page = this.pageCount();\r\n        this.onPaginationChange();\r\n    }\r\n\r\n    hasNext(): boolean {\r\n        return this.pagination.page * this.pagination.rpp < this.pagination.total;\r\n    }\r\n\r\n    hasPrevious(): boolean {\r\n        return this.pagination.page > 1;\r\n    }\r\n\r\n    moveNext(): void {\r\n        this.pagination.page++;\r\n        this.onPaginationChange();\r\n    }\r\n\r\n    movePrevious(): void {\r\n        this.pagination.page--;\r\n        this.onPaginationChange();\r\n    }\r\n\r\n    setPage(page: number) {\r\n        this.pagination.page = page;\r\n        this.onPageChange();\r\n    }\r\n\r\n    onPageChange(): void {\r\n        this.setPaginationContainer();\r\n        this.onPaginationChange();\r\n    }\r\n\r\n    onRppChange(): void {\r\n        this.setPaginationContainer();\r\n        this.pagination.page = 1;\r\n        this.onPaginationChange();\r\n    }\r\n\r\n    onPaginationChange(): void {\r\n        const startIndex = (this.pagination.page - 1) * this.pagination.rpp;\r\n        const endIndex = Math.min(startIndex + this.pagination.rpp, this.pagination.total);\r\n        this.paginatedItems = this.datatransferStore.getItems().slice(startIndex, endIndex);\r\n    }\r\n\r\n    pageCount(): number {\r\n        return this.pagination.total > 0 ? Math.ceil(this.pagination.total / (this.pagination.rpp > 0 ? this.pagination.rpp : 1)) : 1;\r\n    }\r\n\r\n    getPageByItemId(id: string): number {\r\n        const index: number = this.datatransferStore.getIndexById(id);\r\n        if (index > -1) {\r\n            return Math.ceil((index + 1) / this.pagination.rpp);\r\n        }\r\n    }\r\n\r\n    setPageByItemId(id: string): void {\r\n        const page = this.getPageByItemId(id);\r\n        if (this.pagination.page !== page) {\r\n            this.setPage(page);\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ConfigService } from './config.service';\r\n\r\n// From: https://github.com/angular/angular/issues/5458\r\n@Injectable()\r\nexport class LoggerService {\r\n\r\n    private get enabled(): boolean {\r\n        return !ConfigService.settings.production;\r\n    }\r\n\r\n    noop = () => { };\r\n\r\n    constructor() {\r\n    }\r\n\r\n    get debug() {\r\n        if (this.enabled) {\r\n            return console.debug.bind(console);\r\n        }\r\n        return this.noop;\r\n    }\r\n\r\n    get error() {\r\n        if (this.enabled) {\r\n            return console.error.bind(console);\r\n        }\r\n        return this.noop;\r\n    }\r\n\r\n    get log() {\r\n        if (this.enabled) {\r\n            return console.log.bind(console);\r\n        }\r\n        return this.noop;\r\n    }\r\n\r\n    get info() {\r\n        if (this.enabled) {\r\n            return console.info.bind(console);\r\n        }\r\n        return this.noop;\r\n    }\r\n\r\n    get warn() {\r\n        if (this.enabled) {\r\n            return console.warn.bind(console);\r\n        }\r\n        return this.noop;\r\n    }\r\n}\r\n","<mat-form-field>\r\n    <mat-select placeholder=\"Page\" [(ngModel)]=\"paginationService.pagination.page\" (change)=\"onPageChange()\" aria-label=\"Page\">\r\n        <mat-option *ngFor=\"let p of paginationService.pagination.pages\" [value]=\"p\">\r\n            {{ p }}\r\n        </mat-option>\r\n    </mat-select>\r\n</mat-form-field>\r\n<mat-form-field>\r\n    <mat-select placeholder=\"Rows per page\" [(ngModel)]=\"paginationService.pagination.rpp\" (change)=\"onRppChange()\" aria-label=\"Rows per page\">\r\n        <mat-option *ngFor=\"let o of paginationService.pagination.rppOptions\" [value]=\"o\">\r\n            {{ o }}\r\n        </mat-option>\r\n    </mat-select>\r\n</mat-form-field>\r\n<span>{{min()}} - {{max()}} of {{paginationService.pagination.total}}</span>\r\n<button mat-icon-button mat-button (click)=\"movePrevious()\" [disabled]=\"!hasPrevious()\">\r\n    <mat-icon>navigate_before</mat-icon>\r\n</button>\r\n<button mat-icon-button mat-button (click)=\"moveNext()\" [disabled]=\"!hasNext()\">\r\n    <mat-icon>navigate_next</mat-icon>\r\n</button>","import { Component, Input } from '@angular/core';\r\nimport { PaginationService } from '../services/pagination.service';\r\nimport { LoggerService } from '../services/logger.service';\r\n\r\n@Component({\r\n    // tslint:disable-next-line:component-selector\r\n    selector: 'amd-pagination',\r\n    templateUrl: 'pagination.component.html'\r\n})\r\n\r\nexport class PaginationComponent {\r\n\r\n    @Input() paginationService: PaginationService;\r\n\r\n    constructor(private logger: LoggerService) { }\r\n\r\n    max(): number {\r\n        return this.paginationService.max();\r\n    };\r\n\r\n    min(): number {\r\n        return this.paginationService.min();\r\n    };\r\n\r\n    first(): void {\r\n        this.paginationService.first();\r\n    }\r\n\r\n    last(): void {\r\n        this.paginationService.last();\r\n    }\r\n\r\n    hasNext(): boolean {\r\n        return this.paginationService.hasNext();\r\n    }\r\n\r\n    hasPrevious(): boolean {\r\n        return this.paginationService.hasPrevious();\r\n    };\r\n\r\n    moveNext(): void {\r\n        this.paginationService.moveNext();\r\n    }\r\n\r\n    movePrevious(): void {\r\n        this.paginationService.movePrevious();\r\n    }\r\n\r\n    onPageChange(): void {\r\n        this.paginationService.onPageChange();\r\n    }\r\n\r\n    onRppChange(): void {\r\n        this.paginationService.onRppChange();\r\n    }\r\n\r\n    onPaginationChange(): void {\r\n        this.paginationService.onPaginationChange();\r\n    }\r\n\r\n    pageCount(): number {\r\n        return this.paginationService.pageCount();\r\n    }\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    // tslint:disable-next-line:component-selector\r\n    selector: 'amd-dropzone',\r\n    templateUrl: 'dropzone.component.html'\r\n})\r\n\r\nexport class DropzoneComponent {\r\n\r\n    constructor() { }\r\n}\r\n","<div class=\"amd-dropzone\" id=\"amd-dropzone-component\">\r\n    <div class=\"amd-dropzone-content\">\r\n        <mat-icon style=\"font-size: 64px; color: rgba(255, 255, 255, 1);\">insert_drive_file</mat-icon>\r\n        <mat-icon style=\"margin-left: 10px;\">add_circle_outline</mat-icon>\r\n        <p>Drop your files/folders here or click to upload.</p>\r\n    </div>\r\n</div>","<div style=\"font-size: 11px; margin-top: 10px;\">\r\n    <div fxFlex=\"25%\" fxFlex.lt-md=\"50%\">\r\n        {{progressContainer.displayBitrate}}\r\n    </div>\r\n    <div fxFlex=\"25%\" fxHide.lt-md style=\"text-align: center\">\r\n        {{progressContainer.displayTimeLeft}}\r\n    </div>\r\n    <div fxFlex=\"25%\" fxHide.lt-md style=\"text-align: center\">\r\n        {{progressContainer.percent}}%\r\n    </div>\r\n    <div fxFlex=\"25%\" fxFlex.lt-md=\"50%\" style=\"text-align: right\">\r\n        {{progressContainer.loadedSizeContainer.displaySize}} / {{progressContainer.totalSizeContainer.displaySize}} {{progressContainer.totalSizeContainer.displayUnit}}\r\n    </div>\r\n</div>\r\n<mat-progress-bar *ngIf=\"progressContainer.total > 0\" [value]=\"progressContainer.percent\">\r\n</mat-progress-bar>","import { Component, Input } from '@angular/core';\r\nimport { IProgressContainer } from '../models/progress-container.model';\r\n\r\n@Component({\r\n    // tslint:disable-next-line:component-selector\r\n    selector: 'amd-progress',\r\n    templateUrl: 'progress.component.html'\r\n})\r\n\r\nexport class ProgressComponent {\r\n\r\n    @Input() progressContainer: IProgressContainer;\r\n\r\n    constructor() { }\r\n}\r\n","<div class=\"amd-font\">\r\n    <div *ngIf=\"config.core.showUploadDropzone\">\r\n        <amd-dropzone></amd-dropzone>\r\n    </div>\r\n\r\n    <div fxLayout=\"row\" fxLayout.lt-sm=\"column\" style=\"margin-bottom: 10px\">\r\n        <div fxFlex>\r\n            <button class=\"amd-mr-1\" mat-raised-button *ngIf=\"datatransferFacade.showStartButton()\"\r\n                (click)=\"datatransferFacade.startAll()\">\r\n                <mat-icon>play_arrow</mat-icon> Start\r\n            </button>\r\n            <button class=\"amd-mr-1\" mat-raised-button *ngIf=\"datatransferFacade.showPauseButton()\"\r\n                (click)=\"datatransferFacade.pauseAll()\">\r\n                <mat-icon>pause</mat-icon> Pause\r\n            </button>\r\n            <button class=\"amd-mr-1\" mat-raised-button *ngIf=\"datatransferFacade.showRemoveButton()\"\r\n                (click)=\"datatransferFacade.removeAll()\">\r\n                <mat-icon>close</mat-icon> Remove all\r\n            </button>\r\n            <button class=\"amd-mr-1\" mat-raised-button *ngIf=\"datatransferFacade.showRetryButton()\"\r\n                (click)=\"datatransferFacade.retryAll()\">\r\n                <mat-icon>refresh</mat-icon> Retry ({{datatransferStore.failedCount}})\r\n            </button>\r\n            <mat-menu #exportMenu=\"matMenu\">\r\n                <button mat-menu-item (click)=\"datatransferFacade.export('CSV')\">\r\n                    <span>CSV</span>\r\n                </button>\r\n                <button mat-menu-item (click)=\"datatransferFacade.export('JSON')\">\r\n                    <span>JSON</span>\r\n                </button>\r\n            </mat-menu>\r\n            <button mat-raised-button *ngIf=\"datatransferFacade.showExportButton()\" [matMenuTriggerFor]=\"exportMenu\">\r\n                Export\r\n                <mat-icon>expand_more</mat-icon>\r\n            </button>\r\n            <mat-checkbox *ngIf=\"datatransferFacade.showPreprocessingCheckbox()\"\r\n                [(ngModel)]=\"config.core.preprocessHashChecked\" style=\"margin-left: 10px;\">\r\n                Preprocessing <span *ngIf=\"datatransferFacade.showPreprocessingTooltip()\"\r\n                    class=\"amd-vertical-align-middle\" [matTooltip]=\"config.core.preprocessHashTooltipContent\"\r\n                    matTooltipPosition=\"right\">\r\n                    <mat-icon>info_outline</mat-icon>\r\n                </span>\r\n            </mat-checkbox>\r\n        </div>\r\n        <div fxFlex=\"70px\" fxFlex.lt-sm=\"0px\">\r\n        </div>\r\n        <div fxFlex>\r\n            <div *ngIf=\"uploadProgress.percent > 0\">\r\n                <amd-progress [progressContainer]=\"uploadProgress\"></amd-progress>\r\n            </div>\r\n            <div *ngIf=\"downloadProgress.percent > 0\">\r\n                <amd-progress [progressContainer]=\"downloadProgress\"></amd-progress>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"amd-container\">\r\n        <div fxLayout=\"row\" class=\"amd-container-header\" style=\"align-items: center;\">\r\n            <div fxFlex=\"40px\">\r\n                <mat-checkbox (change)=\"datatransferFacade.toggleVisible($event.checked)\"></mat-checkbox>\r\n            </div>\r\n            <div fxFlex=\"50%\" fxFlex.lt-sm=\"100%\">\r\n                Filename\r\n            </div>\r\n            <div fxFlex=\"50%\" style=\"padding-left: 40px;\" fxHide.lt-sm>\r\n                Progress\r\n            </div>\r\n            <div fxFlex=\"20px\">\r\n                <mat-menu #batchItemMenu=\"matMenu\">\r\n                    <button mat-menu-item (click)=\"datatransferFacade.removeSelected()\">\r\n                        <mat-icon>close</mat-icon>\r\n                        <span>Remove</span>\r\n                    </button>\r\n                </mat-menu>\r\n                <button mat-icon-button [matMenuTriggerFor]=\"batchItemMenu\">\r\n                    <mat-icon>more_vert</mat-icon>\r\n                </button>\r\n            </div>\r\n        </div>\r\n        <ng-template ngFor let-item [ngForOf]=\"paginationService.paginatedItems\" let-i=\"index\">\r\n            <div *ngIf=\"datatransferFacade.showPath(paginationService.paginatedItems, i)\">\r\n                <div fxLayout=\"row\" class=\"amd-container-headline\">\r\n                    <div fxFlex class=\"amd-container-headline-item\">\r\n                        <div class=\"amd-container-headline-item-entry\">\r\n                            <div fxFlex=\"40px\">\r\n                                <mat-icon>folder_open</mat-icon>\r\n                            </div>\r\n                            <div fxFlex>\r\n                                <span>\r\n                                    <b>{{item.displayPath}}</b>\r\n                                </span>\r\n                                <button mat-icon-button (click)=\"datatransferFacade.openEditPathDialog(item)\"\r\n                                    *ngIf=\"datatransferFacade.showEditDialog(item)\">\r\n                                    <mat-icon aria-label=\"Edit path\">edit</mat-icon>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div fxLayout=\"row\" fxLayout.lt-sm=\"column\" class=\"amd-container-row\"\r\n                [ngClass]=\"{'selected': item.isSelected}\" (click)=\"datatransferFacade.itemClick(item)\">\r\n                <div fxFlex class=\"amd-container-row-item\">\r\n                    <div class=\"amd-container-row-item-entry\">\r\n                        <div fxFlex=\"40px\">\r\n                            <mat-checkbox [(ngModel)]=\"item.isSelected\"></mat-checkbox>\r\n                        </div>\r\n                        <div fxFlex=\"100%\">\r\n                            <div matTooltip=\"{{item.name}}\" matTooltipPosition=\"above\">\r\n                                <span>{{item.name}}</span>\r\n                                <button mat-icon-button (click)=\"datatransferFacade.openEditFilenameDialog(item)\"\r\n                                    *ngIf=\"datatransferFacade.showEditDialog(item)\">\r\n                                    <mat-icon aria-label=\"Edit filename\">edit</mat-icon>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div fxFlex class=\"amd-container-row-item\">\r\n                    <div class=\"amd-container-row-item-entry\">\r\n                        <div fxFlex=\"40px\" matTooltip=\"{{item.preprocessContainer.percent}}%\"\r\n                            *ngIf=\"datatransferFacade.showSpinner(item); else showStatusClass\">\r\n                            <mat-progress-spinner *ngIf=\"item.preprocessContainer.percent > 0\" [diameter]=\"20\"\r\n                                mode=\"determinate\" [value]=\"item.preprocessContainer.percent\"></mat-progress-spinner>\r\n                        </div>\r\n                        <ng-template #showStatusClass>\r\n                            <div fxFlex=\"40px\">\r\n                                <mat-icon>{{datatransferFacade.getStatusClass(item.status)}}</mat-icon>\r\n                            </div>\r\n                        </ng-template>\r\n                        <div fxFlex=\"100%\">\r\n                            <div *ngIf=\"datatransferFacade.showProgressbar(item); else showStatusBlock\">\r\n                                <div class=\"amd-container-row-item-entry-stats\">\r\n                                    <div fxFlex=\"25%\" fxFlex.lt-md=\"50%\">\r\n                                        {{item.progressContainer.displayBitrate}}\r\n                                    </div>\r\n                                    <div fxFlex=\"25%\" fxHide.lt-md style=\"text-align: center\">\r\n                                        {{item.progressContainer.displayTimeLeft}}\r\n                                    </div>\r\n                                    <div fxFlex=\"25%\" fxHide.lt-md style=\"text-align: center\">\r\n                                        {{item.progressContainer.percent}}%\r\n                                    </div>\r\n                                    <div fxFlex=\"25%\" fxFlex.lt-md=\"50%\" style=\"text-align: right\">\r\n                                        {{item.progressContainer.loadedSizeContainer.displaySize}} /\r\n                                        {{item.sizeContainer.displaySize}}\r\n                                        {{item.sizeContainer.displayUnit}}\r\n                                    </div>\r\n                                </div>\r\n                                <mat-progress-bar *ngIf=\"item.progressContainer.total > 0\" color=\"primary\"\r\n                                    mode=\"determinate\" [value]=\"item.progressContainer.percent\">\r\n                                </mat-progress-bar>\r\n                            </div>\r\n                            <ng-template #showStatusBlock>\r\n                                {{item.getStatusName()}} ({{item.sizeContainer.displaySize}}\r\n                                {{item.sizeContainer.displayUnit}})\r\n                                <div *ngIf=\"!!item.message\">\r\n                                    <small>{{datatransferFacade.parseMessage(item)}}</small>\r\n                                </div>\r\n                            </ng-template>\r\n                        </div>\r\n                        <div fxFlex=\"20px\">\r\n                            <mat-menu #itemMenu=\"matMenu\">\r\n                                <button mat-menu-item (click)=\"datatransferFacade.retryItem(item)\"\r\n                                    *ngIf=\"datatransferFacade.showRetryButtonByItem(item)\">\r\n                                    <mat-icon>refresh</mat-icon>\r\n                                    <span>Retry</span>\r\n                                </button>\r\n                                <button mat-menu-item (click)=\"datatransferFacade.removeItem(item)\">\r\n                                    <mat-icon>close</mat-icon>\r\n                                    <span>Remove</span>\r\n                                </button>\r\n                            </mat-menu>\r\n                            <button mat-icon-button [matMenuTriggerFor]=\"itemMenu\">\r\n                                <mat-icon>more_vert</mat-icon>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </ng-template>\r\n    </div>\r\n\r\n    <div style=\"font-size: 12px; margin-top: 20px; text-align: right;\">\r\n        <amd-pagination [paginationService]=\"paginationService\"></amd-pagination>\r\n    </div>\r\n</div>\r\n","import { Component, Input, AfterViewInit } from '@angular/core';\r\nimport { IAppConfig } from '../models/app-config.model';\r\nimport { DatatransferFacade } from '../facades/datatransfer.facade';\r\nimport { IProgressContainer } from '../models/progress-container.model';\r\nimport { ConfigService } from '../services/config.service';\r\nimport { PaginationService } from '../services/pagination.service';\r\nimport { DatatransferStore } from '../stores/datatransfer.store';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'amd-main',\r\n  templateUrl: './main.component.html'\r\n})\r\nexport class MainComponent implements AfterViewInit {\r\n\r\n  @Input()\r\n  datatransferFacade: DatatransferFacade;\r\n\r\n  config: IAppConfig;\r\n  uploadProgress: IProgressContainer;\r\n  downloadProgress: IProgressContainer;\r\n\r\n  constructor(public datatransferStore: DatatransferStore, public paginationService: PaginationService) {\r\n    this.config = ConfigService.settings;\r\n    this.uploadProgress = this.datatransferStore.uploadProgress;\r\n    this.downloadProgress = this.datatransferStore.downloadProgress;\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.init();\r\n  }\r\n\r\n  private init(): void {\r\n    if (this.config.core.showUploadDropzone) {\r\n      const dropzoneElement = document.getElementById('amd-dropzone-component');\r\n      if (dropzoneElement) {\r\n        dropzoneElement.addEventListener('click', this.datatransferFacade.openBrowseDialog.bind(this.datatransferFacade), false);\r\n        this.datatransferFacade.assignUploadDrop(dropzoneElement);\r\n      }\r\n    } else {\r\n      if (typeof this.config.core.uploadBrowseElementId !== 'undefined') {\r\n        const uploadBrowseElement = document.getElementById(this.config.core.uploadBrowseElementId);\r\n        if (uploadBrowseElement) {\r\n          uploadBrowseElement.addEventListener('click', this.datatransferFacade.openBrowseDialog.bind(this.datatransferFacade), false);\r\n        }\r\n      }\r\n      if (typeof this.config.core.uploadDropElementId !== 'undefined') {\r\n        const uploadDropElement = document.getElementById(this.config.core.uploadDropElementId);\r\n        if (uploadDropElement) {\r\n          this.datatransferFacade.assignUploadDrop(uploadDropElement);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { LoggerService } from '../../services/logger.service';\r\nimport { DatatransferStore } from '../../stores/datatransfer.store';\r\n\r\nexport interface IExporter {\r\n    export(): void;\r\n}\r\n\r\n@Injectable()\r\nexport abstract class BaseExporter implements IExporter {\r\n\r\n    constructor(protected logger: LoggerService, protected store: DatatransferStore) {\r\n\r\n    }\r\n\r\n    public abstract export(): void;\r\n\r\n    protected download(content, fileName, mimeType): void {\r\n        let a = document.createElement('a');\r\n        mimeType = mimeType || 'application/octet-stream';\r\n\r\n        if (navigator.msSaveBlob) { // IE10\r\n            navigator.msSaveBlob(new Blob([content], {\r\n                type: mimeType\r\n            }), fileName);\r\n        } else if (URL && 'download' in a) {\r\n            a.href = URL.createObjectURL(new Blob([content], {\r\n                type: mimeType\r\n            }));\r\n            a.setAttribute('download', fileName);\r\n            document.body.appendChild(a);\r\n            a.click();\r\n            document.body.removeChild(a);\r\n        } else {\r\n            location.href = 'data:application/octet-stream,' + encodeURIComponent(content); // only this mime type is supported\r\n        }\r\n    }\r\n\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { BaseExporter } from \"./base.exporter\";\r\nimport { LoggerService } from \"../../services/logger.service\";\r\nimport { DatatransferStore } from \"../../stores/datatransfer.store\";\r\n\r\n@Injectable()\r\nexport class CsvExporter extends BaseExporter {\r\n  constructor(\r\n    protected logger: LoggerService,\r\n    protected store: DatatransferStore\r\n  ) {\r\n    super(logger, store);\r\n  }\r\n\r\n  public export(): void {\r\n    let csvContent = \"id,name,path,status,size,message\\n\";\r\n    const items = this.store.getItems();\r\n    items.forEach((item, index) => {\r\n      const itemString =\r\n        item.id +\r\n        \",\" +\r\n        item.name +\r\n        \",\" +\r\n        item.path +\r\n        \",\" +\r\n        item.getStatusName() +\r\n        \",\" +\r\n        item.sizeContainer.displaySize +\r\n        \" \" +\r\n        item.sizeContainer.displayUnit +\r\n        \",\" +\r\n        item.message;\r\n\r\n      csvContent += index < items.length ? itemString + \"\\n\" : itemString;\r\n    });\r\n\r\n    this.download(csvContent, \"export.csv\", \"text/csv;encoding:utf-8\");\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { BaseExporter } from \"./base.exporter\";\r\nimport { LoggerService } from \"../../services/logger.service\";\r\nimport { DatatransferStore } from \"../../stores/datatransfer.store\";\r\n\r\n@Injectable()\r\nexport class JsonExporter extends BaseExporter {\r\n  constructor(\r\n    protected logger: LoggerService,\r\n    protected store: DatatransferStore\r\n  ) {\r\n    super(logger, store);\r\n  }\r\n\r\n  public export(): void {\r\n    const content = [];\r\n    const items = this.store.getItems();\r\n    items.forEach((item, index) => {\r\n      content.push({\r\n        id: item.id,\r\n        name: item.name,\r\n        path: item.path,\r\n        status: item.getStatusName(),\r\n        size:\r\n          item.sizeContainer.displaySize + \" \" + item.sizeContainer.displayUnit,\r\n        message: item.message,\r\n      });\r\n    });\r\n\r\n    this.download(\r\n      JSON.stringify(content, null, \"\\t\"),\r\n      \"export.json\",\r\n      \"text/json;encoding:utf-8\"\r\n    );\r\n  }\r\n}\r\n","export enum ExportType {\r\n    CSV,\r\n    JSON\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { CsvExporter } from '../io/exporters/csv.exporter';\r\nimport { JsonExporter } from '../io/exporters/json.exporter';\r\nimport { ExportType } from '../enums/export-type.enum';\r\n\r\n@Injectable()\r\nexport class ExportService {\r\n\r\n    constructor(private csvExporter: CsvExporter, private jsonExporter: JsonExporter) {\r\n\r\n    }\r\n\r\n    public export(exportType: string): void {\r\n        let castedExportType: ExportType = ExportType[exportType];\r\n        switch (castedExportType) {\r\n            case ExportType.CSV:\r\n                this.csvExporter.export();\r\n                break;\r\n            case ExportType.JSON:\r\n                this.jsonExporter.export();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n}\r\n","export interface IPreprocessContainer {\r\n    percent: number; // 0-100\r\n    pause(pause: boolean): void;\r\n    isPaused(): boolean;\r\n    cancel(cancel: boolean): void;\r\n    isCancelled(): boolean;\r\n    doWork(): void;\r\n    run(): void;\r\n}\r\n\r\nexport class PreprocessContainer implements IPreprocessContainer {\r\n    public percent: number;\r\n\r\n    private _isPaused: boolean;\r\n    private _isCancelled: boolean;\r\n\r\n    public constructor(init?: Partial<PreprocessContainer>) {\r\n        this.percent = 0;\r\n        this._isPaused = false;\r\n        this._isCancelled = false;\r\n        Object.assign(this, init);\r\n    }\r\n\r\n    public pause(pause: boolean): void {\r\n        this._isPaused = pause;\r\n    }\r\n\r\n    public isPaused(): boolean {\r\n        return this._isPaused;\r\n    }\r\n\r\n    public cancel(cancel: boolean): void {\r\n        this._isCancelled = cancel;\r\n    }\r\n\r\n    public isCancelled(): boolean {\r\n        return this._isCancelled;\r\n    }\r\n\r\n    public doWork(): void {\r\n\r\n    }\r\n\r\n    public run(): void {\r\n        this._isPaused = false;\r\n        this.doWork();\r\n    }\r\n}\r\n","export enum HashType {\r\n    MD5,\r\n    SHA1\r\n}\r\n\r\nexport enum HashTypeImplementation {\r\n    Internal,\r\n    CryptoBrowserify\r\n}\r\n\r\n// tslint:disable-next-line: no-namespace\r\nexport namespace HashTypeExtensions {\r\n    export function toString(hashTypeImplementation: HashTypeImplementation, hashType: HashType): string {\r\n        switch (hashType) {\r\n            case HashType.MD5:\r\n                return 'md5';\r\n            case HashType.SHA1:\r\n                return 'sha1';\r\n            default:\r\n                return 'sha1';\r\n        }\r\n    }\r\n    export function toEnum(hashTypeImplementation: HashTypeImplementation, hashType: string): HashType {\r\n        switch (hashType) {\r\n            case 'md5':\r\n                return HashType.MD5;\r\n            case 'sha1':\r\n                return HashType.SHA1;\r\n            default:\r\n                return HashType.SHA1;\r\n        }\r\n    }\r\n}\r\n","export enum EncodingType {\r\n    Latin1,\r\n    Hex,\r\n    Base64,\r\n    UTF8\r\n}\r\n\r\nexport enum EncodingTypeImplementation {\r\n    Internal,\r\n    CryptoBrowserify\r\n}\r\n\r\n// tslint:disable-next-line: no-namespace\r\nexport namespace EncodingTypeExtensions {\r\n    export function toString(encodingTypeImplementation: EncodingTypeImplementation, encodingType: EncodingType): string {\r\n        switch (encodingType) {\r\n            case EncodingType.Latin1:\r\n                return 'latin1';\r\n            case EncodingType.Hex:\r\n                return 'hex';\r\n            case EncodingType.Base64:\r\n                return 'base64';\r\n            case EncodingType.UTF8:\r\n                return 'utf8';\r\n            default:\r\n                return 'hex';\r\n        }\r\n    }\r\n    export function toEnum(encodingTypeImplementation: EncodingTypeImplementation, encodingType: string): EncodingType {\r\n        switch (encodingType) {\r\n            case 'latin1':\r\n                return EncodingType.Latin1;\r\n            case 'hex':\r\n                return EncodingType.Hex;\r\n            case 'base64':\r\n                return EncodingType.Base64;\r\n            case 'utf8':\r\n                return EncodingType.UTF8;\r\n            default:\r\n                return EncodingType.Hex;\r\n        }\r\n    }\r\n}\r\n","import { IPreprocessContainer, PreprocessContainer } from './preprocess-container.model';\r\nimport { HashType, HashTypeImplementation, HashTypeExtensions } from '../enums/hash-type.enum';\r\nimport { EncodingType, EncodingTypeImplementation, EncodingTypeExtensions } from '../enums/encoding-type.enum';\r\n\r\nexport interface IHashContainer extends IPreprocessContainer {\r\n    file: File;\r\n    hashType: HashType;\r\n    hashTypeString: string;\r\n    encodingType: EncodingType;\r\n    encodingTypeString: string;\r\n    inputEncodingType: EncodingType;\r\n    inputEncodingTypeString: string;\r\n    startDate: Date;\r\n    endDate: Date;\r\n    hash: any;\r\n    hashString: string;\r\n    reader: FileReader;\r\n}\r\n\r\nexport interface IStreamHashContainer extends IHashContainer {\r\n    chunkSize: number;\r\n    offset: number;\r\n}\r\n\r\nexport class HashContainer extends PreprocessContainer implements IHashContainer {\r\n    public file: File;\r\n    public hashType: HashType;\r\n    public hashTypeString: string;\r\n    public encodingType: EncodingType;\r\n    public encodingTypeString: string;\r\n    public inputEncodingType: EncodingType;\r\n    public inputEncodingTypeString: string;\r\n    public startDate: Date;\r\n    public endDate: Date;\r\n    public hash: any;\r\n    public hashString: string;\r\n    public reader: FileReader;\r\n\r\n    public constructor(file: File, hashTypeImplementation: HashTypeImplementation, encodingTypeImplementation: EncodingTypeImplementation,\r\n                       hashType: HashType, encodingType: EncodingType, inputEncodingType: EncodingType) {\r\n        super();\r\n        this.file = file;\r\n        this.hashType = hashType;\r\n        this.hashTypeString = HashTypeExtensions.toString(hashTypeImplementation, hashType);\r\n        this.encodingType = encodingType;\r\n        this.encodingTypeString = EncodingTypeExtensions.toString(encodingTypeImplementation, encodingType);\r\n        this.inputEncodingType = inputEncodingType;\r\n        this.inputEncodingTypeString = EncodingTypeExtensions.toString(encodingTypeImplementation, inputEncodingType);\r\n        this.startDate = new Date();\r\n        this.endDate = new Date();\r\n        this.reader = new FileReader();\r\n    }\r\n}\r\n\r\nexport class StreamHashContainer extends HashContainer implements IStreamHashContainer {\r\n    public chunkSize: number;\r\n    public offset: number;\r\n\r\n    public constructor(file: File, hashTypeImplementation: HashTypeImplementation, encodingTypeImplementation: EncodingTypeImplementation,\r\n                       hashType: HashType, encodingType: EncodingType, inputEncodingType: EncodingType) {\r\n        super(file, hashTypeImplementation, encodingTypeImplementation, hashType, encodingType, inputEncodingType);\r\n        this.chunkSize = 0;\r\n        this.offset = 0;\r\n    }\r\n\r\n    public cancel(cancel: boolean): void {\r\n        super.cancel(cancel);\r\n        this.offset = 0;\r\n    }\r\n}\r\n","import { IDatatransferItem } from '../models/datatransfer-item.model';\r\nimport { ConfigService } from '../services/config.service';\r\nimport { LoggerService } from '../services/logger.service';\r\nimport { GuidUtil } from '../utils/guid.util';\r\nimport { CryptoService } from '../services/crypto.service';\r\nimport { TransferStatus } from '../enums/transfer-status.enum';\r\nimport { TransferType } from '../enums/transfer-type.enum';\r\nimport { IStreamHashContainer, StreamHashContainer } from '../models/hash-container.model';\r\nimport { HashTypeImplementation, HashTypeExtensions } from '../enums/hash-type.enum';\r\nimport { EncodingTypeImplementation, EncodingTypeExtensions } from '../enums/encoding-type.enum';\r\n\r\nexport interface IDatatransfer {\r\n    on(event: string, callback: Function): void;\r\n    isWorking(): boolean;\r\n    startAll(): void;\r\n    pauseAll(): void;\r\n    removeAll(): void;\r\n    addItem(item: IDatatransferItem): void;\r\n    removeItem(item: IDatatransferItem): void;\r\n    retryItem(item: IDatatransferItem): void;\r\n}\r\n\r\nexport abstract class BaseDatatransfer implements IDatatransfer {\r\n\r\n    private events = [];\r\n    protected _isWorking = false;\r\n\r\n    constructor(protected logger: LoggerService,\r\n                protected guidUtil: GuidUtil,\r\n                protected cryptoService: CryptoService) {\r\n    }\r\n\r\n    public on(event: string, callback: Function): void {\r\n        this.events.push(event.toLowerCase(), callback);\r\n    }\r\n\r\n    protected fire(...args: any[]): void {\r\n        const event = args[0].toLowerCase();\r\n        // Find event listeners, and support pseudo-event `catchAll`\r\n        for (let i = 0; i <= this.events.length; i += 2) {\r\n            if (this.events[i] === event) {\r\n                this.events[i + 1].apply(this, args.slice(1));\r\n            }\r\n            if (this.events[i] === 'catchall') {\r\n                this.events[i + 1].apply(null, args);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected updateZone(): void {\r\n        this.fire('zoneUpdated');\r\n    }\r\n\r\n    protected changeItemStatus(item: IDatatransferItem, status: TransferStatus, message?: string) {\r\n        this.fire('itemStatusChanged', item, status, message);\r\n    }\r\n\r\n    protected updateItemProgress(item: IDatatransferItem, progress: number): void {\r\n        this.fire('itemProgressUpdated', item, progress);\r\n    }\r\n\r\n    protected updateOverallProgress(transferType: TransferType, progress: number): void {\r\n        this.fire('overallProgressUpdated', transferType, progress);\r\n    }\r\n\r\n    protected updateOverallSize(size: number): void {\r\n        this.fire('overallSizeUpdated', size);\r\n    }\r\n\r\n    public isWorking(): boolean {\r\n        return this._isWorking;\r\n    }\r\n\r\n    public abstract startAll(): void;\r\n\r\n    public abstract pauseAll(): void;\r\n\r\n    public abstract removeAll(): void;\r\n\r\n    public addItem(item: IDatatransferItem): void {\r\n        this.fire('itemAdded', item);\r\n    }\r\n\r\n    public abstract removeItem(item: IDatatransferItem): void;\r\n\r\n    public abstract retryItem(item: IDatatransferItem): void;\r\n\r\n    protected generateUniqueIdentifier(): string {\r\n        return this.guidUtil.createGuid();\r\n    }\r\n\r\n    protected preprocessHash(item: IDatatransferItem, file: File, continueCallback: Function, cancelCallback: Function): void {\r\n        const successCallback = function(container: IStreamHashContainer) {\r\n            const that = this as BaseDatatransfer;\r\n            if (container.hashString) {\r\n                // const seconds = (container.endDate.getTime() - container.startDate.getTime()) / 1000;\r\n                // console.log('file hashing took ' + seconds + ' seconds');\r\n\r\n                const xhr = new XMLHttpRequest();\r\n\r\n                const responseHandler = function(e) {\r\n                    // ignore response if container has been cancelled\r\n                    if (!container.isCancelled()) {\r\n                        if (xhr.status === 200) {\r\n                            item.message = xhr.responseText;\r\n                            cancelCallback();\r\n                        } else {\r\n                            continueCallback();\r\n                        }\r\n                    }\r\n                };\r\n                xhr.addEventListener('load', responseHandler, false);\r\n                xhr.addEventListener('error', responseHandler, false);\r\n                xhr.addEventListener('timeout', responseHandler, false);\r\n\r\n                let params = [];\r\n                params = params.concat(\r\n                    [\r\n                        [ConfigService.settings.core.preprocessHashParameterName, container.hashString],\r\n                        [ConfigService.settings.core.preprocessHashFileNameParameterName, item.name]\r\n                    ]\r\n                        .map(function(pair) {\r\n                            return [\r\n                                pair[0], encodeURIComponent(pair[1])\r\n                            ].join('=');\r\n                        })\r\n                );\r\n\r\n                xhr.open(ConfigService.settings.core.preprocessHashMethod, ConfigService.settings.core.getTarget('preprocessHash', params));\r\n                xhr.send(null);\r\n\r\n            } else {\r\n                continueCallback();\r\n            }\r\n        }.bind(this);\r\n        const errorCallback = function(event: any, container: IStreamHashContainer) {\r\n            console.log(event);\r\n            continueCallback();\r\n        };\r\n\r\n        if (!item.preprocessContainer.isCancelled() && item.preprocessContainer instanceof StreamHashContainer) {\r\n            // continue\r\n        } else {\r\n            const hashType = HashTypeExtensions.toEnum(\r\n                HashTypeImplementation.Internal, ConfigService.settings.core.preprocessHashFunctionName);\r\n            const encodingType = EncodingTypeExtensions.toEnum(\r\n                EncodingTypeImplementation.Internal, ConfigService.settings.core.preprocessHashEncodingName);\r\n            const inputEncodingType = EncodingTypeExtensions.toEnum(\r\n                EncodingTypeImplementation.Internal, ConfigService.settings.core.preprocessHashInputEncodingName);\r\n\r\n            item.preprocessContainer = this.cryptoService.createStreamHashContainer(\r\n                file, hashType, encodingType, inputEncodingType, successCallback, errorCallback);\r\n        }\r\n\r\n        // wait for the initial mat-progress-spinner animation to complete\r\n        setTimeout(function() {\r\n            item.preprocessContainer.run();\r\n        }, 1000);\r\n    }\r\n}\r\n","import { IDatatransfer, BaseDatatransfer } from '../datatransfer.io';\r\nimport { IDatatransferItem } from '../../models/datatransfer-item.model';\r\nimport { TransferType } from '../../enums/transfer-type.enum';\r\nimport { LoggerService } from '../../services/logger.service';\r\nimport { GuidUtil } from '../../utils/guid.util';\r\nimport { CryptoService } from '../../services/crypto.service';\r\n\r\nexport interface IUploader extends IDatatransfer {\r\n    assignBrowse(element: any, isDirectory: any): void;\r\n    assignDrop(element: any): void;\r\n    editPath(oldPath: string, newPath: string): void;\r\n    editFilename(item: IDatatransferItem, name: string): void;\r\n}\r\n\r\nexport abstract class BaseUploader extends BaseDatatransfer {\r\n\r\n    private filenameRegExp = new RegExp('[\\/\\\\\\\\*?\"<>:|]');\r\n    private pathRegExp = new RegExp('[*?\"<>:|]');\r\n    protected transferType = TransferType.Upload;\r\n\r\n    constructor(protected logger: LoggerService,\r\n                protected guidUtil: GuidUtil,\r\n                protected cryptoService: CryptoService) {\r\n        super(logger, guidUtil, cryptoService);\r\n    }\r\n\r\n    public abstract assignBrowse(element: any, isDirectory: any): void;\r\n\r\n    public abstract assignDrop(element: any): void;\r\n\r\n    public editPath(oldPath: string, newPath: string): void {\r\n        if (this.pathRegExp.test(newPath)) {\r\n            throw new Error('A path cannot contain any of the following characters: * ? \" < > : |');\r\n        }\r\n    }\r\n\r\n    public editFilename(item: IDatatransferItem, name: string): void {\r\n        if (!item) {\r\n            throw new Error('Cannot edit the filename.');\r\n        }\r\n        if (!name) {\r\n            throw new Error('Empty filename is not allowed.');\r\n        }\r\n        if (this.filenameRegExp.test(name)) {\r\n            throw new Error('A filename cannot contain any of the following characters: \\\\ / * ? \" < > : |');\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class GuidUtil {\r\n    public createGuid(): string {\r\n        function s4() {\r\n            return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\r\n        }\r\n        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\r\n    }\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\nimport * as cryptoBrowserify from 'crypto-browserify';\r\nimport { HashTypeImplementation, HashType } from '../enums/hash-type.enum';\r\nimport { EncodingTypeImplementation, EncodingType } from '../enums/encoding-type.enum';\r\nimport { IHashContainer, HashContainer, IStreamHashContainer, StreamHashContainer } from '../models/hash-container.model';\r\nimport { FileReaderEvent } from '../extensions/file-reader.extension';\r\n\r\n@Injectable()\r\nexport class CryptoService {\r\n\r\n    // hash 4MB at a time\r\n    private readonly STREAM_HASH_CHUNK_SIZE = 1024 * 1000 * 4;\r\n    private readonly HASH_TYPE_IMPLEMENTATION = HashTypeImplementation.CryptoBrowserify;\r\n    private readonly ENCODING_TYPE_IMPLEMENTATION = EncodingTypeImplementation.CryptoBrowserify;\r\n\r\n    constructor(private zone: NgZone) {\r\n        // Performance remains unchanged by running the hash function outside of Angular.\r\n        // this.zone.runOutsideAngular(() => { }\r\n    }\r\n\r\n    public createHashContainer(file: File, hashType: HashType, encodingType: EncodingType,\r\n                               inputEncodingType: EncodingType): IHashContainer {\r\n\r\n        const container = new HashContainer(\r\n            file,\r\n            this.HASH_TYPE_IMPLEMENTATION,\r\n            this.ENCODING_TYPE_IMPLEMENTATION,\r\n            hashType,\r\n            encodingType,\r\n            inputEncodingType);\r\n\r\n        container.hash = cryptoBrowserify.createHash(container.hashTypeString);\r\n\r\n        container.reader.onload = function(event: FileReaderEvent) {\r\n            container.hashString = container.hash.update(event.target.result, container.inputEncodingTypeString)\r\n                .digest(container.encodingTypeString);\r\n            container.endDate = new Date();\r\n            container.percent = 100;\r\n        }.bind(container);\r\n\r\n        container.doWork = function() {\r\n            container.reader.readAsBinaryString(container.file);\r\n        };\r\n\r\n        return container;\r\n    }\r\n\r\n    public createStreamHashContainer(file: File, hashType: HashType, encodingType: EncodingType, inputEncodingType: EncodingType,\r\n                                     successCallback: Function, errorCallback: Function): IStreamHashContainer {\r\n\r\n        const container = new StreamHashContainer(\r\n            file,\r\n            this.HASH_TYPE_IMPLEMENTATION,\r\n            this.ENCODING_TYPE_IMPLEMENTATION,\r\n            hashType,\r\n            encodingType,\r\n            inputEncodingType);\r\n\r\n        container.chunkSize = this.STREAM_HASH_CHUNK_SIZE;\r\n        container.offset = 0;\r\n        container.hash = cryptoBrowserify.createHash(container.hashTypeString);\r\n\r\n        container.reader.onload = function(event: FileReaderEvent) {\r\n            const binary = event.target.result;\r\n\r\n            if (container.offset + container.chunkSize >= container.file.size) {\r\n                container.hash.end(binary, container.inputEncodingTypeString);\r\n            } else {\r\n                container.hash.write(binary, container.inputEncodingTypeString);\r\n            }\r\n\r\n            container.offset += container.chunkSize;\r\n\r\n            container.doWork();\r\n        }.bind(container);\r\n\r\n        container.reader.onerror = function(event) {\r\n            errorCallback(event, container);\r\n        };\r\n\r\n        container.doWork = function() {\r\n            if (!container.isCancelled() && !container.isPaused()) {\r\n                if (container.offset > container.file.size) {\r\n                    container.hashString = container.hash.read().toString(container.encodingTypeString);\r\n                    container.endDate = new Date();\r\n                    container.percent = 100;\r\n                    successCallback(container);\r\n                    return;\r\n                }\r\n\r\n                const slice = container.file.slice(container.offset, container.offset + container.chunkSize);\r\n                container.reader.readAsBinaryString(slice);\r\n                container.percent = Math.round(container.offset / file.size * 100);\r\n            }\r\n        };\r\n\r\n        return container;\r\n    }\r\n\r\n}\r\n","import { ISizeContainer, SizeContainer } from './size-container.model';\r\nimport { TransferType } from '../enums/transfer-type.enum';\r\nimport { TransferStatus } from '../enums/transfer-status.enum';\r\nimport { IPreprocessContainer, PreprocessContainer } from './preprocess-container.model';\r\nimport { IProgressContainer, ProgressContainer } from './progress-container.model';\r\n\r\nexport interface IDatatransferItem {\r\n  id: string;\r\n  name: string;\r\n  path: string;\r\n  displayPath: string;\r\n  sizeContainer: ISizeContainer;\r\n  transferType: TransferType;\r\n  status: TransferStatus;\r\n  preprocessContainer: IPreprocessContainer;\r\n  progressContainer: IProgressContainer;\r\n  message?: string;\r\n  isSelected?: boolean;\r\n  externalItem?: any;\r\n  getStatusName(): string;\r\n  getTransferTypeName(): string;\r\n}\r\n\r\nexport class DatatransferItem implements IDatatransferItem {\r\n  public id: string;\r\n  public name: string;\r\n  private _path: string;\r\n  get path(): string {\r\n    return this._path;\r\n  }\r\n  set path(newPath: string) {\r\n      this._path = newPath;\r\n      this.displayPath = newPath;\r\n      if (this.displayPath) {\r\n        // remove last character\r\n        if (this.displayPath.endsWith('/')) {\r\n          this.displayPath = this.displayPath.slice(0, -1);\r\n        }\r\n        // replace all '/' with ' > '\r\n        this.displayPath = this.displayPath.replace(/\\//g, ' > ');\r\n      }\r\n  }\r\n  public displayPath: string;\r\n  public sizeContainer: ISizeContainer;\r\n  public transferType: TransferType;\r\n  public status: TransferStatus;\r\n  public preprocessContainer: IPreprocessContainer;\r\n  public progressContainer: IProgressContainer;\r\n  private _message; string;\r\n  get message(): string {\r\n    return this._message;\r\n  }\r\n  set message(newMessage: string) {\r\n    this._message = newMessage.toLowerCase().startsWith('<!doctype html') ? undefined : newMessage;\r\n  }\r\n  public isSelected?: boolean;\r\n  public externalItem?: any;\r\n\r\n  public constructor(init?: Partial<DatatransferItem>) {\r\n    this.sizeContainer = new SizeContainer();\r\n    this.preprocessContainer = new PreprocessContainer();\r\n    this.progressContainer = new ProgressContainer(0);\r\n    Object.assign(this, init);\r\n  }\r\n\r\n  public getStatusName(): string {\r\n    return TransferStatus[this.status];\r\n  }\r\n\r\n  public getTransferTypeName(): string {\r\n    return TransferType[this.transferType];\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport * as Resumable from 'resumablejs';\r\nimport { BaseUploader } from './base.uploader';\r\nimport { ConfigService } from '../../services/config.service';\r\nimport { LoggerService } from '../../services/logger.service';\r\nimport { GuidUtil } from '../../utils/guid.util';\r\nimport { CryptoService } from '../../services/crypto.service';\r\nimport { TransferStatus } from '../../enums/transfer-status.enum';\r\nimport { DatatransferItem, IDatatransferItem } from '../../models/datatransfer-item.model';\r\nimport { SizeContainer } from '../../models/size-container.model';\r\nimport { DecimalByteUnit } from '../../enums/decimal-byte-unit.enum';\r\nimport { ProgressContainer } from '../../models/progress-container.model';\r\nimport { TransferType } from '../../enums/transfer-type.enum';\r\n\r\n@Injectable()\r\nexport class ResumableJsUploader extends BaseUploader {\r\n\r\n    private r: Resumable.Resumable = undefined;\r\n    private preprocessFileFn = undefined;\r\n    private preprocessChunkFn = undefined;\r\n\r\n    constructor(protected logger: LoggerService,\r\n                protected guidUtil: GuidUtil,\r\n                protected cryptoService: CryptoService) {\r\n        super(logger, guidUtil, cryptoService);\r\n        this.initResumable();\r\n    }\r\n\r\n    private initResumable(): void {\r\n        function generateId(file, event) {\r\n            const that = this as ResumableJsUploader;\r\n            return that.generateUniqueIdentifier();\r\n        }\r\n\r\n        function preprocessChunkInlineFn(resumableChunk) {\r\n            const that = this as ResumableJsUploader;\r\n            if (typeof that.preprocessChunkFn === 'function') {\r\n                that.preprocessChunkFn(resumableChunk);\r\n            } else {\r\n                resumableChunk.preprocessFinished();\r\n            }\r\n        }\r\n\r\n        function preprocessFileInlineFn(resumableFile) {\r\n            const that = this as ResumableJsUploader;\r\n            if (typeof that.preprocessFileFn === 'function') {\r\n                that.changeItemStatus(resumableFile.internalItem, TransferStatus.Preprocessing);\r\n                that.preprocessFileFn(resumableFile);\r\n            } else {\r\n                if (ConfigService.settings.core.preprocessHashEnabled && ConfigService.settings.core.preprocessHashChecked) {\r\n                    that.changeItemStatus(resumableFile.internalItem, TransferStatus.Preprocessing);\r\n                    const continueCallback = function() {\r\n                        resumableFile.preprocessFinished();\r\n                    };\r\n                    const cancelCallback = function() {\r\n                        resumableFile.cancel();\r\n                        that.changeItemStatus(resumableFile.internalItem, TransferStatus.Finished, resumableFile.internalItem.message);\r\n                        that.r.uploadNextChunk();\r\n                    };\r\n                    that.preprocessHash(resumableFile.internalItem, resumableFile.file, continueCallback, cancelCallback);\r\n                } else {\r\n                    resumableFile.preprocessFinished();\r\n                }\r\n            }\r\n        }\r\n\r\n        ConfigService.settings.resumablejs.generateUniqueIdentifier = generateId.bind(this);\r\n\r\n        if (typeof ConfigService.settings.resumablejs.preprocess === 'function') {\r\n            // clones the function with '{}' acting as it's new 'this' parameter\r\n            this.preprocessChunkFn = ConfigService.settings.resumablejs.preprocess.bind({});\r\n        }\r\n        ConfigService.settings.resumablejs.preprocess = preprocessChunkInlineFn.bind(this);\r\n\r\n        if (typeof ConfigService.settings.resumablejs.preprocessFile === 'function') {\r\n            // clones the function with '{}' acting as it's new 'this' parameter\r\n            this.preprocessFileFn = ConfigService.settings.resumablejs.preprocessFile.bind({});\r\n        }\r\n        ConfigService.settings.resumablejs.preprocessFile = preprocessFileInlineFn.bind(this);\r\n\r\n        // @ts-ignore: ignore type checking\r\n        this.r = new Resumable(ConfigService.settings.resumablejs);\r\n\r\n        this.r.on('fileAdded', function(file, event) {\r\n            const that = this as ResumableJsUploader;\r\n            // that.logger.log('fileAdded', file);\r\n            const newItem = new DatatransferItem({\r\n                id: file.uniqueIdentifier,\r\n                name: file.fileName,\r\n                path: file.relativePath.substr(0, file.relativePath.length - file.fileName.length),\r\n                sizeContainer: new SizeContainer({ decimalByteUnit: DecimalByteUnit.Byte, decimalByteUnitSize: file.size }),\r\n                progressContainer: new ProgressContainer(file.size),\r\n                transferType: TransferType.Upload,\r\n                status: TransferStatus.Ready,\r\n                externalItem: file\r\n            });\r\n            file.internalItem = newItem;\r\n            that.addItem(newItem);\r\n        }.bind(this));\r\n        this.r.on('fileProgress', function(file, message) {\r\n            const that = this as ResumableJsUploader;\r\n            // that.logger.log('fileProgress', file.progress());\r\n            that.changeItemStatus(file.internalItem, TransferStatus.Uploading);\r\n            that.updateItemProgress(file.internalItem, file.progress());\r\n            that.updateOverallProgress(that.transferType, that.r.progress());\r\n        }.bind(this));\r\n        this.r.on('fileSuccess', function(file, message) {\r\n            const that = this as ResumableJsUploader;\r\n            // that.logger.log('fileSuccess', file);\r\n            that.changeItemStatus(file.internalItem, TransferStatus.Finished, message);\r\n        }.bind(this));\r\n        this.r.on('fileError', function(file, message) {\r\n            const that = this as ResumableJsUploader;\r\n            // that.logger.log('fileError', file, message);\r\n            that.changeItemStatus(file.internalItem, TransferStatus.Failed, message);\r\n        }.bind(this));\r\n        this.r.on('uploadStart', function() {\r\n            const that = this as ResumableJsUploader;\r\n            // that.logger.log('uploadStart', that.r);\r\n            that._isWorking = true;\r\n            that.updateZone();\r\n            that.updateOverallProgress(that.transferType, that.r.progress());\r\n            that.updateOverallSize(that.r.getSize());\r\n        }.bind(this));\r\n        this.r.on('chunkingComplete', function() {\r\n            const that = this as ResumableJsUploader;\r\n            // that.logger.log('chunkingComplete');\r\n        }.bind(this));\r\n        this.r.on('pause', function() {\r\n            const that = this as ResumableJsUploader;\r\n            // that.logger.log('pause');\r\n            that._isWorking = false;\r\n            that.updateZone();\r\n        }.bind(this));\r\n        this.r.on('cancel', function() {\r\n            const that = this as ResumableJsUploader;\r\n            // that.logger.log('cancel');\r\n            that._isWorking = false;\r\n            that.updateZone();\r\n        }.bind(this));\r\n        this.r.on('complete', function() {\r\n            const that = this as ResumableJsUploader;\r\n            // that.logger.log('complete', that.r);\r\n            that._isWorking = false;\r\n            that.updateZone();\r\n        }.bind(this));\r\n    }\r\n\r\n    public assignBrowse(element, isDirectory): void {\r\n        this.r.assignBrowse(element, isDirectory);\r\n    }\r\n\r\n    public assignDrop(element): void {\r\n        this.r.assignDrop(element);\r\n    }\r\n\r\n    public editPath(oldPath: string, newPath: string): void {\r\n        super.editPath(oldPath, newPath);\r\n        this.r.files.forEach((file: any, index) => {\r\n            const internalItem = file.internalItem as IDatatransferItem;\r\n            if (internalItem.status === TransferStatus.Ready && internalItem.path === oldPath) {\r\n                file.relativePath = newPath + file.fileName;\r\n                internalItem.path = newPath;\r\n            }\r\n        });\r\n    }\r\n\r\n    public editFilename(item: IDatatransferItem, name: string): void {\r\n        super.editFilename(item, name);\r\n        item.externalItem.fileName = name;\r\n        item.externalItem.relativePath = item.path + name;\r\n        item.name = name;\r\n    }\r\n\r\n    public startAll(): void {\r\n        this.r.upload();\r\n    }\r\n\r\n    public pauseAll(): void {\r\n        // reset preprocessState\r\n        this.r.files.forEach((file: any, index) => {\r\n            if (file.preprocessState === 1) {\r\n                file.preprocessState = 0;\r\n            }\r\n        });\r\n        this.r.pause();\r\n    }\r\n\r\n    public removeAll(): void {\r\n        const tempFiles = this.r.files.slice();\r\n        tempFiles.forEach((file: any, index) => {\r\n            const that = this as ResumableJsUploader;\r\n            that.r.removeFile(file);\r\n        });\r\n        this._isWorking = false;\r\n    }\r\n\r\n    public removeItem(item: IDatatransferItem): void {\r\n        this.r.removeFile(item.externalItem);\r\n        if (this.r.files.length <= 0) {\r\n            this._isWorking = false;\r\n        }\r\n    }\r\n\r\n    public retryItem(item: IDatatransferItem): void {\r\n        item.externalItem.retry();\r\n    }\r\n}\r\n","import { IDatatransfer, BaseDatatransfer } from '../datatransfer.io';\r\nimport { TransferType } from '../../enums/transfer-type.enum';\r\nimport { LoggerService } from '../../services/logger.service';\r\nimport { GuidUtil } from '../../utils/guid.util';\r\nimport { CryptoService } from '../../services/crypto.service';\r\n\r\nexport interface IDownloader extends IDatatransfer {\r\n    download(filename: string, url: string, sizeInBytes: number): void;\r\n}\r\n\r\nexport abstract class BaseDownloader extends BaseDatatransfer implements IDownloader {\r\n\r\n    protected transferType = TransferType.Download;\r\n\r\n    constructor(protected logger: LoggerService,\r\n                protected guidUtil: GuidUtil,\r\n                protected cryptoService: CryptoService) {\r\n        super(logger, guidUtil, cryptoService);\r\n    }\r\n\r\n    public abstract download(filename: string, url: string, sizeInBytes: number): void;\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class CommonUtil {\r\n    public each(o: any, callback: Function): void {\r\n        if (typeof (o.length) !== 'undefined') {\r\n            for (let i = 0; i < o.length; i++) {\r\n                // Array or FileList\r\n                if (callback(o[i]) === false) {\r\n                    return;\r\n                }\r\n            }\r\n        } else {\r\n            for (let i in o) {\r\n                // Object\r\n                if (callback(i, o[i]) === false) {\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { BaseDownloader } from \"./base.downloader\";\r\nimport {\r\n  IDatatransferItem,\r\n  DatatransferItem,\r\n} from \"../../models/datatransfer-item.model\";\r\nimport { ConfigService } from \"../../services/config.service\";\r\nimport { LoggerService } from \"../../services/logger.service\";\r\nimport { GuidUtil } from \"../../utils/guid.util\";\r\nimport { CryptoService } from \"../../services/crypto.service\";\r\nimport { CommonUtil } from \"../../utils/common.util\";\r\nimport { TransferStatus } from \"../../enums/transfer-status.enum\";\r\nimport { SizeContainer } from \"../../models/size-container.model\";\r\nimport { DecimalByteUnit } from \"../../enums/decimal-byte-unit.enum\";\r\nimport { ProgressContainer } from \"../../models/progress-container.model\";\r\nimport { TransferType } from \"../../enums/transfer-type.enum\";\r\n\r\n@Injectable()\r\nexport class BlobDownloader extends BaseDownloader {\r\n  private throttleProgressCallbacks = 0.1;\r\n  private files: IDatatransferItem[] = [];\r\n  private queue: IDatatransferItem[] = [];\r\n  private downloading: IDatatransferItem[] = [];\r\n\r\n  constructor(\r\n    protected logger: LoggerService,\r\n    protected guidUtil: GuidUtil,\r\n    protected cryptoService: CryptoService,\r\n    private commonUtil: CommonUtil\r\n  ) {\r\n    super(logger, guidUtil, cryptoService);\r\n  }\r\n\r\n  public startAll(): void {\r\n    if (!this.isWorking()) {\r\n      for (\r\n        let index = 0;\r\n        index < ConfigService.settings.core.simultaneousDownloads;\r\n        index++\r\n      ) {\r\n        this.downloadNext();\r\n      }\r\n    }\r\n  }\r\n\r\n  public pauseAll(): void {}\r\n\r\n  public removeAll(): void {\r\n    this.files.forEach((item, index) => {\r\n      const that = this as BlobDownloader;\r\n      that.abortDownload(item);\r\n    });\r\n    this.files.length = 0;\r\n    this.queue.length = 0;\r\n    this.downloading.length = 0;\r\n    this._isWorking = false;\r\n    this.updateOverallSize(this.getSize());\r\n    this.updateOverallProgress(this.transferType, this.getProgress());\r\n  }\r\n\r\n  public removeItem(item: IDatatransferItem): void {\r\n    this.abortDownload(item);\r\n    this.removeItemFromArray(item, this.files);\r\n    this.removeItemFromArray(item, this.queue);\r\n    this.removeItemFromArray(item, this.downloading);\r\n    this.downloadNext();\r\n  }\r\n\r\n  private removeItemFromArray(\r\n    item: IDatatransferItem,\r\n    array: IDatatransferItem[]\r\n  ): void {\r\n    for (let i = array.length - 1; i >= 0; i--) {\r\n      if (array[i] === item) {\r\n        array.splice(i, 1);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  public retryItem(item: IDatatransferItem): void {\r\n    this.abortDownload(item);\r\n    this.removeItemFromArray(item, this.queue);\r\n    this.removeItemFromArray(item, this.downloading);\r\n    this._isWorking = this.downloading.length > 0;\r\n    item.externalItem.progress = 0;\r\n    this.updateItemProgress(item, item.externalItem.progress);\r\n    this.changeItemStatus(item, TransferStatus.Queued);\r\n    this.queue.push(item);\r\n    this.initDownload(item);\r\n    this.downloadNext();\r\n  }\r\n\r\n  public download(filename: string, url: string, sizeInBytes: number): void {\r\n    const newItem = new DatatransferItem({\r\n      id: this.generateUniqueIdentifier(),\r\n      name: filename,\r\n      sizeContainer: new SizeContainer({\r\n        decimalByteUnit: DecimalByteUnit.Byte,\r\n        decimalByteUnitSize: sizeInBytes,\r\n      }),\r\n      progressContainer: new ProgressContainer(sizeInBytes),\r\n      transferType: TransferType.Download,\r\n      status: TransferStatus.Queued,\r\n      externalItem: {\r\n        url,\r\n        progress: 0,\r\n        size: sizeInBytes,\r\n        lastProgressCallback: new Date(),\r\n      },\r\n    });\r\n\r\n    this.addItem(newItem);\r\n    this.files.push(newItem);\r\n    this.queue.push(newItem);\r\n    this.initDownload(newItem);\r\n    this.downloadNext();\r\n  }\r\n\r\n  private initDownload(item: IDatatransferItem): void {\r\n    const xhr = new XMLHttpRequest();\r\n    item.externalItem.xhr = xhr;\r\n\r\n    xhr.open(ConfigService.settings.core.downloadMethod, item.externalItem.url);\r\n    xhr.timeout = ConfigService.settings.core.downloadXhrTimeout;\r\n    xhr.withCredentials = ConfigService.settings.core.downloadWithCredentials;\r\n\r\n    // Add data from header options\r\n    let customHeaders = ConfigService.settings.core.downloadHeaders;\r\n    if (typeof customHeaders === \"function\") {\r\n      customHeaders = customHeaders(item);\r\n    }\r\n    this.commonUtil.each(customHeaders, function (k: string, v: string) {\r\n      xhr.setRequestHeader(k, v);\r\n    });\r\n\r\n    xhr.responseType = \"blob\";\r\n    xhr.onloadstart = function (e) {\r\n      const that = this as BlobDownloader;\r\n      that.changeItemStatus(item, TransferStatus.Downloading);\r\n    }.bind(this);\r\n    xhr.onprogress = function (e) {\r\n      const that = this as BlobDownloader;\r\n      if (\r\n        new Date().getTime() -\r\n          item.externalItem.lastProgressCallback.getTime() >\r\n        that.throttleProgressCallbacks * 1000\r\n      ) {\r\n        item.externalItem.progress = e.loaded / e.total;\r\n        that.updateItemProgress(item, item.externalItem.progress);\r\n        that.updateOverallProgress(that.transferType, that.getProgress());\r\n        item.externalItem.lastProgressCallback = new Date();\r\n      }\r\n    }.bind(this);\r\n    xhr.onloadend = function (e) {\r\n      /*\r\n            Value\tState\tDescription\r\n            0\tUNSENT\tClient has been created. open() not called yet.\r\n            1\tOPENED\topen() has been called.\r\n            2\tHEADERS_RECEIVED\tsend() has been called, and headers and status are available.\r\n            3\tLOADING\tDownloading; responseText holds partial data.\r\n            4\tDONE\tThe operation is complete.\r\n            */\r\n      const that = this as BlobDownloader;\r\n      if (xhr.readyState === 4) {\r\n        item.externalItem.progress = 1;\r\n        that.updateItemProgress(item, item.externalItem.progress);\r\n        if (xhr.status === 200) {\r\n          that.changeItemStatus(item, TransferStatus.Finished);\r\n          if (ConfigService.settings.core.saveDownloadFileAs) {\r\n            ConfigService.settings.core.saveDownloadFileAs(\r\n              xhr.response,\r\n              item.name\r\n            );\r\n          } else {\r\n            saveAs(xhr.response, item.name);\r\n          }\r\n        } else if (xhr.status !== 0) {\r\n          // don't change status for aborted items\r\n          that.changeItemStatus(item, TransferStatus.Failed);\r\n        }\r\n        that.removeItemFromArray(item, that.downloading);\r\n        that.downloadNext();\r\n      }\r\n    }.bind(this);\r\n  }\r\n\r\n  private downloadNext(): void {\r\n    this.updateOverallSize(this.getSize());\r\n    this.updateOverallProgress(this.transferType, this.getProgress());\r\n    if (\r\n      this.downloading.length <\r\n      ConfigService.settings.core.simultaneousDownloads\r\n    ) {\r\n      const item = this.queue.shift();\r\n      if (!!item && !!item.externalItem && !!item.externalItem.xhr) {\r\n        this.changeItemStatus(item, TransferStatus.Downloading);\r\n        this.downloading.push(item);\r\n        this._isWorking = this.downloading.length > 0;\r\n        item.externalItem.xhr.send();\r\n      }\r\n    }\r\n  }\r\n\r\n  private abortDownload(item: IDatatransferItem): void {\r\n    if (!!item && !!item.externalItem && !!item.externalItem.xhr) {\r\n      item.externalItem.xhr.abort();\r\n      item.externalItem.xhr = null;\r\n    }\r\n  }\r\n\r\n  private getSize(): number {\r\n    let totalSize = 0;\r\n    this.files.forEach((file, index) => {\r\n      totalSize += file.externalItem.size;\r\n    });\r\n    return totalSize;\r\n  }\r\n\r\n  private getProgress(): number {\r\n    let totalDone = 0;\r\n    let totalSize = 0;\r\n    this.files.forEach((file, index) => {\r\n      let currentFileProgress = file.externalItem.progress;\r\n      if (file.status === TransferStatus.Failed) {\r\n        currentFileProgress = 1;\r\n      }\r\n      totalDone += currentFileProgress * file.externalItem.size;\r\n      totalSize += file.externalItem.size;\r\n    });\r\n    return totalSize > 0 ? totalDone / totalSize : 0;\r\n  }\r\n}\r\n","import { Injectable, NgZone } from \"@angular/core\";\r\nimport { MatDialog } from \"@angular/material/dialog\";\r\nimport { LoggerService } from \"../services/logger.service\";\r\nimport { DatatransferStore } from \"../stores/datatransfer.store\";\r\nimport { DateUtil } from \"../utils/date.util\";\r\nimport { PaginationService } from \"../services/pagination.service\";\r\nimport { ExportService } from \"../services/export.service\";\r\nimport { DatatransferFacade } from \"../facades/datatransfer.facade\";\r\nimport { ResumableJsUploader } from \"../io/uploaders/resumablejs.uploader\";\r\nimport { BlobDownloader } from \"../io/downloaders/blob.downloader\";\r\n\r\n@Injectable()\r\nexport class DatatransferFacadeFactory {\r\n  private facade1: DatatransferFacade;\r\n\r\n  constructor(\r\n    private logger: LoggerService,\r\n    private zone: NgZone,\r\n    private store: DatatransferStore,\r\n    private dateUtil: DateUtil,\r\n    private paginationService: PaginationService,\r\n    private exportService: ExportService,\r\n    private dialog: MatDialog,\r\n    private resumableUploader: ResumableJsUploader,\r\n    private blobDownloader: BlobDownloader\r\n  ) {}\r\n\r\n  // TODO: pass arguments to define which uploader/downloader implementation should be used\r\n  public createDatatransferFacade(): DatatransferFacade {\r\n    if (!this.facade1) {\r\n      this.facade1 = new DatatransferFacade(\r\n        this.logger,\r\n        this.zone,\r\n        this.store,\r\n        this.dateUtil,\r\n        this.paginationService,\r\n        this.exportService,\r\n        this.resumableUploader,\r\n        this.blobDownloader,\r\n        this.dialog\r\n      );\r\n    }\r\n    return this.facade1;\r\n  }\r\n}\r\n","import { Component, OnInit, ViewChild, ComponentFactoryResolver } from '@angular/core';\r\nimport { CustomEventType, CustomEventTypeExtensions } from './enums/custom-event-type.enum';\r\nimport { HostDirective } from './directives/host.directive';\r\nimport { MainComponent } from './components/main.component';\r\nimport { DatatransferFacade } from './facades/datatransfer.facade';\r\nimport { DatatransferFacadeFactory } from './factories/datatransfer-facade.factory';\r\nimport { ConfigService } from './services/config.service';\r\nimport { PaginationService } from './services/pagination.service';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'angular-material-datatransfer-lib',\r\n  templateUrl: './angular-material-datatransfer.component.html'\r\n})\r\nexport class AngularMaterialDatatransferComponent implements OnInit {\r\n\r\n  @ViewChild(HostDirective, { static: true }) amdHost: HostDirective;\r\n\r\n  private datatransferFacade: DatatransferFacade;\r\n\r\n  constructor(private componentFactoryResolver: ComponentFactoryResolver,\r\n              private datatransferFacadeFactory: DatatransferFacadeFactory,\r\n              private configService: ConfigService,\r\n              private paginationService: PaginationService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    document.dispatchEvent(new Event(CustomEventTypeExtensions.toString(CustomEventType.INIT)));\r\n  }\r\n\r\n  public create(config: any): void {\r\n    this.setConfig(config);\r\n  }\r\n\r\n  public setConfig(config: any): void {\r\n    this.configService.load(config);\r\n    this.paginationService.setRppOptions(ConfigService.settings.core.paginationRppOptions);\r\n    this.datatransferFacade = this.datatransferFacadeFactory.createDatatransferFacade();\r\n\r\n    const viewContainerRef = this.amdHost.viewContainerRef;\r\n    viewContainerRef.clear();\r\n\r\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(MainComponent);\r\n    const componentRef = viewContainerRef.createComponent(componentFactory);\r\n    const componentRefInstance = componentRef.instance as MainComponent;\r\n    componentRefInstance.datatransferFacade = this.datatransferFacade;\r\n  }\r\n\r\n  public download(filename: string, url: string, size: number): void {\r\n    this.datatransferFacade.download(filename, url, size);\r\n  }\r\n}\r\n","<div class=\"angular-material-datatransfer\">\r\n    <ng-template amd-host></ng-template>\r\n</div>","import { Injectable } from '@angular/core';\r\nimport { IDatatransferItem, DatatransferItem } from '../models/datatransfer-item.model';\r\nimport { SizeContainer } from '../models/size-container.model';\r\nimport { DecimalByteUnit } from '../enums/decimal-byte-unit.enum';\r\nimport { ProgressContainer } from '../models/progress-container.model';\r\nimport { TransferType } from '../enums/transfer-type.enum';\r\nimport { TransferStatus } from '../enums/transfer-status.enum';\r\nimport { PreprocessContainer } from '../models/preprocess-container.model';\r\n\r\n@Injectable()\r\nexport class DemoService {\r\n  title = 'angular-material-datatransfer';\r\n\r\n  testItems: IDatatransferItem[] = [\r\n    new DatatransferItem({\r\n      id: '1',\r\n      name: 'DICOM_patientXY_1.dcm',\r\n      path: '/mnt/sdcard/folder1/a/b/',\r\n      sizeContainer: new SizeContainer({ decimalByteUnit: DecimalByteUnit.MB, decimalByteUnitSize: 15 }),\r\n      progressContainer: new ProgressContainer(15 * 1000 * 1000),\r\n      transferType: TransferType.Upload,\r\n      status: TransferStatus.Uploading\r\n    }),\r\n    new DatatransferItem({\r\n      id: '2',\r\n      name: 'DICOM_patientXY_2.dcm',\r\n      path: '/mnt/sdcard/folder1/a/b/',\r\n      sizeContainer: new SizeContainer({ decimalByteUnit: DecimalByteUnit.MB, decimalByteUnitSize: 17 }),\r\n      transferType: TransferType.Upload,\r\n      status: TransferStatus.Failed\r\n    }),\r\n    new DatatransferItem({\r\n      id: '3',\r\n      name: 'DICOM_patientXY_3.dcm',\r\n      path: '/mnt/sdcard/folder1/a/b/',\r\n      preprocessContainer: new PreprocessContainer({ percent: 30 }),\r\n      sizeContainer: new SizeContainer({ decimalByteUnit: DecimalByteUnit.MB, decimalByteUnitSize: 13 }),\r\n      transferType: TransferType.Upload,\r\n      status: TransferStatus.Preprocessing\r\n    }),\r\n    new DatatransferItem({\r\n      id: '4',\r\n      name: 'DICOM_patientXY_4.dcm',\r\n      path: '/mnt/sdcard/folder1/a/b/',\r\n      sizeContainer: new SizeContainer({ decimalByteUnit: DecimalByteUnit.MB, decimalByteUnitSize: 11 }),\r\n      transferType: TransferType.Upload,\r\n      status: TransferStatus.Queued,\r\n    }),\r\n    new DatatransferItem({\r\n      id: '5',\r\n      name: 'SMIR.Thorax.089Y.M.CT.7.000.dcm.zip',\r\n      path: '/',\r\n      sizeContainer: new SizeContainer({ decimalByteUnit: DecimalByteUnit.GB, decimalByteUnitSize: 2 }),\r\n      transferType: TransferType.Download,\r\n      status: TransferStatus.Queued\r\n    }),\r\n    new DatatransferItem({\r\n      id: '6',\r\n      name: 'NIFTI_patientXY.nii',\r\n      path: '/mnt/sdcard/folder2/d/',\r\n      sizeContainer: new SizeContainer({ decimalByteUnit: DecimalByteUnit.GB, decimalByteUnitSize: 12 }),\r\n      transferType: TransferType.Upload,\r\n      status: TransferStatus.Queued,\r\n    })\r\n  ];\r\n}\r\n","import { NgModule, ApplicationRef } from \"@angular/core\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { MatButtonModule } from \"@angular/material/button\";\r\nimport { MatCheckboxModule } from \"@angular/material/checkbox\";\r\nimport { MatDialogModule } from \"@angular/material/dialog\";\r\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\r\nimport { MatIconModule } from \"@angular/material/icon\";\r\nimport { MatInputModule } from \"@angular/material/input\";\r\nimport { MatMenuModule } from \"@angular/material/menu\";\r\nimport { MatProgressBarModule } from \"@angular/material/progress-bar\";\r\nimport { MatProgressSpinnerModule } from \"@angular/material/progress-spinner\";\r\nimport { MatSelectModule } from \"@angular/material/select\";\r\nimport { MatTooltipModule } from \"@angular/material/tooltip\";\r\n\r\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\r\n\r\nimport { AngularMaterialDatatransferComponent } from \"./angular-material-datatransfer.component\";\r\nimport { MainComponent } from \"./components/main.component\";\r\nimport { BrowseDialogComponent } from \"./components/browse-dialog.component\";\r\nimport { DropzoneComponent } from \"./components/dropzone.component\";\r\nimport { EditDialogComponent } from \"./components/edit-dialog.component\";\r\nimport { PaginationComponent } from \"./components/pagination.component\";\r\nimport { ProgressComponent } from \"./components/progress.component\";\r\nimport { ConfigService } from \"./services/config.service\";\r\nimport { LoggerService } from \"./services/logger.service\";\r\nimport { PaginationService } from \"./services/pagination.service\";\r\nimport { ExportService } from \"./services/export.service\";\r\nimport { DemoService } from \"./services/demo.service\";\r\nimport { CryptoService } from \"./services/crypto.service\";\r\nimport { DatatransferStore } from \"./stores/datatransfer.store\";\r\nimport { DatatransferFacadeFactory } from \"./factories/datatransfer-facade.factory\";\r\nimport { CommonUtil } from \"./utils/common.util\";\r\nimport { DateUtil } from \"./utils/date.util\";\r\nimport { DecimalByteUnitUtil } from \"./utils/decimal-byte-unit.util\";\r\nimport { GuidUtil } from \"./utils/guid.util\";\r\nimport { CsvExporter } from \"./io/exporters/csv.exporter\";\r\nimport { JsonExporter } from \"./io/exporters/json.exporter\";\r\nimport { ResumableJsUploader } from \"./io/uploaders/resumablejs.uploader\";\r\nimport { BlobDownloader } from \"./io/downloaders/blob.downloader\";\r\nimport { HostDirective } from \"./directives/host.directive\";\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AngularMaterialDatatransferComponent,\r\n    MainComponent,\r\n    BrowseDialogComponent,\r\n    DropzoneComponent,\r\n    EditDialogComponent,\r\n    PaginationComponent,\r\n    ProgressComponent,\r\n    HostDirective,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatButtonModule,\r\n    MatCheckboxModule,\r\n    MatDialogModule,\r\n    MatFormFieldModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatMenuModule,\r\n    MatProgressBarModule,\r\n    MatProgressSpinnerModule,\r\n    MatSelectModule,\r\n    MatTooltipModule,\r\n    FlexLayoutModule,\r\n  ],\r\n  exports: [AngularMaterialDatatransferComponent],\r\n  entryComponents: [MainComponent, BrowseDialogComponent, EditDialogComponent],\r\n  providers: [\r\n    ConfigService,\r\n    LoggerService,\r\n    PaginationService,\r\n    ExportService,\r\n    DemoService,\r\n    CryptoService,\r\n    DatatransferStore,\r\n    DatatransferFacadeFactory,\r\n    CommonUtil,\r\n    DateUtil,\r\n    DecimalByteUnitUtil,\r\n    GuidUtil,\r\n    CsvExporter,\r\n    JsonExporter,\r\n    ResumableJsUploader,\r\n    BlobDownloader,\r\n  ],\r\n})\r\nexport class AngularMaterialDatatransferModule {\r\n  constructor(public appRef: ApplicationRef) {}\r\n}\r\n","/*\r\n * Public API Surface of angular-material-datatransfer\r\n */\r\n\r\nexport * from \"./lib/angular-material-datatransfer.component\";\r\nexport * from \"./lib/angular-material-datatransfer.module\";\r\nexport * from \"./lib/stores/datatransfer.store\";\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵlistener","i0.ɵɵadvance","i0.ɵɵtextInterpolate1","i0.ɵɵtemplate","i0.ɵɵproperty","i0.ɵɵtextInterpolate3","i0.ɵɵelement","i0.ɵɵtextInterpolate","i0.ɵɵpropertyInterpolate1","i0.ɵɵpropertyInterpolate","cryptoBrowserify.createHash"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAY,eAwBX;AAxBD,WAAY,eAAe;IACvB,2DAAO,CAAA;;IAEP,yDAAM,CAAA;;IAEN,uEAAa,CAAA;;IAEb,uEAAa,CAAA;;IAEb,qDAAI,CAAA;;IAEJ,6EAAgB,CAAA;;IAEhB,iFAAkB,CAAA;;IAElB,iEAAU,CAAA;;IAEV,qEAAY,CAAA;;IAEZ,yEAAc,CAAA;;IAEd,wEAAa,CAAA;;IAEb,sEAAY,CAAA;AAChB,CAAC,EAxBW,eAAe,KAAf,eAAe,QAwB1B;AAED;IACiB,yBAAyB,CAsEzC;AAtED,WAAiB,yBAAyB;IACtC,MAAM,oBAAoB,GAAG,6CAA6C,CAAC;IAC3E,MAAM,yBAAyB,GAAG,oBAAoB,GAAG,SAAS,CAAC;IACnE,MAAM,wBAAwB,GAAG,oBAAoB,GAAG,QAAQ,CAAC;IACjE,MAAM,+BAA+B,GAAG,oBAAoB,GAAG,eAAe,CAAC;IAC/E,MAAM,+BAA+B,GAAG,oBAAoB,GAAG,eAAe,CAAC;IAC/E,MAAM,sBAAsB,GAAG,oBAAoB,GAAG,MAAM,CAAC;IAC7D,MAAM,kCAAkC,GAAG,oBAAoB,GAAG,kBAAkB,CAAC;IACrF,MAAM,oCAAoC,GAAG,oBAAoB,GAAG,oBAAoB,CAAC;IACzF,MAAM,4BAA4B,GAAG,oBAAoB,GAAG,YAAY,CAAC;IACzE,MAAM,8BAA8B,GAAG,oBAAoB,GAAG,cAAc,CAAC;IAC7E,MAAM,gCAAgC,GAAG,oBAAoB,GAAG,gBAAgB,CAAC;IACjF,MAAM,+BAA+B,GAAG,oBAAoB,GAAG,eAAe,CAAC;IAC/E,MAAM,8BAA8B,GAAG,oBAAoB,GAAG,cAAc,CAAC;IAC7E,SAAgB,QAAQ,CAAC,IAAqB;QAC1C,QAAQ,IAAI;YACR,KAAK,eAAe,CAAC,MAAM;gBACvB,OAAO,wBAAwB,CAAC;YACpC,KAAK,eAAe,CAAC,aAAa;gBAC9B,OAAO,+BAA+B,CAAC;YAC3C,KAAK,eAAe,CAAC,aAAa;gBAC9B,OAAO,+BAA+B,CAAC;YAC3C,KAAK,eAAe,CAAC,IAAI;gBACrB,OAAO,sBAAsB,CAAC;YAClC,KAAK,eAAe,CAAC,gBAAgB;gBACjC,OAAO,kCAAkC,CAAC;YAC9C,KAAK,eAAe,CAAC,kBAAkB;gBACnC,OAAO,oCAAoC,CAAC;YAChD,KAAK,eAAe,CAAC,UAAU;gBAC3B,OAAO,4BAA4B,CAAC;YACxC,KAAK,eAAe,CAAC,YAAY;gBAC7B,OAAO,8BAA8B,CAAC;YAC1C,KAAK,eAAe,CAAC,cAAc;gBAC/B,OAAO,gCAAgC,CAAC;YAC5C,KAAK,eAAe,CAAC,aAAa;gBAC9B,OAAO,+BAA+B,CAAC;YAC3C,KAAK,eAAe,CAAC,YAAY;gBAC7B,OAAO,8BAA8B,CAAC;YAC1C;gBACI,OAAO,yBAAyB,CAAC;SACxC;KACJ;IA3Be,kCAAQ,WA2BvB,CAAA;IACD,SAAgB,MAAM,CAAC,IAAY;QAC/B,QAAQ,IAAI;YACR,KAAK,wBAAwB;gBACzB,OAAO,eAAe,CAAC,MAAM,CAAC;YAClC,KAAK,+BAA+B;gBAChC,OAAO,eAAe,CAAC,aAAa,CAAC;YACzC,KAAK,+BAA+B;gBAChC,OAAO,eAAe,CAAC,aAAa,CAAC;YACzC,KAAK,sBAAsB;gBACvB,OAAO,eAAe,CAAC,IAAI,CAAC;YAChC,KAAK,kCAAkC;gBACnC,OAAO,eAAe,CAAC,gBAAgB,CAAC;YAC5C,KAAK,oCAAoC;gBACrC,OAAO,eAAe,CAAC,kBAAkB,CAAC;YAC9C,KAAK,4BAA4B;gBAC7B,OAAO,eAAe,CAAC,UAAU,CAAC;YACtC,KAAK,8BAA8B;gBAC/B,OAAO,eAAe,CAAC,YAAY,CAAC;YACxC,KAAK,gCAAgC;gBACjC,OAAO,eAAe,CAAC,cAAc,CAAC;YAC1C,KAAK,+BAA+B;gBAChC,OAAO,eAAe,CAAC,aAAa,CAAC;YACzC,KAAK,8BAA8B;gBAC/B,OAAO,eAAe,CAAC,YAAY,CAAC;YACxC;gBACI,OAAO,eAAe,CAAC,OAAO,CAAC;SACtC;KACJ;IA3Be,gCAAM,SA2BrB,CAAA;AACL,CAAC,EAtEgB,yBAAyB,KAAzB,yBAAyB;;MCrB7B,aAAa;IACtB,YAAmB,gBAAkC;QAAlC,qBAAgB,GAAhB,gBAAgB,CAAkB;KAAK;;0EADjD,aAAa;+CAAb,aAAa;oFAAb,aAAa;cAJzB,SAAS;eAAC;;gBAEP,QAAQ,EAAE,YAAY;aACzB;;;MCLY,aAAa;IAA1B;QACE,uBAAkB,GAAG,IAAI,CAAC;QAC1B,0BAAqB,GAAG,SAAS,CAAC;QAClC,wBAAmB,GAAG,SAAS,CAAC;QAChC,yBAAoB,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QACnC,0BAAqB,GAAG,CAAC,CAAC;QAC1B,mBAAc,GAAG,KAAK,CAAC;QACvB,oBAAe,GAAQ,EAAE,CAAC;QAC1B,4BAAuB,GAAG,KAAK,CAAC;QAChC,uBAAkB,GAAG,CAAC,CAAC;QACvB,0BAAqB,GAAG,KAAK,CAAC;QAC9B,0BAAqB,GAAG,IAAI,CAAC;QAC7B,yBAAoB,GAAG,qBAAqB,CAAC;QAC7C,yBAAoB,GAAG,KAAK,CAAC;QAC7B,gCAA2B,GAAG,MAAM,CAAC;QACrC,wCAAmC,GAAG,UAAU,CAAC;QACjD,+BAA0B,GAAG,MAAM,CAAC;QACpC,+BAA0B,GAAG,KAAK,CAAC;QACnC,oCAA+B,GAAG,QAAQ,CAAC;QAC3C,iCAA4B,GAC1B,qFAAqF,CAAC;QACxF,uBAAkB,GAA0C,IAAI,CAAC;QACjE,yBAAoB,GAAG,UAAU,OAAO;YACtC,OAAO,OAAO,CAAC;SAChB,CAAC;QACF,cAAS,GAAG,UAAU,OAAO,EAAE,MAAM;YACnC,IAAI,MAAM,CAAC;YAEX,IAAI,OAAO,KAAK,gBAAgB,IAAI,IAAI,CAAC,qBAAqB,EAAE;gBAC9D,MAAM,GAAG,IAAI,CAAC,oBAAoB,CAAC;aACpC;YAED,IAAI,OAAO,MAAM,KAAK,UAAU,EAAE;gBAChC,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC;aACvB;YAED,IAAI,MAAM,EAAE;gBACV,MAAM,SAAS,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC;gBACtD,MAAM,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBAEtC,OAAO,MAAM,GAAG,SAAS,GAAG,YAAY,CAAC;aAC1C;iBAAM;gBACL,OAAO;aACR;SACF,CAAC;KACH;CAAA;MAEY,oBAAoB;IAAjC;QACE,cAAS,GAAG,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC;QAC5B,mBAAc,GAAG,KAAK,CAAC;QACvB,wBAAmB,GAAG,CAAC,CAAC;QACxB,sBAAiB,GAAG,MAAM,CAAC;QAC3B,6BAAwB,GAAG,sBAAsB,CAAC;QAClD,2BAAsB,GAAG,oBAAoB,CAAC;QAC9C,kCAA6B,GAAG,2BAA2B,CAAC;QAC5D,2BAAsB,GAAG,oBAAoB,CAAC;QAC9C,sBAAiB,GAAG,eAAe,CAAC;QACpC,4BAAuB,GAAG,qBAAqB,CAAC;QAChD,0BAAqB,GAAG,mBAAmB,CAAC;QAC5C,8BAAyB,GAAG,uBAAuB,CAAC;QACpD,6BAAwB,GAAG,sBAAsB,CAAC;QAClD,8BAAyB,GAAG,GAAG,CAAC;QAChC,UAAK,GAAG,EAAE,CAAC;QACX,YAAO,GAAG,EAAE,CAAC;QACb,eAAU,GAAG,IAAI,CAAC;QAClB,mBAAc,GAAG,IAAI,CAAC;QACtB,WAAM,GAAG,WAAW,CAAC;QACrB,iBAAY,GAAG,MAAM,CAAC;QACtB,eAAU,GAAG,KAAK,CAAC;QAEnB,WAAM,GAAG,qBAAqB,CAAC;QAC/B,eAAU,GAAG,IAAI,CAAC;QAClB,uBAAkB,GAAG,EAAE,CAAC;QACxB,eAAU,GAAG,IAAI,CAAC;QAClB,6BAAwB,GAAG,IAAI,CAAC;QAChC,cAAS,GAAG,IAAI,CAAC;QACjB,oBAAe,GAAG,GAAG,CAAC;QACtB,uBAAkB,GAAG,SAAS,CAAC;QAC/B,oBAAe,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QAC5C,aAAQ,GAAG,SAAS,CAAC;QACrB,oBAAe,GAAG,KAAK,CAAC;QACxB,eAAU,GAAG,CAAC,CAAC;QACf,eAAU,GAAG,IAAI,CAAC;QAClB,gBAAW,GAAG,MAAM,CAAC;QACrB,gBAAW,GAAG,CAAC,CAAC;QAChB,gBAAW,GAAG,SAAS,CAAC;QACxB,aAAQ,GAAG,EAAE,CAAC;QACd,0BAAqB,GAAG,UAAU,KAAK,EAAE,UAAU;YACjD,KAAK,CACH,6BAA6B;gBAC3B,IAAI,CAAC,QAAQ;gBACb,OAAO;iBACN,IAAI,CAAC,QAAQ,KAAK,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC;gBAChC,aAAa,CAChB,CAAC;SACH,CAAC;QACF,6BAAwB,GAAG,UAAU,IAAI,EAAE,UAAU;YACnD,KAAK,CACH,IAAI,CAAC,QAAQ;gBACX,IAAI,CAAC,IAAI;oBACP,iDAAiD;oBACjD,IAAI,CAAC,WAAW;oBAChB,GAAG,CACR,CAAC;SACH,CAAC;QACF,6BAAwB,GAAG,UAAU,IAAI,EAAE,UAAU;YACnD,KAAK,CACH,IAAI,CAAC,QAAQ;gBACX,IAAI,CAAC,IAAI;oBACP,+CAA+C;oBAC/C,IAAI,CAAC,WAAW;oBAChB,GAAG,CACR,CAAC;SACH,CAAC;QACF,0BAAqB,GAAG,UAAU,IAAI,EAAE,UAAU;YAChD,KAAK,CACH,IAAI,CAAC,QAAQ;gBACX,IAAI,CAAC,IAAI;oBACP,qDAAqD;oBACrD,IAAI,CAAC,QAAQ;oBACb,GAAG,CACR,CAAC;SACH,CAAC;KACH;CAAA;MAQY,SAAS;IAAtB;QACE,eAAU,GAAG,IAAI,CAAC;QAClB,SAAI,GAAG,IAAI,aAAa,EAAE,CAAC;QAC3B,gBAAW,GAAG,IAAI,oBAAoB,EAAE,CAAC;KAC1C;;;MCnIY,aAAa;IAItB;KAEC;IAEM,IAAI,CAAC,MAAkB;QAC1B,IAAI,CAAC,CAAC,MAAM,EAAE;YACV,aAAa,CAAC,QAAQ,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;YACtD,IAAI,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE;gBACf,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,YAAY;oBACzC,IAAI,OAAO,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,WAAW,EAAE;wBAClD,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;qBACzE;iBACJ,CAAC,CAAC;aACN;YACD,IAAI,CAAC,CAAC,MAAM,CAAC,WAAW,EAAE;gBACtB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,YAAY;oBAChD,IAAI,OAAO,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,KAAK,WAAW,EAAE;wBACzD,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;qBACvF;iBACJ,CAAC,CAAC;aACN;SACJ;KACJ;;AAxBa,sBAAQ,GAAe,IAAI,SAAS,EAAE,CAAC;0EAF5C,aAAa;kDAAb,aAAa,WAAb,aAAa;oFAAb,aAAa;cADzB,UAAU;;;ACHX,IAAY,cAQX;AARD,WAAY,cAAc;IACtB,qDAAK,CAAA;IACL,uDAAM,CAAA;IACN,qEAAa,CAAA;IACb,6DAAS,CAAA;IACT,iEAAW,CAAA;IACX,2DAAQ,CAAA;IACR,uDAAM,CAAA;AACV,CAAC,EARW,cAAc,KAAd,cAAc;;ACA1B,IAAY,YAGX;AAHD,WAAY,YAAY;IACpB,mDAAM,CAAA;IACN,uDAAQ,CAAA;AACZ,CAAC,EAHW,YAAY,KAAZ,YAAY;;MCSX,qBAAqB;IAGhC,YACS,SAA8C,EACrB,IAAS;QADlC,cAAS,GAAT,SAAS,CAAqC;QACrB,SAAI,GAAJ,IAAI,CAAK;QAEzC,IAAI,CAAC,kBAAkB,GAAuB,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC;KAC5E;IAED,eAAe;QACb,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,CACxC,QAAQ,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAC5C,CAAC;QACF,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,CACxC,QAAQ,CAAC,cAAc,CAAC,mBAAmB,CAAC,EAC5C,IAAI,CACL,CAAC;KACH;IAED,KAAK;QACH,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;KACxB;IAED,SAAS;QACP,IAAI,CAAC,KAAK,EAAE,CAAC;KACd;;0FA1BU,qBAAqB,qDAKtB,eAAe;uDALd,qBAAqB;QCTlCA,uCAAoB;QAAAC,8CAAiC;QAAAC,cAAqB;QAC1EF,uCACI;QAAAA,8BACI;QAD4CG,+FAAS,WAAO,IAAC;QAC7DH,6BAAU;QAAAC,8BAAiB;QAAAC,cAAW;QAACD,mBAAK;QAAAC,cAAS;QACzDF,8BACI;QAD6CG,+FAAS,WAAO,IAAC;QAC9DH,6BAAU;QAAAC,wBAAW;QAAAC,cAAW;QAACD,qBAAM;QAAAC,cAAS;QACxDA,cAAqB;;oFDGR,qBAAqB;cALjC,SAAS;eAAC;;gBAET,QAAQ,EAAE,mBAAmB;gBAC7B,WAAW,EAAE,8BAA8B;aAC5C;;sBAMI,MAAM;uBAAC,eAAe;;;;IENfF,8BACI;IAAAC,SACJ;IAAAC,cAAY;;;IADRE,YACJ;IADIC,iDACJ;;;;IAVZL,wBACI;IAAAA,uCACI;IAAAA,sBAAG;IAAAC,8BAAiB;IAAAC,cAAI;IACxBF,yBACI;IAAAA,mCACI;IAAAA,6BAEJ;IADQG,yNAAwD,SAAS,IAAE;IADvED,cAEJ;IAAAA,cAAiB;IACjBI,mFAEY;IAChBJ,cAAO;IACXA,cAAqB;IACrBF,uCACI;IAAAA,8BAA4D;IAAlCG,4KAAoB;IAAcF,gBAAE;IAAAC,cAAS;IACvEF,+BAA0D;IAAhCG,0KAAiB;IAAeF,oBAAM;IAAAC,cAAS;IAC7EA,cAAqB;IACzBA,cAAM;;;IAZ0DE,YAAkB;IAAlBG,oCAAkB,uCAAA;IAG1DH,YAAkB;IAAlBG,uCAAkB;;;IAkB9BP,8BACI;IAAAC,SACJ;IAAAC,cAAY;;;IADRE,YACJ;IADIC,iDACJ;;;;IAVZL,wBACI;IAAAA,uCACI;IAAAA,sBAAG;IAAAC,kCAAqB;IAAAC,cAAI;IAC5BF,yBACI;IAAAA,mCACI;IAAAA,6BAEJ;IADQG,yNAAwD,SAAS,IAAE;IADvED,cAEJ;IAAAA,cAAiB;IACjBI,mFAEY;IAChBJ,cAAO;IACXA,cAAqB;IACrBF,uCACI;IAAAA,8BAAgE;IAAtCG,kLAAwB;IAAcF,gBAAE;IAAAC,cAAS;IAC3EF,+BAA0D;IAAhCG,4KAAiB;IAAeF,oBAAM;IAAAC,cAAS;IAC7EA,cAAqB;IACzBA,cAAM;;;IAZ0DE,YAAkB;IAAlBG,oCAAkB,uCAAA;IAG1DH,YAAkB;IAAlBG,uCAAkB;;MCf7B,mBAAmB;IAS9B,YACS,SAA4C,EACnB,IAAS;QADlC,cAAS,GAAT,SAAS,CAAmC;QACnB,SAAI,GAAJ,IAAI,CAAK;QAEzC,IAAI,CAAC,kBAAkB,GAAuB,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC;QAC3E,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;QAC3B,IAAI,CAAC,IAAI,GAAsB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;QAC9C,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;QAE/B,IAAI,CAAC,eAAe,GAAG,IAAI,WAAW,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;KAChD;IAED,eAAe,MAAK;IAEpB,KAAK;QACH,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;KACxB;IAED,SAAS;QACP,IAAI,CAAC,KAAK,EAAE,CAAC;KACd;IAED,QAAQ;QACN,IAAI;YACF,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAC9B,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,IAAI,CAAC,IAAI,EACd,IAAI,CAAC,QAAQ,CACd,CAAC;YACF,IAAI,CAAC,KAAK,EAAE,CAAC;SACd;QAAC,OAAO,KAAK,EAAE;YACd,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;SAC3B;KACF;IAED,YAAY;QACV,IAAI;YACF,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC/D,IAAI,CAAC,KAAK,EAAE,CAAC;SACd;QAAC,OAAO,KAAK,EAAE;YACd,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;SAC3B;KACF;;sFApDU,mBAAmB,qDAWpB,eAAe;qDAXd,mBAAmB;QDXhCD,kEAiBM;QACNA,kEAiBM;;QAnCAC,4CAA0B;QAkB1BH,YAA8B;QAA9BG,gDAA8B;;oFCPvB,mBAAmB;cAL/B,SAAS;eAAC;;gBAET,QAAQ,EAAE,iBAAiB;gBAC3B,WAAW,EAAE,4BAA4B;aAC1C;;sBAYI,MAAM;uBAAC,eAAe;;;MCAd,kBAAkB;IAS7B,YACU,MAAqB,EACrB,IAAY,EACZ,KAAwB,EACxB,QAAkB,EAClB,iBAAoC,EACpC,aAA4B,EAC5B,QAAmB,EACnB,UAAuB,EACvB,MAAiB;QARjB,WAAM,GAAN,MAAM,CAAe;QACrB,SAAI,GAAJ,IAAI,CAAQ;QACZ,UAAK,GAAL,KAAK,CAAmB;QACxB,aAAQ,GAAR,QAAQ,CAAU;QAClB,sBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,kBAAa,GAAb,aAAa,CAAe;QAC5B,aAAQ,GAAR,QAAQ,CAAW;QACnB,eAAU,GAAV,UAAU,CAAa;QACvB,WAAM,GAAN,MAAM,CAAW;;QAbnB,qBAAgB,GAAG,GAAG,CAAC;;QAEvB,oBAAe,GAAG,IAAI,CAAC;QAa7B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC;QAChD,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC;QACpD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;QAC9C,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;KACnD;IAEO,IAAI,CACV,YAA2B,EAC3B,iBAAqC;QAErC,YAAY,CAAC,EAAE,CACb,WAAW,EACX,UAAU,IAAuB;YAC/B,MAAM,IAAI,GAAG,IAA0B,CAAC;YACxC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;gBACZ,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;aACpB,CAAC,CAAC;SACJ,CAAC,IAAI,CAAC,IAAI,CAAC,CACb,CAAC;QACF,YAAY,CAAC,EAAE,CACb,aAAa,EACb,UACE,IAAuB,EACvB,MAAsB,EACtB,OAAgB;YAEhB,MAAM,IAAI,GAAG,IAA0B,CAAC;YACxC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;;aAEb,CAAC,CAAC;SACJ,CAAC,IAAI,CAAC,IAAI,CAAC,CACb,CAAC;QACF,YAAY,CAAC,EAAE,CACb,mBAAmB,EACnB,UACE,IAAuB,EACvB,MAAsB,EACtB,OAAgB;YAEhB,MAAM,IAAI,GAAG,IAA0B,CAAC;YACxC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;gBACZ,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;aAC9C,CAAC,CAAC;SACJ,CAAC,IAAI,CAAC,IAAI,CAAC,CACb,CAAC;QACF,YAAY,CAAC,EAAE,CACb,qBAAqB,EACrB,UAAU,IAAuB,EAAE,QAAgB;YACjD,MAAM,IAAI,GAAG,IAA0B,CAAC;YACxC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;gBACZ,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;aACzC,CAAC,CAAC;SACJ,CAAC,IAAI,CAAC,IAAI,CAAC,CACb,CAAC;QACF,YAAY,CAAC,EAAE,CACb,wBAAwB,EACxB,UAAU,YAA0B,EAAE,QAAgB;YACpD,MAAM,IAAI,GAAG,IAA0B,CAAC;YACxC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;gBACZ,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,EAAE,YAAY,EAAE,QAAQ,CAAC,CAAC;aACvE,CAAC,CAAC;SACJ,CAAC,IAAI,CAAC,IAAI,CAAC,CACb,CAAC;QACF,YAAY,CAAC,EAAE,CACb,oBAAoB,EACpB,UAAU,IAAY;YACpB,MAAM,IAAI,GAAG,IAA0B,CAAC;YACxC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;gBACZ,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;aACjD,CAAC,CAAC;SACJ,CAAC,IAAI,CAAC,IAAI,CAAC,CACb,CAAC;KACH;IAEM,kBAAkB,CAAC,OAAO,EAAE,WAAW,GAAG,KAAK;QACpD,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;KAClD;IAEM,gBAAgB,CAAC,OAAO;QAC7B,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;KACnC;IAEM,gBAAgB;QACrB,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,qBAAqB,EAAE;YACxD,IAAI,EAAE;gBACJ,kBAAkB,EAAE,IAAI;aACzB;SACF,CAAC,CAAC;KACJ;IAEM,kBAAkB,CAAC,IAAuB;QAC/C,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,EAAE;YACtD,IAAI,EAAE;gBACJ,kBAAkB,EAAE,IAAI;gBACxB,IAAI,EAAE,WAAW;gBACjB,IAAI;aACL;SACF,CAAC,CAAC;KACJ;IAEM,sBAAsB,CAAC,IAAuB;QACnD,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,EAAE;YACtD,IAAI,EAAE;gBACJ,kBAAkB,EAAE,IAAI;gBACxB,IAAI,EAAE,eAAe;gBACrB,IAAI;aACL;SACF,CAAC,CAAC;KACJ;IAEM,aAAa,CAAC,OAAgB;QACnC,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,KAAK;YACxD,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC;SAC3B,CAAC,CAAC;KACJ;IAEM,QAAQ;QACb,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,KAAK;YACxC,MAAM,IAAI,GAAG,IAA0B,CAAC;YACxC,IACE,IAAI,CAAC,YAAY,KAAK,YAAY,CAAC,MAAM;gBACzC,IAAI,CAAC,MAAM,KAAK,cAAc,CAAC,KAAK,EACpC;gBACA,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,cAAc,CAAC,MAAM,CAAC,CAAC;aACpD;SACF,CAAC,CAAC;QACH,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;KAC1B;IAEM,QAAQ;QACb,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,KAAK;YACxC,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;SACtC,CAAC,CAAC;QACH,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACzB,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;KAC5B;IAEM,SAAS;QACd,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,KAAK;YACxC,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SACvC,CAAC,CAAC;QACH,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC;QAC1B,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC;QAC5B,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;QACnB,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC7B,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACjC,QAAQ,CAAC,aAAa,CACpB,IAAI,WAAW,CACb,yBAAyB,CAAC,QAAQ,CAAC,eAAe,CAAC,aAAa,CAAC,CAClE,CACF,CAAC;KACH;IAEM,QAAQ;QACb,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,KAAK;YAChE,MAAM,IAAI,GAAG,IAA0B,CAAC;YACxC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;SACtB,CAAC,CAAC;KACJ;IAEM,cAAc;QACnB,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE,CAAC;QAC9C,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,KAAK;YACvB,MAAM,IAAI,GAAG,IAA0B,CAAC;YACxC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;SACvB,CAAC,CAAC;KACJ;IAEM,OAAO,CAAC,IAAuB;QACpC,IAAI,CAAC,CAAC,IAAI,EAAE;YACV,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACzB,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAChD,QAAQ,CAAC,aAAa,CACpB,IAAI,WAAW,CACb,yBAAyB,CAAC,QAAQ,CAAC,eAAe,CAAC,UAAU,CAAC,EAC9D,EAAE,MAAM,EAAE,IAAI,EAAE,CACjB,CACF,CAAC;SACH;KACF;IAEM,UAAU,CAAC,IAAuB;QACvC,IAAI,CAAC,CAAC,IAAI,EAAE;YACV,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACtC,QAAQ,IAAI,CAAC,YAAY;gBACvB,KAAK,YAAY,CAAC,MAAM;oBACtB,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;oBAC/B,MAAM;gBACR,KAAK,YAAY,CAAC,QAAQ;oBACxB,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;oBACjC,MAAM;gBACR;oBACE,MAAM;aACT;YACD,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAC/B,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAChD,QAAQ,CAAC,aAAa,CACpB,IAAI,WAAW,CACb,yBAAyB,CAAC,QAAQ,CAAC,eAAe,CAAC,YAAY,CAAC,EAChE,EAAE,MAAM,EAAE,IAAI,EAAE,CACjB,CACF,CAAC;SACH;KACF;IAEM,SAAS,CAAC,IAAuB;QACtC,IAAI,CAAC,CAAC,IAAI,EAAE;YACV,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACtC,QAAQ,IAAI,CAAC,YAAY;gBACvB,KAAK,YAAY,CAAC,MAAM;oBACtB,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;oBAC9B,MAAM;gBACR,KAAK,YAAY,CAAC,QAAQ;oBACxB,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;oBAChC,MAAM;gBACR;oBACE,MAAM;aACT;SACF;KACF;IAEM,SAAS,CAAC,IAAuB;QACvC,QAAQ,CAAC,aAAa,CACpB,IAAI,WAAW,CACb,yBAAyB,CAAC,QAAQ,CAAC,eAAe,CAAC,YAAY,CAAC,EAChE,EAAE,MAAM,EAAE,IAAI,EAAE,CACjB,CACF,CAAC;KACF;IAEM,gBAAgB,CACrB,IAAuB,EACvB,MAAsB,EACtB,OAAgB;QAEhB,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,MAAM,EAAE;YACtB,IAAI,IAAI,CAAC,MAAM,KAAK,MAAM,EAAE;gBAC1B,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBAChD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;gBACrB,IAAI,CAAC,CAAC,OAAO,EAAE;oBACb,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;iBACxB;gBACD,IAAI,CAAC,KAAK,CAAC,iBAAiB,EAAE,CAAC;gBAC/B,IAAI,MAAM,KAAK,cAAc,CAAC,QAAQ,EAAE;oBACtC,QAAQ,CAAC,aAAa,CACpB,IAAI,WAAW,CACb,yBAAyB,CAAC,QAAQ,CAChC,eAAe,CAAC,cAAc,CAC/B,EACD,EAAE,MAAM,EAAE,IAAI,EAAE,CACjB,CACF,CAAC;iBACH;aACF;SACF;KACF;IAEM,kBAAkB,CAAC,IAAuB,EAAE,QAAgB;QACjE,IAAI,CAAC,CAAC,IAAI,EAAE;YACV,MAAM,GAAG,GAAW,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;YACxC,MAAM,MAAM,GAAW,IAAI,CAAC,iBAAiB,CAAC,KAAK,GAAG,QAAQ,CAAC;YAC/D,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;YACxE,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;SAC3E;KACF;IAEM,qBAAqB,CAC1B,iBAAqC,EACrC,YAA0B,EAC1B,QAAgB;QAEhB,MAAM,GAAG,GAAW,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;QACxC,MAAM,MAAM,GAAW,iBAAiB,CAAC,KAAK,GAAG,QAAQ,CAAC;;QAE1D,iBAAiB,CAAC,aAAa,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QACnE,iBAAiB,CAAC,cAAc,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;QACrE,IAAI,iBAAiB,CAAC,KAAK,GAAG,CAAC,IAAI,MAAM,IAAI,iBAAiB,CAAC,KAAK,EAAE;YACpE,QAAQ,YAAY;gBAClB,KAAK,YAAY,CAAC,MAAM;oBACtB,QAAQ,CAAC,aAAa,CACpB,IAAI,WAAW,CACb,yBAAyB,CAAC,QAAQ,CAChC,eAAe,CAAC,gBAAgB,CACjC,CACF,CACF,CAAC;oBACF,MAAM;gBACR,KAAK,YAAY,CAAC,QAAQ;oBACxB,QAAQ,CAAC,aAAa,CACpB,IAAI,WAAW,CACb,yBAAyB,CAAC,QAAQ,CAChC,eAAe,CAAC,kBAAkB,CACnC,CACF,CACF,CAAC;oBACF,MAAM;gBACR;oBACE,MAAM;aACT;SACF;KACF;IAEM,iBAAiB,CACtB,iBAAqC,EACrC,IAAY;QAEZ,iBAAiB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;KAC/B;IAEM,QAAQ,CAAC,QAAgB,EAAE,GAAW,EAAE,WAAmB;QAChE,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE,WAAW,CAAC,CAAC;KACtD;IAEM,MAAM,CAAC,UAAkB;QAC9B,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;KACvC;IAEM,cAAc,CAAC,MAAsB;QAC1C,QAAQ,MAAM;YACZ,KAAK,cAAc,CAAC,KAAK;gBACvB,OAAO,oBAAoB,CAAC;YAC9B,KAAK,cAAc,CAAC,SAAS;gBAC3B,OAAO,cAAc,CAAC;YACxB,KAAK,cAAc,CAAC,WAAW;gBAC7B,OAAO,gBAAgB,CAAC;YAC1B,KAAK,cAAc,CAAC,MAAM;gBACxB,OAAO,eAAe,CAAC;YACzB,KAAK,cAAc,CAAC,MAAM,CAAC;YAC3B,KAAK,cAAc,CAAC,aAAa;gBAC/B,OAAO,UAAU,CAAC;YACpB,KAAK,cAAc,CAAC,QAAQ;gBAC1B,OAAO,UAAU,CAAC;YACpB;gBACE,OAAO,EAAE,CAAC;SACb;KACF;IAEM,eAAe;QACpB,QACE,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC;YACpB,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE;YAC1B,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,EAC5B;KACH;IAEM,eAAe;QACpB,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC;KAClC;IAEM,gBAAgB;QACrB,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC;KAC7B;IAEM,eAAe;QACpB,QACE,IAAI,CAAC,KAAK,CAAC,WAAW,GAAG,CAAC;YAC1B,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE;YAC1B,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,EAC5B;KACH;IAEM,qBAAqB,CAAC,IAAuB;QAClD,OAAO,IAAI,CAAC,MAAM,KAAK,cAAc,CAAC,MAAM,CAAC;KAC9C;IAEM,gBAAgB;QACrB,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC;KAC7B;IAEM,yBAAyB;QAC9B,QACE,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,IAAI,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,qBAAqB,EACzE;KACH;IAEM,wBAAwB;QAC7B,QACE,IAAI,CAAC,yBAAyB,EAAE;YAChC,CAAC,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,4BAA4B,EAC1D;KACH;IAEM,WAAW,CAAC,IAAuB;QACxC,QACE,IAAI,CAAC,mBAAmB,CAAC,OAAO,GAAG,CAAC;YACpC,IAAI,CAAC,MAAM,KAAK,cAAc,CAAC,aAAa,EAC5C;KACH;IAEM,eAAe,CAAC,IAAuB;QAC5C,QACE,IAAI,CAAC,iBAAiB,CAAC,OAAO,GAAG,CAAC;aACjC,IAAI,CAAC,MAAM,KAAK,cAAc,CAAC,SAAS;gBACvC,IAAI,CAAC,MAAM,KAAK,cAAc,CAAC,WAAW,CAAC,EAC7C;KACH;IAEM,QAAQ,CAAC,KAA0B,EAAE,KAAa;QACvD,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,CAAC,MAAM,GAAG,KAAK,EAAE;YACrC,MAAM,WAAW,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC;;YAEtC,OAAO,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,IAAI,KAAK,WAAW,CAAC;SAC9C;QACD,OAAO,IAAI,CAAC;KACb;IAEM,cAAc,CAAC,IAAuB;QAC3C,IAAI,MAAM,GAAG,KAAK,CAAC;QACnB,IAAI,IAAI,EAAE;YACR,QAAQ,IAAI,CAAC,YAAY;gBACvB,KAAK,YAAY,CAAC,MAAM;oBACtB,IAAI,IAAI,CAAC,MAAM,KAAK,cAAc,CAAC,KAAK,EAAE;wBACxC,MAAM,GAAG,IAAI,CAAC;qBACf;oBACD,MAAM;gBACR;oBACE,MAAM;aACT;SACF;QACD,OAAO,MAAM,CAAC;KACf;IAEM,QAAQ,CACb,IAAuB,EACvB,OAAe,EACf,OAAe;QAEf,QAAQ,IAAI,CAAC,YAAY;YACvB,KAAK,YAAY,CAAC,MAAM;;gBAEtB,IAAI,WAAW,GAAG,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;;gBAE9C,WAAW,GAAG,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;gBAC/C,IAAI,WAAW,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;oBAC/B,WAAW,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;iBACpC;gBACD,IAAI,WAAW,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;oBAC7C,WAAW,IAAI,GAAG,CAAC;iBACpB;gBACD,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;gBAC7C,MAAM;YACR;gBACE,MAAM;SACT;KACF;IAEM,YAAY,CAAC,IAAuB,EAAE,IAAY;QACvD,QAAQ,IAAI,CAAC,YAAY;YACvB,KAAK,YAAY,CAAC,MAAM;gBACtB,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBACvC,MAAM;YACR;gBACE,MAAM;SACT;KACF;IAEM,YAAY,CAAC,IAAuB;QACzC,IAAI,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,oBAAoB,YAAY,QAAQ,EAAE;YACxE,OAAO,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACvE;aAAM;YACL,OAAO,SAAS,CAAC;SAClB;KACF;;;MChfU,mBAAmB;IAO5B;QACI,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;QACd,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;QACb,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;KAClB;;;MCjBQ,QAAQ;IACV,GAAG;QACN,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,IAAI,EAAE,EAAE,OAAO,EAAE,EAAE;KAC7D;IAEM,MAAM,CAAC,OAAO;QACjB,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,CAAC;QACpC,IAAI,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE;YACvB,OAAO,SAAS,CAAC;SACpB;aAAM;YACH,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,WAAW,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG;gBAC7C,CAAC,GAAG,GAAG,IAAI,CAAC,aAAa,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG;gBAC5C,CAAC,GAAG,GAAG,IAAI,CAAC,aAAa,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;SAC9C;KACJ;;gEAdQ,QAAQ;6CAAR,QAAQ,WAAR,QAAQ;oFAAR,QAAQ;cADpB,UAAU;;;ACFX,IAAY,eAoCX;AApCD,WAAY,eAAe;;;;;IAKvB,qDAAI,CAAA;;;;;IAMJ,iDAAE,CAAA;;;;;IAMF,iDAAE,CAAA;;;;;IAMF,iDAAE,CAAA;;;;;IAMF,iDAAE,CAAA;;;;;IAMF,iDAAE,CAAA;AACN,CAAC,EApCW,eAAe,KAAf,eAAe;;ACA3B;MACa,aAAa;IACtB,OAAO,iBAAiB,CAAmB,CAAM;QAC7C,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,CAAM,EAAE,CAAC,CAAC,CAAC;KACrE;IAED,OAAO,QAAQ,CAAC,CAAM;QAClB,OAAO,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,OAAO,CAAC,KAAK,QAAQ,CAAa,CAAC;KAC9E;IAED,OAAO,SAAS,CAAmB,CAAM;QACrC,OAAO,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,OAAO,CAAC,KAAK,QAAQ,CAAQ,CAAC;KACzE;IAEO,OAAO,YAAY,CAAC,CAAM;QAC9B,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;KACxC;;;MCXQ,mBAAmB;IADhC;QAEI,SAAI,GAAW,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QAC/B,SAAI,GAAW,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QAC/B,SAAI,GAAW,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QAC/B,SAAI,GAAW,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;QAChC,SAAI,GAAW,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;QAEhC,QAAG,GAAW,MAAM,CAAC,SAAS,CAAC;QAE/B,cAAS,GAAG,aAAa,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;KAkEvD;IAhEW,QAAQ,CAAC,MAAc,EAAE,UAAkB;QAC/C,MAAM,KAAK,GAAW,IAAI,CAAC,GAAG,GAAG,UAAU,CAAC;QAE5C,IAAI,MAAM,GAAG,KAAK,EAAE;YAChB,OAAO,MAAM,CAAC,SAAS,CAAC;SAC3B;QACD,IAAI,MAAM,GAAG,CAAC,KAAK,EAAE;YACjB,OAAO,MAAM,CAAC,SAAS,CAAC;SAC3B;QAED,OAAO,MAAM,GAAG,UAAU,CAAC;KAC9B;IAEM,OAAO,CAAC,MAAc,EAAE,QAAyB,EAAE,MAAuB;QAC7E,MAAM,KAAK,GAAW,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACrD,QAAQ,MAAM;YACV,KAAK,eAAe,CAAC,IAAI;gBACrB,OAAO,KAAK,CAAC;YACjB,KAAK,eAAe,CAAC,EAAE;gBACnB,OAAO,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;YAC7B,KAAK,eAAe,CAAC,EAAE;gBACnB,OAAO,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;YAC7B,KAAK,eAAe,CAAC,EAAE;gBACnB,OAAO,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;YAC7B,KAAK,eAAe,CAAC,EAAE;gBACnB,OAAO,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;YAC7B,KAAK,eAAe,CAAC,EAAE;gBACnB,OAAO,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;SAChC;QACD,OAAO,MAAM,CAAC;KACjB;IAEM,OAAO,CAAC,MAAc,EAAE,QAAyB;QACpD,QAAQ,QAAQ;YACZ,KAAK,eAAe,CAAC,IAAI;gBACrB,OAAO,MAAM,CAAC;YAClB,KAAK,eAAe,CAAC,EAAE;gBACnB,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAC5C,KAAK,eAAe,CAAC,EAAE;gBACnB,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAC5C,KAAK,eAAe,CAAC,EAAE;gBACnB,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAC5C,KAAK,eAAe,CAAC,EAAE;gBACnB,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAC5C,KAAK,eAAe,CAAC,EAAE;gBACnB,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;SAC/C;QACD,OAAO,MAAM,CAAC;KACjB;IAEM,MAAM,CAAC,MAAc,EAAE,QAAyB;QACnD,IAAI,MAAiC,CAAC;QACtC,MAAM,GAAG,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;QAChE,KAAK,MAAM,WAAW,IAAI,IAAI,CAAC,SAAS,EAAE;YACtC,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,EAAE;gBAC5B,MAAM,CAAC,CAAC,CAAC,GAAG,eAAe,CAAC,WAAW,CAAC,CAAC;gBACzC,MAAM;aACT;iBAAM;gBACH,MAAM,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;aACrB;SACJ;QACD,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QACzC,OAAO,MAAM,CAAC;KACjB;;sFA1EQ,mBAAmB;wDAAnB,mBAAmB,WAAnB,mBAAmB;oFAAnB,mBAAmB;cAD/B,UAAU;;;MCSE,aAAa;IAStB,YAAmB,IAA6B;QAHzC,oBAAe,GAAoB,eAAe,CAAC,EAAE,CAAC;QACtD,wBAAmB,GAAG,CAAC,CAAC;QAG3B,IAAI,QAAQ,GAAG,kBAAkB,CAAC,gBAAgB,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;QAC1E,IAAI,CAAC,mBAAmB,GAAG,QAAQ,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;QAC7D,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;KACrB;IAEM,MAAM,CAAC,IAA6B;QACvC,IAAI,CAAC,CAAC,IAAI,CAAC,mBAAmB,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,mBAAmB,EAAE;YACpE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;SACtE;KACJ;IAEM,aAAa,CAAC,eAAgC,EAAE,mBAA2B;QAC9E,IAAI,aAAa,GACb,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,mBAAmB,EAAE,eAAe,CAAC,CAAC;QAE1E,IAAI,CAAC,eAAe,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;QACxC,IAAI,CAAC,mBAAmB,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;QAE5C,IAAI,CAAC,WAAW,GAAG,eAAe,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACzD,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC;KAChF;;;MCvBQ,iBAAiB;IAe1B,YAAmB,KAAa;QAC5B,MAAM,QAAQ,GAAG,kBAAkB,CAAC,gBAAgB,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QACjE,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAEvC,IAAI,CAAC,oBAAoB,GAAG,IAAI,aAAa,EAAE,CAAC;QAChD,IAAI,CAAC,mBAAmB,GAAG,IAAI,aAAa,EAAE,CAAC;QAC/C,IAAI,CAAC,kBAAkB,GAAG,IAAI,aAAa,EAAE,CAAC;QAC9C,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;KACrB;IAEM,KAAK,CAAC,KAAa;QACtB,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;QAC7C,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;QAC5C,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QAChB,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC;QAChC,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC;QACjC,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAC5E,IAAI,CAAC,mBAAmB,CAAC,aAAa,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAC1E,IAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;KAC3E;IAEM,cAAc,CAAC,GAAW,EAAE,MAAc,EAAE,QAAgB;QAC/D,MAAM,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC,iBAAiB,CAAC;;QAE9C,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,QAAQ,GAAG,QAAQ,EAAE;YACtC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,GAAG,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9D,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACrB,IAAI,CAAC,mBAAmB,CAAC,aAAa,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YAC1E,IAAI,CAAC,iBAAiB,GAAG,GAAG,CAAC;YAC7B,IAAI,IAAI,CAAC,OAAO,GAAG,CAAC,EAAE;gBAClB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;aAC9F;iBAAM;gBACH,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;aAClD;SACJ;aAAM,IAAI,MAAM,IAAI,IAAI,CAAC,KAAK,EAAE;YAC7B,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;YACnB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC;SAC5B;KACJ;IAEM,aAAa,CAAC,GAAW,EAAE,MAAc,EAAE,QAAgB;QAC9D,MAAM,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC;QAC7C,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,QAAQ,GAAG,QAAQ,EAAE;YACtC,IAAI,CAAC,OAAO,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,KAAK,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;YAC9D,IAAI,IAAI,CAAC,OAAO,KAAK,MAAM,CAAC,iBAAiB,IAAI,IAAI,CAAC,OAAO,KAAK,MAAM,CAAC,iBAAiB,EAAE;gBACxF,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;aACpB;YACD,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC;YAChF,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,oBAAoB,CAAC,WAAW,GAAG,GAAG,GAAG,IAAI,CAAC,oBAAoB,CAAC,WAAW,GAAG,IAAI,CAAC;YACjH,IAAI,CAAC,gBAAgB,GAAG,GAAG,CAAC;SAC/B;KACJ;;;MCnFQ,iBAAiB;IAS1B;QAPQ,UAAK,GAAwB,EAAE,CAAC;QAEjC,UAAK,GAAG,CAAC,CAAC;QACV,gBAAW,GAAG,CAAC,CAAC;QAChB,mBAAc,GAAuB,IAAI,iBAAiB,CAAC,CAAC,CAAC,CAAC;QAC9D,qBAAgB,GAAuB,IAAI,iBAAiB,CAAC,CAAC,CAAC,CAAC;KAItE;IAEO,WAAW;QACf,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;KAClC;IAEM,iBAAiB;QACpB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC;KACrE;IAEM,QAAQ;QACX,OAAO,IAAI,CAAC,KAAK,CAAC;KACrB;IAEM,WAAW;QACd,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,UAAU,KAAK,IAAI,CAAC,CAAC;KAChE;IAEM,OAAO,CAAC,EAAU;QACrB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;KACpD;IAEM,YAAY,CAAC,EAAU;QAC1B,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;KACjD;IAEM,KAAK;QACR,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;QACtB,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,CAAC,iBAAiB,EAAE,CAAC;KAC5B;IAEM,OAAO,CAAC,IAAuB;QAClC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtB,IAAI,CAAC,WAAW,EAAE,CAAC;KACtB;IAEM,UAAU,CAAC,EAAU;QACxB,MAAM,KAAK,GAAW,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;QAC5C,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE;YACZ,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,WAAW,EAAE,CAAC;SACtB;KACJ;IAEM,WAAW,CAAC,MAAsB;QACrC,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC;KAC9D;;kFA1DQ,iBAAiB;sDAAjB,iBAAiB,WAAjB,iBAAiB;oFAAjB,iBAAiB;cAD7B,UAAU;;;MCCE,iBAAiB;IAK1B,YAAoB,iBAAoC;QAApC,sBAAiB,GAAjB,iBAAiB,CAAmB;QAFjD,mBAAc,GAAwB,EAAE,CAAC;QAG5C,IAAI,CAAC,UAAU,GAAG,IAAI,mBAAmB,EAAE,CAAC;KAC/C;IAED,aAAa,CAAC,UAAoB;QAC9B,IAAI,CAAC,UAAU,CAAC,UAAU,GAAG,UAAU,CAAC;QACxC,IAAI,CAAC,sBAAsB,EAAE,CAAC;KACjC;IAED,MAAM,CAAC,KAAa;QAChB,IAAI,KAAK,IAAI,CAAC,EAAE;YACZ,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC;SAClC;QACD,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,KAAK,CAAC;QAC9B,IAAI,CAAC,sBAAsB,EAAE,CAAC;KACjC;IAED,sBAAsB;QAClB,MAAM,SAAS,GAAW,IAAI,CAAC,SAAS,EAAE,CAAC;QAC3C,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,GAAG,SAAS,EAAE;YAC1C,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;SAC3C;aAAM;YACH,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;gBAC3D,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;aACrC;SACJ;QACD,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;YACvD,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,CAAC,CAAC;SAC5B;QACD,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC;eAClE,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;YAC9D,IAAI,CAAC,UAAU,CAAC,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;SACvD;QACD,IAAI,CAAC,kBAAkB,EAAE,CAAC;KAC7B;IAED,GAAG;QACC,OAAO,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;KAC9F;IAED,GAAG;QACC,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;KAC/G;IAED,KAAK;QACD,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,CAAC,CAAC;QACzB,IAAI,CAAC,kBAAkB,EAAE,CAAC;KAC7B;IAED,IAAI;QACA,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;QACxC,IAAI,CAAC,kBAAkB,EAAE,CAAC;KAC7B;IAED,OAAO;QACH,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;KAC7E;IAED,WAAW;QACP,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,CAAC,CAAC;KACnC;IAED,QAAQ;QACJ,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;QACvB,IAAI,CAAC,kBAAkB,EAAE,CAAC;KAC7B;IAED,YAAY;QACR,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;QACvB,IAAI,CAAC,kBAAkB,EAAE,CAAC;KAC7B;IAED,OAAO,CAAC,IAAY;QAChB,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC;QAC5B,IAAI,CAAC,YAAY,EAAE,CAAC;KACvB;IAED,YAAY;QACR,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAC9B,IAAI,CAAC,kBAAkB,EAAE,CAAC;KAC7B;IAED,WAAW;QACP,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAC9B,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,CAAC,CAAC;QACzB,IAAI,CAAC,kBAAkB,EAAE,CAAC;KAC7B;IAED,kBAAkB;QACd,MAAM,UAAU,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC;QACpE,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QACnF,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;KACvF;IAED,SAAS;QACL,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;KACjI;IAED,eAAe,CAAC,EAAU;QACtB,MAAM,KAAK,GAAW,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;QAC9D,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE;YACZ,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,GAAG,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;SACvD;KACJ;IAED,eAAe,CAAC,EAAU;QACtB,MAAM,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;QACtC,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,KAAK,IAAI,EAAE;YAC/B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SACtB;KACJ;;kFAnHQ,iBAAiB;sDAAjB,iBAAiB,WAAjB,iBAAiB;oFAAjB,iBAAiB;cAD7B,UAAU;;;ACFX;MAEa,aAAa;IAQtB;QAFA,SAAI,GAAG,SAAS,CAAC;KAGhB;IAPD,IAAY,OAAO;QACf,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAC,UAAU,CAAC;KAC7C;IAOD,IAAI,KAAK;QACL,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,OAAO,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACtC;QACD,OAAO,IAAI,CAAC,IAAI,CAAC;KACpB;IAED,IAAI,KAAK;QACL,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,OAAO,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACtC;QACD,OAAO,IAAI,CAAC,IAAI,CAAC;KACpB;IAED,IAAI,GAAG;QACH,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,OAAO,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACpC;QACD,OAAO,IAAI,CAAC,IAAI,CAAC;KACpB;IAED,IAAI,IAAI;QACJ,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACrC;QACD,OAAO,IAAI,CAAC,IAAI,CAAC;KACpB;IAED,IAAI,IAAI;QACJ,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACrC;QACD,OAAO,IAAI,CAAC,IAAI,CAAC;KACpB;;0EA5CQ,aAAa;kDAAb,aAAa,WAAb,aAAa;oFAAb,aAAa;cADzB,UAAU;;;;ICFHP,kCACI;IAAAC,SACJ;IAAAC,cAAa;;;IAFoDK,yBAAW;IACxEH,YACJ;IADIC,kCACJ;;;IAKAL,kCACI;IAAAC,SACJ;IAAAC,cAAa;;;IAFyDK,yBAAW;IAC7EH,YACJ;IADIC,kCACJ;;MCDK,mBAAmB;IAI5B,YAAoB,MAAqB;QAArB,WAAM,GAAN,MAAM,CAAe;KAAK;IAE9C,GAAG;QACC,OAAO,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,CAAC;KACvC;;IAED,GAAG;QACC,OAAO,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,CAAC;KACvC;;IAED,KAAK;QACD,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,CAAC;KAClC;IAED,IAAI;QACA,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;KACjC;IAED,OAAO;QACH,OAAO,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,CAAC;KAC3C;IAED,WAAW;QACP,OAAO,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,CAAC;KAC/C;;IAED,QAAQ;QACJ,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC;KACrC;IAED,YAAY;QACR,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC;KACzC;IAED,YAAY;QACR,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC;KACzC;IAED,WAAW;QACP,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,CAAC;KACxC;IAED,kBAAkB;QACd,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,EAAE,CAAC;KAC/C;IAED,SAAS;QACL,OAAO,IAAI,CAAC,iBAAiB,CAAC,SAAS,EAAE,CAAC;KAC7C;;sFApDQ,mBAAmB;qDAAnB,mBAAmB;QDVhCL,mCACI;QAAAA,kCACI;QAD2BG,yKAA+C,yFAAW,kBAAc,IAAzB;QAC1EG,+EAEa;QACjBJ,cAAa;QACjBA,cAAiB;QACjBF,mCACI;QAAAA,kCACI;QADoCG,wKAA8C,yFAAW,iBAAa,IAAxB;QAClFG,+EAEa;QACjBJ,cAAa;QACjBA,cAAiB;QACjBF,yBAAM;QAAAC,SAA+D;QAAAC,cAAO;QAC5EF,8BACI;QAD+BG,6FAAS,kBAAc,IAAC;QACvDH,6BAAU;QAAAC,6BAAe;QAAAC,cAAW;QACxCA,cAAS;QACTF,+BACI;QAD+BG,8FAAS,cAAU,IAAC;QACnDH,8BAAU;QAAAC,2BAAa;QAAAC,cAAW;QACtCA,cAAS;;QAnB0BE,YAA+C;QAA/CG,4DAA+C;QAChDH,YAAqC;QAArCG,6DAAqC;QAM3BH,YAA8C;QAA9CG,2DAA8C;QACxDH,YAA0C;QAA1CG,kEAA0C;QAKtEH,YAA+D;QAA/DI,uGAA+D;QACTJ,YAA2B;QAA3BG,0CAA2B;QAG/BH,YAAuB;QAAvBG,sCAAuB;;oFCRlE,mBAAmB;cAN/B,SAAS;eAAC;;gBAEP,QAAQ,EAAE,gBAAgB;gBAC1B,WAAW,EAAE,2BAA2B;aAC3C;6DAIY,iBAAiB;kBAAzB,KAAK;;;MCJG,iBAAiB;IAE1B,iBAAiB;;kFAFR,iBAAiB;mDAAjB,iBAAiB;QCR9BP,2BACI;QAAAA,2BACI;QAAAA,gCAAkE;QAAAC,8BAAiB;QAAAC,cAAW;QAC9FF,gCAAqC;QAAAC,+BAAkB;QAAAC,cAAW;QAClEF,sBAAG;QAAAC,6DAAgD;QAAAC,cAAI;QAC3DA,cAAM;QACVA,cAAM;;oFDEO,iBAAiB;cAN7B,SAAS;eAAC;;gBAEP,QAAQ,EAAE,cAAc;gBACxB,WAAW,EAAE,yBAAyB;aACzC;;;;IEQDO,mCACmB;;;IADmCF,qDAAmC;;MCL5E,iBAAiB;IAI1B,iBAAiB;;kFAJR,iBAAiB;mDAAjB,iBAAiB;QDT9BP,2BACI;QAAAA,2BACI;QAAAC,SACJ;QAAAC,cAAM;QACNF,2BACI;QAAAC,SACJ;QAAAC,cAAM;QACNF,2BACI;QAAAC,SACJ;QAAAC,cAAM;QACNF,2BACI;QAAAC,SACJ;QAAAC,cAAM;QACVA,cAAM;QACNI,yFACmB;;QAbXF,YACJ;QADIC,kEACJ;QAEID,YACJ;QADIC,mEACJ;QAEID,YACJ;QADIC,4DACJ;QAEID,YACJ;QADII,2MACJ;QAEeJ,YAAiC;QAAjCG,mDAAiC;;oFCLvC,iBAAiB;cAN7B,SAAS;eAAC;;gBAEP,QAAQ,EAAE,cAAc;gBACxB,WAAW,EAAE,yBAAyB;aACzC;sCAIY,iBAAiB;kBAAzB,KAAK;;;;ICVNP,wBACI;IAAAS,4BAA6B;IACjCP,cAAM;;;;IAIEF,+BAEI;IADAG,sJAAS,qCAA6B,IAAC;IACvCH,6BAAU;IAAAC,uBAAU;IAAAC,cAAW;IAACD,oBACpC;IAAAC,cAAS;;;;IACTF,+BAEI;IADAG,sJAAS,qCAA6B,IAAC;IACvCH,6BAAU;IAAAC,kBAAK;IAAAC,cAAW;IAACD,oBAC/B;IAAAC,cAAS;;;;IACTF,+BAEI;IADAG,sJAAS,sCAA8B,IAAC;IACxCH,6BAAU;IAAAC,kBAAK;IAAAC,cAAW;IAACD,yBAC/B;IAAAC,cAAS;;;;IACTF,+BAEI;IADAG,sJAAS,qCAA6B,IAAC;IACvCH,6BAAU;IAAAC,oBAAO;IAAAC,cAAW;IAACD,SACjC;IAAAC,cAAS;;;IADwBE,YACjC;IADiCC,0EACjC;;;IASAL,+BACI;IAAAC,qBACA;IAAAD,6BAAU;IAAAC,wBAAW;IAAAC,cAAW;IACpCA,cAAS;;;;IAH+DK,oCAAgC;;;IAMtFP,6BAGV;IAAAA,6BAAU;IAAAC,yBAAY;IAAAC,cAAW;IACrCA,cAAO;;;IAH+BK,0EAAuD;;;;IAHjGP,qCAEI;IADAG,+OAA+C;IAC/CF,4BAAc;IAAAK,8EAIP;IACXJ,cAAe;;;IANXK,+DAA+C;IAC1BH,YAAmD;IAAnDG,wEAAmD;;;IAU5EP,wBACI;IAAAS,gCAAkE;IACtEP,cAAM;;;IADYE,YAAoC;IAApCG,sDAAoC;;;IAEtDP,wBACI;IAAAS,gCAAoE;IACxEP,cAAM;;;IADYE,YAAsC;IAAtCG,wDAAsC;;;;IAwCpCP,+BAEI;IAFoBG,yNAAS,uDAA2C,IAAC;IAEzEH,iCAAiC;IAAAC,iBAAI;IAAAC,cAAW;IACpDA,cAAS;;;IAd7BF,wBACI;IAAAA,4BACI;IAAAA,4BACI;IAAAA,4BACI;IAAAA,4BACI;IAAAA,6BAAU;IAAAC,wBAAW;IAAAC,cAAW;IACpCA,cAAM;IACNF,2BACI;IAAAA,yBACI;IAAAA,sBAAG;IAAAC,UAAoB;IAAAC,cAAI;IAC/BA,cAAO;IACPI,yFAGS;IACbJ,cAAM;IACVA,cAAM;IACVA,cAAM;IACVA,cAAM;IACVA,cAAM;;;;IAVqBE,aAAoB;IAApBM,uCAAoB;IAGtBN,YAA6C;IAA7CG,uEAA6C;;;;IAkBlDP,+BAEI;IAFoBG,kNAAS,2DAA+C,IAAC;IAE7EH,iCAAqC;IAAAC,iBAAI;IAAAC,cAAW;IACxDA,cAAS;;;IASbO,wCACyF;;;IADtBF,0BAAe,+CAAA;;;IAFtFP,4BAEI;IAAAM,oHACyF;IAC7FJ,cAAM;;;IAJaS,mFAAkD;IAE1CP,YAA0C;IAA1CG,4DAA0C;;;IAIjEP,4BACI;IAAAA,6BAAU;IAAAC,SAAkD;IAAAC,cAAW;IAC3EA,cAAM;;;;IADQE,YAAkD;IAAlDM,6EAAkD;;;IAqB5DD,oCAEmB;;;IADIF,uDAAwC;;;IAlBnEP,wBACI;IAAAA,4BACI;IAAAA,4BACI;IAAAC,SACJ;IAAAC,cAAM;IACNF,4BACI;IAAAC,SACJ;IAAAC,cAAM;IACNF,4BACI;IAAAC,SACJ;IAAAC,cAAM;IACNF,4BACI;IAAAC,SAGJ;IAAAC,cAAM;IACVA,cAAM;IACNI,8GAEmB;IACvBJ,cAAM;;;IAjBME,YACJ;IADIC,uEACJ;IAEID,YACJ;IADIC,wEACJ;IAEID,YACJ;IADIC,iEACJ;IAEID,YAGJ;IAHII,4KAGJ;IAEeJ,YAAsC;IAAtCG,wDAAsC;;;IAOzDP,wBACI;IAAAA,0BAAO;IAAAC,SAAyC;IAAAC,cAAQ;IAC5DA,cAAM;;;;IADKE,YAAyC;IAAzCM,oEAAyC;;;IAHpDT,SAEA;IAAAK,yFAEM;;;IAJNE,0IAEA;IAAMJ,YAAoB;IAApBG,sCAAoB;;;;IAO1BP,8BAEI;IAFkBG,kNAAS,8CAAkC,IAAC;IAE9DH,6BAAU;IAAAC,oBAAO;IAAAC,cAAW;IAC5BF,yBAAM;IAAAC,kBAAK;IAAAC,cAAO;IACtBA,cAAS;;;;;IAtF7BI,2EAmBM;IACNN,4BAEI;IAD0CG,yLAAS,8CAAkC,IAAC;IACtFH,4BACI;IAAAA,4BACI;IAAAA,4BACI;IAAAA,qCAA4C;IAA9BG,kMAA6B;IAACD,cAAe;IAC/DA,cAAM;IACNF,4BACI;IAAAA,4BACI;IAAAA,yBAAM;IAAAC,SAAa;IAAAC,cAAO;IAC1BI,mFAGS;IACbJ,cAAM;IACVA,cAAM;IACVA,cAAM;IACVA,cAAM;IACNF,6BACI;IAAAA,6BACI;IAAAM,6EAIM;IACNA,2HAIc;IACdN,6BACI;IAAAM,8EAoBM;IACNA,2HAMc;IAClBJ,cAAM;IACNF,6BACI;IAAAA,wCACI;IAAAM,mFAIS;IACTN,+BACI;IADkBG,6LAAS,+CAAmC,IAAC;IAC/DH,8BAAU;IAAAC,mBAAK;IAAAC,cAAW;IAC1BF,0BAAM;IAAAC,oBAAM;IAAAC,cAAO;IACvBA,cAAS;IACbA,cAAW;IACXF,gCACI;IAAAA,8BAAU;IAAAC,uBAAS;IAAAC,cAAW;IAClCA,cAAS;IACbA,cAAM;IACVA,cAAM;IACVA,cAAM;IACVA,cAAM;;;;;;;;IAlGAK,wGAAsE;IAqBxEH,YAAyC;IAAzCG,oEAAyC;IAIfH,YAA6B;IAA7BG,0CAA6B;IAGtCH,YAA0B;IAA1BQ,kDAA0B;IACrBR,YAAa;IAAbM,gCAAa;IAEdN,YAA6C;IAA7CG,uEAA6C;IAUrDH,YAA4C;IAA5CG,oEAA4C,kBAAA;IAUvCH,YAAgD;IAAhDG,wEAAgD,kBAAA;IAgC7CH,YAAoD;IAApDG,8EAAoD;IASrCH,YAA8B;IAA9BG,qCAA8B;;MC/JrE,aAAa;IASxB,YAAmB,iBAAoC,EAAS,iBAAoC;QAAjF,sBAAiB,GAAjB,iBAAiB,CAAmB;QAAS,sBAAiB,GAAjB,iBAAiB,CAAmB;QAClG,IAAI,CAAC,MAAM,GAAG,aAAa,CAAC,QAAQ,CAAC;QACrC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC;QAC5D,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,CAAC;KACjE;IAED,eAAe;QACb,IAAI,CAAC,IAAI,EAAE,CAAC;KACb;IAEO,IAAI;QACV,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAkB,EAAE;YACvC,MAAM,eAAe,GAAG,QAAQ,CAAC,cAAc,CAAC,wBAAwB,CAAC,CAAC;YAC1E,IAAI,eAAe,EAAE;gBACnB,eAAe,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,EAAE,KAAK,CAAC,CAAC;gBACzH,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC;aAC3D;SACF;aAAM;YACL,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,qBAAqB,KAAK,WAAW,EAAE;gBACjE,MAAM,mBAAmB,GAAG,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;gBAC5F,IAAI,mBAAmB,EAAE;oBACvB,mBAAmB,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,EAAE,KAAK,CAAC,CAAC;iBAC9H;aACF;YACD,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,KAAK,WAAW,EAAE;gBAC/D,MAAM,iBAAiB,GAAG,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;gBACxF,IAAI,iBAAiB,EAAE;oBACrB,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,CAAC;iBAC7D;aACF;SACF;KACF;;0EAxCU,aAAa;+CAAb,aAAa;QDb1BP,2BACI;QAAAM,2DAEM;QAENN,2BACI;QAAAA,2BACI;QAAAM,iEAGS;QACTA,iEAGS;QACTA,iEAGS;QACTA,iEAGS;QACTN,sCACI;QAAAA,+BACI;QADkBG,wFAAS,8BAA0B,KAAK,CAAC,IAAC;QAC5DH,0BAAM;QAAAC,iBAAG;QAAAC,cAAO;QACpBA,cAAS;QACTF,+BACI;QADkBG,wFAAS,8BAA0B,MAAM,CAAC,IAAC;QAC7DH,0BAAM;QAAAC,kBAAI;QAAAC,cAAO;QACrBA,cAAS;QACbA,cAAW;QACXI,mEAGS;QACTA,+EAOe;QACnBJ,cAAM;QACNO,uBACM;QACNT,4BACI;QAAAM,6DAEM;QACNA,6DAEM;QACVJ,cAAM;QACVA,cAAM;QAENF,6BACI;QAAAA,6BACI;QAAAA,6BACI;QAAAA,sCAA0E;QAA5DG,sGAAU,oDAAgD,IAAC;QAACD,cAAe;QAC7FA,cAAM;QACNF,6BACI;QAAAC,wBACJ;QAAAC,cAAM;QACNF,6BACI;QAAAC,wBACJ;QAAAC,cAAM;QACNF,6BACI;QAAAA,wCACI;QAAAA,+BACI;QADkBG,wFAAS,uCAAmC,IAAC;QAC/DH,8BAAU;QAAAC,mBAAK;QAAAC,cAAW;QAC1BF,0BAAM;QAAAC,oBAAM;QAAAC,cAAO;QACvBA,cAAS;QACbA,cAAW;QACXF,gCACI;QAAAA,8BAAU;QAAAC,uBAAS;QAAAC,cAAW;QAClCA,cAAS;QACbA,cAAM;QACVA,cAAM;QACNI,gFAoGc;QAClBJ,cAAM;QAENF,6BACI;QAAAS,mCAAyE;QAC7EP,cAAM;QACVA,cAAM;;;QAxLIE,YAAoC;QAApCG,sDAAoC;QAMUH,YAA0C;QAA1CG,4DAA0C;QAI1CH,YAA0C;QAA1CG,4DAA0C;QAI1CH,YAA2C;QAA3CG,6DAA2C;QAI3CH,YAA0C;QAA1CG,4DAA0C;QAY3DH,YAA2C;QAA3CG,6DAA2C;QAIvDH,YAAoD;QAApDG,sEAAoD;QAY7DH,YAAgC;QAAhCG,kDAAgC;QAGhCH,YAAkC;QAAlCG,oDAAkC;QAwBZH,aAAmC;QAAnCG,qCAAmC;QAKvCH,YAA4C;QAA5CG,2DAA4C;QAwGxDH,YAAuC;QAAvCG,sDAAuC;;oFC1KlD,aAAa;cALzB,SAAS;eAAC;;gBAET,QAAQ,EAAE,UAAU;gBACpB,WAAW,EAAE,uBAAuB;aACrC;8FAIC,kBAAkB;kBADjB,KAAK;;;MCNc,YAAY;IAE9B,YAAsB,MAAqB,EAAY,KAAwB;QAAzD,WAAM,GAAN,MAAM,CAAe;QAAY,UAAK,GAAL,KAAK,CAAmB;KAE9E;IAIS,QAAQ,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ;QAC1C,IAAI,CAAC,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QACpC,QAAQ,GAAG,QAAQ,IAAI,0BAA0B,CAAC;QAElD,IAAI,SAAS,CAAC,UAAU,EAAE;YACtB,SAAS,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,CAAC,OAAO,CAAC,EAAE;gBACrC,IAAI,EAAE,QAAQ;aACjB,CAAC,EAAE,QAAQ,CAAC,CAAC;SACjB;aAAM,IAAI,GAAG,IAAI,UAAU,IAAI,CAAC,EAAE;YAC/B,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,eAAe,CAAC,IAAI,IAAI,CAAC,CAAC,OAAO,CAAC,EAAE;gBAC7C,IAAI,EAAE,QAAQ;aACjB,CAAC,CAAC,CAAC;YACJ,CAAC,CAAC,YAAY,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;YACrC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YAC7B,CAAC,CAAC,KAAK,EAAE,CAAC;YACV,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;SAChC;aAAM;YACH,QAAQ,CAAC,IAAI,GAAG,gCAAgC,GAAG,kBAAkB,CAAC,OAAO,CAAC,CAAC;SAClF;KACJ;;wEA3BiB,YAAY;iDAAZ,YAAY,WAAZ,YAAY;oFAAZ,YAAY;cADjC,UAAU;;;MCFE,WAAY,SAAQ,YAAY;IAC3C,YACY,MAAqB,EACrB,KAAwB;QAElC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAHX,WAAM,GAAN,MAAM,CAAe;QACrB,UAAK,GAAL,KAAK,CAAmB;KAGnC;IAEM,MAAM;QACX,IAAI,UAAU,GAAG,oCAAoC,CAAC;QACtD,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;QACpC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,KAAK;YACxB,MAAM,UAAU,GACd,IAAI,CAAC,EAAE;gBACP,GAAG;gBACH,IAAI,CAAC,IAAI;gBACT,GAAG;gBACH,IAAI,CAAC,IAAI;gBACT,GAAG;gBACH,IAAI,CAAC,aAAa,EAAE;gBACpB,GAAG;gBACH,IAAI,CAAC,aAAa,CAAC,WAAW;gBAC9B,GAAG;gBACH,IAAI,CAAC,aAAa,CAAC,WAAW;gBAC9B,GAAG;gBACH,IAAI,CAAC,OAAO,CAAC;YAEf,UAAU,IAAI,KAAK,GAAG,KAAK,CAAC,MAAM,GAAG,UAAU,GAAG,IAAI,GAAG,UAAU,CAAC;SACrE,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,YAAY,EAAE,yBAAyB,CAAC,CAAC;KACpE;;sEA/BU,WAAW;gDAAX,WAAW,WAAX,WAAW;oFAAX,WAAW;cADvB,UAAU;;;MCCE,YAAa,SAAQ,YAAY;IAC5C,YACY,MAAqB,EACrB,KAAwB;QAElC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAHX,WAAM,GAAN,MAAM,CAAe;QACrB,UAAK,GAAL,KAAK,CAAmB;KAGnC;IAEM,MAAM;QACX,MAAM,OAAO,GAAG,EAAE,CAAC;QACnB,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;QACpC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,KAAK;YACxB,OAAO,CAAC,IAAI,CAAC;gBACX,EAAE,EAAE,IAAI,CAAC,EAAE;gBACX,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,MAAM,EAAE,IAAI,CAAC,aAAa,EAAE;gBAC5B,IAAI,EACF,IAAI,CAAC,aAAa,CAAC,WAAW,GAAG,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,WAAW;gBACvE,OAAO,EAAE,IAAI,CAAC,OAAO;aACtB,CAAC,CAAC;SACJ,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,CACX,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,EACnC,aAAa,EACb,0BAA0B,CAC3B,CAAC;KACH;;wEA5BU,YAAY;iDAAZ,YAAY,WAAZ,YAAY;oFAAZ,YAAY;cADxB,UAAU;;;ACLX,IAAY,UAGX;AAHD,WAAY,UAAU;IAClB,yCAAG,CAAA;IACH,2CAAI,CAAA;AACR,CAAC,EAHW,UAAU,KAAV,UAAU;;MCOT,aAAa;IAEtB,YAAoB,WAAwB,EAAU,YAA0B;QAA5D,gBAAW,GAAX,WAAW,CAAa;QAAU,iBAAY,GAAZ,YAAY,CAAc;KAE/E;IAEM,MAAM,CAAC,UAAkB;QAC5B,IAAI,gBAAgB,GAAe,UAAU,CAAC,UAAU,CAAC,CAAC;QAC1D,QAAQ,gBAAgB;YACpB,KAAK,UAAU,CAAC,GAAG;gBACf,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;gBAC1B,MAAM;YACV,KAAK,UAAU,CAAC,IAAI;gBAChB,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;gBAC3B,MAAM;YACV;gBACI,MAAM;SACb;KACJ;;0EAlBQ,aAAa;kDAAb,aAAa,WAAb,aAAa;oFAAb,aAAa;cADzB,UAAU;;;MCIE,mBAAmB;IAM5B,YAAmB,IAAmC;QAClD,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;QACjB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAC1B,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;KAC7B;IAEM,KAAK,CAAC,KAAc;QACvB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;KAC1B;IAEM,QAAQ;QACX,OAAO,IAAI,CAAC,SAAS,CAAC;KACzB;IAEM,MAAM,CAAC,MAAe;QACzB,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC;KAC9B;IAEM,WAAW;QACd,OAAO,IAAI,CAAC,YAAY,CAAC;KAC5B;IAEM,MAAM;KAEZ;IAEM,GAAG;QACN,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,MAAM,EAAE,CAAC;KACjB;;;AC9CL,IAAY,QAGX;AAHD,WAAY,QAAQ;IAChB,qCAAG,CAAA;IACH,uCAAI,CAAA;AACR,CAAC,EAHW,QAAQ,KAAR,QAAQ,QAGnB;AAED,IAAY,sBAGX;AAHD,WAAY,sBAAsB;IAC9B,2EAAQ,CAAA;IACR,2FAAgB,CAAA;AACpB,CAAC,EAHW,sBAAsB,KAAtB,sBAAsB,QAGjC;AAED;IACiB,kBAAkB,CAqBlC;AArBD,WAAiB,kBAAkB;IAC/B,SAAgB,QAAQ,CAAC,sBAA8C,EAAE,QAAkB;QACvF,QAAQ,QAAQ;YACZ,KAAK,QAAQ,CAAC,GAAG;gBACb,OAAO,KAAK,CAAC;YACjB,KAAK,QAAQ,CAAC,IAAI;gBACd,OAAO,MAAM,CAAC;YAClB;gBACI,OAAO,MAAM,CAAC;SACrB;KACJ;IATe,2BAAQ,WASvB,CAAA;IACD,SAAgB,MAAM,CAAC,sBAA8C,EAAE,QAAgB;QACnF,QAAQ,QAAQ;YACZ,KAAK,KAAK;gBACN,OAAO,QAAQ,CAAC,GAAG,CAAC;YACxB,KAAK,MAAM;gBACP,OAAO,QAAQ,CAAC,IAAI,CAAC;YACzB;gBACI,OAAO,QAAQ,CAAC,IAAI,CAAC;SAC5B;KACJ;IATe,yBAAM,SASrB,CAAA;AACL,CAAC,EArBgB,kBAAkB,KAAlB,kBAAkB;;ACXnC,IAAY,YAKX;AALD,WAAY,YAAY;IACpB,mDAAM,CAAA;IACN,6CAAG,CAAA;IACH,mDAAM,CAAA;IACN,+CAAI,CAAA;AACR,CAAC,EALW,YAAY,KAAZ,YAAY,QAKvB;AAED,IAAY,0BAGX;AAHD,WAAY,0BAA0B;IAClC,mFAAQ,CAAA;IACR,mGAAgB,CAAA;AACpB,CAAC,EAHW,0BAA0B,KAA1B,0BAA0B,QAGrC;AAED;IACiB,sBAAsB,CA6BtC;AA7BD,WAAiB,sBAAsB;IACnC,SAAgB,QAAQ,CAAC,0BAAsD,EAAE,YAA0B;QACvG,QAAQ,YAAY;YAChB,KAAK,YAAY,CAAC,MAAM;gBACpB,OAAO,QAAQ,CAAC;YACpB,KAAK,YAAY,CAAC,GAAG;gBACjB,OAAO,KAAK,CAAC;YACjB,KAAK,YAAY,CAAC,MAAM;gBACpB,OAAO,QAAQ,CAAC;YACpB,KAAK,YAAY,CAAC,IAAI;gBAClB,OAAO,MAAM,CAAC;YAClB;gBACI,OAAO,KAAK,CAAC;SACpB;KACJ;IAbe,+BAAQ,WAavB,CAAA;IACD,SAAgB,MAAM,CAAC,0BAAsD,EAAE,YAAoB;QAC/F,QAAQ,YAAY;YAChB,KAAK,QAAQ;gBACT,OAAO,YAAY,CAAC,MAAM,CAAC;YAC/B,KAAK,KAAK;gBACN,OAAO,YAAY,CAAC,GAAG,CAAC;YAC5B,KAAK,QAAQ;gBACT,OAAO,YAAY,CAAC,MAAM,CAAC;YAC/B,KAAK,MAAM;gBACP,OAAO,YAAY,CAAC,IAAI,CAAC;YAC7B;gBACI,OAAO,YAAY,CAAC,GAAG,CAAC;SAC/B;KACJ;IAbe,6BAAM,SAarB,CAAA;AACL,CAAC,EA7BgB,sBAAsB,KAAtB,sBAAsB;;MCW1B,aAAc,SAAQ,mBAAmB;IAclD,YAAmB,IAAU,EAAE,sBAA8C,EAAE,0BAAsD,EAClH,QAAkB,EAAE,YAA0B,EAAE,iBAA+B;QAC9F,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,QAAQ,CAAC,sBAAsB,EAAE,QAAQ,CAAC,CAAC;QACpF,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,kBAAkB,GAAG,sBAAsB,CAAC,QAAQ,CAAC,0BAA0B,EAAE,YAAY,CAAC,CAAC;QACpG,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,IAAI,CAAC,uBAAuB,GAAG,sBAAsB,CAAC,QAAQ,CAAC,0BAA0B,EAAE,iBAAiB,CAAC,CAAC;QAC9G,IAAI,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;QAC5B,IAAI,CAAC,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC;QAC1B,IAAI,CAAC,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;KAClC;CACJ;MAEY,mBAAoB,SAAQ,aAAa;IAIlD,YAAmB,IAAU,EAAE,sBAA8C,EAAE,0BAAsD,EAClH,QAAkB,EAAE,YAA0B,EAAE,iBAA+B;QAC9F,KAAK,CAAC,IAAI,EAAE,sBAAsB,EAAE,0BAA0B,EAAE,QAAQ,EAAE,YAAY,EAAE,iBAAiB,CAAC,CAAC;QAC3G,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;KACnB;IAEM,MAAM,CAAC,MAAe;QACzB,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACrB,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;KACnB;;;MC9CiB,gBAAgB;IAKlC,YAAsB,MAAqB,EACrB,QAAkB,EAClB,aAA4B;QAF5B,WAAM,GAAN,MAAM,CAAe;QACrB,aAAQ,GAAR,QAAQ,CAAU;QAClB,kBAAa,GAAb,aAAa,CAAe;QAL1C,WAAM,GAAG,EAAE,CAAC;QACV,eAAU,GAAG,KAAK,CAAC;KAK5B;IAEM,EAAE,CAAC,KAAa,EAAE,QAAkB;QACvC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,EAAE,QAAQ,CAAC,CAAC;KACnD;IAES,IAAI,CAAC,GAAG,IAAW;QACzB,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;;QAEpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;YAC7C,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,KAAK,EAAE;gBAC1B,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;aACjD;YACD,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,UAAU,EAAE;gBAC/B,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;aACxC;SACJ;KACJ;IAES,UAAU;QAChB,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;KAC5B;IAES,gBAAgB,CAAC,IAAuB,EAAE,MAAsB,EAAE,OAAgB;QACxF,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;KACzD;IAES,kBAAkB,CAAC,IAAuB,EAAE,QAAgB;QAClE,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;KACpD;IAES,qBAAqB,CAAC,YAA0B,EAAE,QAAgB;QACxE,IAAI,CAAC,IAAI,CAAC,wBAAwB,EAAE,YAAY,EAAE,QAAQ,CAAC,CAAC;KAC/D;IAES,iBAAiB,CAAC,IAAY;QACpC,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC;KACzC;IAEM,SAAS;QACZ,OAAO,IAAI,CAAC,UAAU,CAAC;KAC1B;IAQM,OAAO,CAAC,IAAuB;QAClC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;KAChC;IAMS,wBAAwB;QAC9B,OAAO,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;KACrC;IAES,cAAc,CAAC,IAAuB,EAAE,IAAU,EAAE,gBAA0B,EAAE,cAAwB;QAC9G,MAAM,eAAe,GAAG,UAAS,SAA+B;YAC5D,MAAM,IAAI,GAAG,IAAwB,CAAC;YACtC,IAAI,SAAS,CAAC,UAAU,EAAE;;;gBAItB,MAAM,GAAG,GAAG,IAAI,cAAc,EAAE,CAAC;gBAEjC,MAAM,eAAe,GAAG,UAAS,CAAC;;oBAE9B,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,EAAE;wBAC1B,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE;4BACpB,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,YAAY,CAAC;4BAChC,cAAc,EAAE,CAAC;yBACpB;6BAAM;4BACH,gBAAgB,EAAE,CAAC;yBACtB;qBACJ;iBACJ,CAAC;gBACF,GAAG,CAAC,gBAAgB,CAAC,MAAM,EAAE,eAAe,EAAE,KAAK,CAAC,CAAC;gBACrD,GAAG,CAAC,gBAAgB,CAAC,OAAO,EAAE,eAAe,EAAE,KAAK,CAAC,CAAC;gBACtD,GAAG,CAAC,gBAAgB,CAAC,SAAS,EAAE,eAAe,EAAE,KAAK,CAAC,CAAC;gBAExD,IAAI,MAAM,GAAG,EAAE,CAAC;gBAChB,MAAM,GAAG,MAAM,CAAC,MAAM,CAClB;oBACI,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,2BAA2B,EAAE,SAAS,CAAC,UAAU,CAAC;oBAC/E,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,mCAAmC,EAAE,IAAI,CAAC,IAAI,CAAC;iBAC/E;qBACI,GAAG,CAAC,UAAS,IAAI;oBACd,OAAO;wBACH,IAAI,CAAC,CAAC,CAAC,EAAE,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;qBACvC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;iBACf,CAAC,CACT,CAAC;gBAEF,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,oBAAoB,EAAE,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC,CAAC;gBAC5H,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAElB;iBAAM;gBACH,gBAAgB,EAAE,CAAC;aACtB;SACJ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACb,MAAM,aAAa,GAAG,UAAS,KAAU,EAAE,SAA+B;YACtE,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACnB,gBAAgB,EAAE,CAAC;SACtB,CAAC;QAEF,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,IAAI,IAAI,CAAC,mBAAmB,YAAY,mBAAmB,EAAE;;SAEvG;aAAM;YACH,MAAM,QAAQ,GAAG,kBAAkB,CAAC,MAAM,CACtC,sBAAsB,CAAC,QAAQ,EAAE,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;YAC7F,MAAM,YAAY,GAAG,sBAAsB,CAAC,MAAM,CAC9C,0BAA0B,CAAC,QAAQ,EAAE,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;YACjG,MAAM,iBAAiB,GAAG,sBAAsB,CAAC,MAAM,CACnD,0BAA0B,CAAC,QAAQ,EAAE,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;YAEtG,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,aAAa,CAAC,yBAAyB,CACnE,IAAI,EAAE,QAAQ,EAAE,YAAY,EAAE,iBAAiB,EAAE,eAAe,EAAE,aAAa,CAAC,CAAC;SACxF;;QAGD,UAAU,CAAC;YACP,IAAI,CAAC,mBAAmB,CAAC,GAAG,EAAE,CAAC;SAClC,EAAE,IAAI,CAAC,CAAC;KACZ;;;MChJiB,YAAa,SAAQ,gBAAgB;IAMvD,YAAsB,MAAqB,EACrB,QAAkB,EAClB,aAA4B;QAC9C,KAAK,CAAC,MAAM,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;QAHrB,WAAM,GAAN,MAAM,CAAe;QACrB,aAAQ,GAAR,QAAQ,CAAU;QAClB,kBAAa,GAAb,aAAa,CAAe;QAN1C,mBAAc,GAAG,IAAI,MAAM,CAAC,iBAAiB,CAAC,CAAC;QAC/C,eAAU,GAAG,IAAI,MAAM,CAAC,WAAW,CAAC,CAAC;QACnC,iBAAY,GAAG,YAAY,CAAC,MAAM,CAAC;KAM5C;IAMM,QAAQ,CAAC,OAAe,EAAE,OAAe;QAC5C,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;YAC/B,MAAM,IAAI,KAAK,CAAC,sEAAsE,CAAC,CAAC;SAC3F;KACJ;IAEM,YAAY,CAAC,IAAuB,EAAE,IAAY;QACrD,IAAI,CAAC,IAAI,EAAE;YACP,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;SAChD;QACD,IAAI,CAAC,IAAI,EAAE;YACP,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;SACrD;QACD,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YAChC,MAAM,IAAI,KAAK,CAAC,+EAA+E,CAAC,CAAC;SACpG;KACJ;;;MC3CQ,QAAQ;IACV,UAAU;QACb,SAAS,EAAE;YACP,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,IAAI,OAAO,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;SAC9E;QACD,OAAO,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC;KACxF;;gEANQ,QAAQ;6CAAR,QAAQ,WAAR,QAAQ;oFAAR,QAAQ;cADpB,UAAU;;;MCME,aAAa;IAOtB,YAAoB,IAAY;QAAZ,SAAI,GAAJ,IAAI,CAAQ;;QAJf,2BAAsB,GAAG,IAAI,GAAG,IAAI,GAAG,CAAC,CAAC;QACzC,6BAAwB,GAAG,sBAAsB,CAAC,gBAAgB,CAAC;QACnE,iCAA4B,GAAG,0BAA0B,CAAC,gBAAgB,CAAC;;;KAK3F;IAEM,mBAAmB,CAAC,IAAU,EAAE,QAAkB,EAAE,YAA0B,EAC1D,iBAA+B;QAEtD,MAAM,SAAS,GAAG,IAAI,aAAa,CAC/B,IAAI,EACJ,IAAI,CAAC,wBAAwB,EAC7B,IAAI,CAAC,4BAA4B,EACjC,QAAQ,EACR,YAAY,EACZ,iBAAiB,CAAC,CAAC;QAEvB,SAAS,CAAC,IAAI,GAAGM,UAA2B,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;QAEvE,SAAS,CAAC,MAAM,CAAC,MAAM,GAAG,UAAS,KAAsB;YACrD,SAAS,CAAC,UAAU,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,uBAAuB,CAAC;iBAC/F,MAAM,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC;YAC1C,SAAS,CAAC,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC;YAC/B,SAAS,CAAC,OAAO,GAAG,GAAG,CAAC;SAC3B,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAElB,SAAS,CAAC,MAAM,GAAG;YACf,SAAS,CAAC,MAAM,CAAC,kBAAkB,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;SACvD,CAAC;QAEF,OAAO,SAAS,CAAC;KACpB;IAEM,yBAAyB,CAAC,IAAU,EAAE,QAAkB,EAAE,YAA0B,EAAE,iBAA+B,EAC3F,eAAyB,EAAE,aAAuB;QAE/E,MAAM,SAAS,GAAG,IAAI,mBAAmB,CACrC,IAAI,EACJ,IAAI,CAAC,wBAAwB,EAC7B,IAAI,CAAC,4BAA4B,EACjC,QAAQ,EACR,YAAY,EACZ,iBAAiB,CAAC,CAAC;QAEvB,SAAS,CAAC,SAAS,GAAG,IAAI,CAAC,sBAAsB,CAAC;QAClD,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;QACrB,SAAS,CAAC,IAAI,GAAGA,UAA2B,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;QAEvE,SAAS,CAAC,MAAM,CAAC,MAAM,GAAG,UAAS,KAAsB;YACrD,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC;YAEnC,IAAI,SAAS,CAAC,MAAM,GAAG,SAAS,CAAC,SAAS,IAAI,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE;gBAC/D,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,SAAS,CAAC,uBAAuB,CAAC,CAAC;aACjE;iBAAM;gBACH,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,SAAS,CAAC,uBAAuB,CAAC,CAAC;aACnE;YAED,SAAS,CAAC,MAAM,IAAI,SAAS,CAAC,SAAS,CAAC;YAExC,SAAS,CAAC,MAAM,EAAE,CAAC;SACtB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAElB,SAAS,CAAC,MAAM,CAAC,OAAO,GAAG,UAAS,KAAK;YACrC,aAAa,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;SACnC,CAAC;QAEF,SAAS,CAAC,MAAM,GAAG;YACf,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAE;gBACnD,IAAI,SAAS,CAAC,MAAM,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE;oBACxC,SAAS,CAAC,UAAU,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC;oBACpF,SAAS,CAAC,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC;oBAC/B,SAAS,CAAC,OAAO,GAAG,GAAG,CAAC;oBACxB,eAAe,CAAC,SAAS,CAAC,CAAC;oBAC3B,OAAO;iBACV;gBAED,MAAM,KAAK,GAAG,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,EAAE,SAAS,CAAC,MAAM,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC;gBAC7F,SAAS,CAAC,MAAM,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;gBAC3C,SAAS,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,CAAC;aACtE;SACJ,CAAC;QAEF,OAAO,SAAS,CAAC;KACpB;;0EAzFQ,aAAa;kDAAb,aAAa,WAAb,aAAa;oFAAb,aAAa;cADzB,UAAU;;;MCgBE,gBAAgB;IAmC3B,YAAmB,IAAgC;QACjD,IAAI,CAAC,aAAa,GAAG,IAAI,aAAa,EAAE,CAAC;QACzC,IAAI,CAAC,mBAAmB,GAAG,IAAI,mBAAmB,EAAE,CAAC;QACrD,IAAI,CAAC,iBAAiB,GAAG,IAAI,iBAAiB,CAAC,CAAC,CAAC,CAAC;QAClD,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;KAC3B;IApCD,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;KACnB;IACD,IAAI,IAAI,CAAC,OAAe;QACpB,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC;QACrB,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC;QAC3B,IAAI,IAAI,CAAC,WAAW,EAAE;;YAEpB,IAAI,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;gBAClC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;aAClD;;YAED,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;SAC3D;KACJ;IAQD,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,QAAQ,CAAC;KACtB;IACD,IAAI,OAAO,CAAC,UAAkB;QAC5B,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,WAAW,EAAE,CAAC,UAAU,CAAC,gBAAgB,CAAC,GAAG,SAAS,GAAG,UAAU,CAAC;KAChG;IAWM,aAAa;QAClB,OAAO,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACpC;IAEM,mBAAmB;QACxB,OAAO,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;KACxC;;;MCxDU,mBAAoB,SAAQ,YAAY;IAMjD,YAAsB,MAAqB,EACrB,QAAkB,EAClB,aAA4B;QAC9C,KAAK,CAAC,MAAM,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;QAHrB,WAAM,GAAN,MAAM,CAAe;QACrB,aAAQ,GAAR,QAAQ,CAAU;QAClB,kBAAa,GAAb,aAAa,CAAe;QAN1C,MAAC,GAAwB,SAAS,CAAC;QACnC,qBAAgB,GAAG,SAAS,CAAC;QAC7B,sBAAiB,GAAG,SAAS,CAAC;QAMlC,IAAI,CAAC,aAAa,EAAE,CAAC;KACxB;IAEO,aAAa;QACjB,SAAS,UAAU,CAAC,IAAI,EAAE,KAAK;YAC3B,MAAM,IAAI,GAAG,IAA2B,CAAC;YACzC,OAAO,IAAI,CAAC,wBAAwB,EAAE,CAAC;SAC1C;QAED,SAAS,uBAAuB,CAAC,cAAc;YAC3C,MAAM,IAAI,GAAG,IAA2B,CAAC;YACzC,IAAI,OAAO,IAAI,CAAC,iBAAiB,KAAK,UAAU,EAAE;gBAC9C,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC;aAC1C;iBAAM;gBACH,cAAc,CAAC,kBAAkB,EAAE,CAAC;aACvC;SACJ;QAED,SAAS,sBAAsB,CAAC,aAAa;YACzC,MAAM,IAAI,GAAG,IAA2B,CAAC;YACzC,IAAI,OAAO,IAAI,CAAC,gBAAgB,KAAK,UAAU,EAAE;gBAC7C,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,YAAY,EAAE,cAAc,CAAC,aAAa,CAAC,CAAC;gBAChF,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;aACxC;iBAAM;gBACH,IAAI,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,qBAAqB,IAAI,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,qBAAqB,EAAE;oBACxG,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,YAAY,EAAE,cAAc,CAAC,aAAa,CAAC,CAAC;oBAChF,MAAM,gBAAgB,GAAG;wBACrB,aAAa,CAAC,kBAAkB,EAAE,CAAC;qBACtC,CAAC;oBACF,MAAM,cAAc,GAAG;wBACnB,aAAa,CAAC,MAAM,EAAE,CAAC;wBACvB,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,YAAY,EAAE,cAAc,CAAC,QAAQ,EAAE,aAAa,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;wBAC/G,IAAI,CAAC,CAAC,CAAC,eAAe,EAAE,CAAC;qBAC5B,CAAC;oBACF,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,YAAY,EAAE,aAAa,CAAC,IAAI,EAAE,gBAAgB,EAAE,cAAc,CAAC,CAAC;iBACzG;qBAAM;oBACH,aAAa,CAAC,kBAAkB,EAAE,CAAC;iBACtC;aACJ;SACJ;QAED,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,wBAAwB,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEpF,IAAI,OAAO,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,UAAU,KAAK,UAAU,EAAE;;YAErE,IAAI,CAAC,iBAAiB,GAAG,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SACnF;QACD,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,UAAU,GAAG,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEnF,IAAI,OAAO,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,cAAc,KAAK,UAAU,EAAE;;YAEzE,IAAI,CAAC,gBAAgB,GAAG,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SACtF;QACD,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,cAAc,GAAG,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;QAGtF,IAAI,CAAC,CAAC,GAAG,IAAI,SAAS,CAAC,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;QAE3D,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,WAAW,EAAE,UAAS,IAAI,EAAE,KAAK;YACvC,MAAM,IAAI,GAAG,IAA2B,CAAC;;YAEzC,MAAM,OAAO,GAAG,IAAI,gBAAgB,CAAC;gBACjC,EAAE,EAAE,IAAI,CAAC,gBAAgB;gBACzB,IAAI,EAAE,IAAI,CAAC,QAAQ;gBACnB,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;gBAClF,aAAa,EAAE,IAAI,aAAa,CAAC,EAAE,eAAe,EAAE,eAAe,CAAC,IAAI,EAAE,mBAAmB,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC;gBAC3G,iBAAiB,EAAE,IAAI,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC;gBACnD,YAAY,EAAE,YAAY,CAAC,MAAM;gBACjC,MAAM,EAAE,cAAc,CAAC,KAAK;gBAC5B,YAAY,EAAE,IAAI;aACrB,CAAC,CAAC;YACH,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC;YAC5B,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;SACzB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACd,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,cAAc,EAAE,UAAS,IAAI,EAAE,OAAO;YAC5C,MAAM,IAAI,GAAG,IAA2B,CAAC;;YAEzC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,YAAY,EAAE,cAAc,CAAC,SAAS,CAAC,CAAC;YACnE,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC5D,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;SACpE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACd,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,aAAa,EAAE,UAAS,IAAI,EAAE,OAAO;YAC3C,MAAM,IAAI,GAAG,IAA2B,CAAC;;YAEzC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,YAAY,EAAE,cAAc,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;SAC9E,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACd,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,WAAW,EAAE,UAAS,IAAI,EAAE,OAAO;YACzC,MAAM,IAAI,GAAG,IAA2B,CAAC;;YAEzC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,YAAY,EAAE,cAAc,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;SAC5E,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACd,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,aAAa,EAAE;YACrB,MAAM,IAAI,GAAG,IAA2B,CAAC;;YAEzC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;YACvB,IAAI,CAAC,UAAU,EAAE,CAAC;YAClB,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;YACjE,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;SAC5C,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACd,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,kBAAkB,EAAE;YAC1B,MAAM,IAAI,GAAG,IAA2B,CAAC;;SAE5C,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACd,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,EAAE;YACf,MAAM,IAAI,GAAG,IAA2B,CAAC;;YAEzC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;YACxB,IAAI,CAAC,UAAU,EAAE,CAAC;SACrB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACd,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,EAAE;YAChB,MAAM,IAAI,GAAG,IAA2B,CAAC;;YAEzC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;YACxB,IAAI,CAAC,UAAU,EAAE,CAAC;SACrB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACd,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,EAAE;YAClB,MAAM,IAAI,GAAG,IAA2B,CAAC;;YAEzC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;YACxB,IAAI,CAAC,UAAU,EAAE,CAAC;SACrB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;KACjB;IAEM,YAAY,CAAC,OAAO,EAAE,WAAW;QACpC,IAAI,CAAC,CAAC,CAAC,YAAY,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;KAC7C;IAEM,UAAU,CAAC,OAAO;QACrB,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;KAC9B;IAEM,QAAQ,CAAC,OAAe,EAAE,OAAe;QAC5C,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QACjC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAS,EAAE,KAAK;YAClC,MAAM,YAAY,GAAG,IAAI,CAAC,YAAiC,CAAC;YAC5D,IAAI,YAAY,CAAC,MAAM,KAAK,cAAc,CAAC,KAAK,IAAI,YAAY,CAAC,IAAI,KAAK,OAAO,EAAE;gBAC/E,IAAI,CAAC,YAAY,GAAG,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;gBAC5C,YAAY,CAAC,IAAI,GAAG,OAAO,CAAC;aAC/B;SACJ,CAAC,CAAC;KACN;IAEM,YAAY,CAAC,IAAuB,EAAE,IAAY;QACrD,KAAK,CAAC,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC/B,IAAI,CAAC,YAAY,CAAC,QAAQ,GAAG,IAAI,CAAC;QAClC,IAAI,CAAC,YAAY,CAAC,YAAY,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QAClD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;KACpB;IAEM,QAAQ;QACX,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;KACnB;IAEM,QAAQ;;QAEX,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAS,EAAE,KAAK;YAClC,IAAI,IAAI,CAAC,eAAe,KAAK,CAAC,EAAE;gBAC5B,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;aAC5B;SACJ,CAAC,CAAC;QACH,IAAI,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;KAClB;IAEM,SAAS;QACZ,MAAM,SAAS,GAAG,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;QACvC,SAAS,CAAC,OAAO,CAAC,CAAC,IAAS,EAAE,KAAK;YAC/B,MAAM,IAAI,GAAG,IAA2B,CAAC;YACzC,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;SAC3B,CAAC,CAAC;QACH,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;KAC3B;IAEM,UAAU,CAAC,IAAuB;QACrC,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACrC,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,EAAE;YAC1B,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;SAC3B;KACJ;IAEM,SAAS,CAAC,IAAuB;QACpC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;KAC7B;;sFA/LQ,mBAAmB;wDAAnB,mBAAmB,WAAnB,mBAAmB;oFAAnB,mBAAmB;cAD/B,UAAU;;;MCJW,cAAe,SAAQ,gBAAgB;IAIzD,YAAsB,MAAqB,EACrB,QAAkB,EAClB,aAA4B;QAC9C,KAAK,CAAC,MAAM,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;QAHrB,WAAM,GAAN,MAAM,CAAe;QACrB,aAAQ,GAAR,QAAQ,CAAU;QAClB,kBAAa,GAAb,aAAa,CAAe;QAJxC,iBAAY,GAAG,YAAY,CAAC,QAAQ,CAAC;KAM9C;;;MCfQ,UAAU;IACZ,IAAI,CAAC,CAAM,EAAE,QAAkB;QAClC,IAAI,QAAQ,CAAC,CAAC,MAAM,CAAC,KAAK,WAAW,EAAE;YACnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;gBAE/B,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,EAAE;oBAC1B,OAAO;iBACV;aACJ;SACJ;aAAM;YACH,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE;;gBAEb,IAAI,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,EAAE;oBAC7B,OAAO;iBACV;aACJ;SACJ;KACJ;;oEAjBQ,UAAU;+CAAV,UAAU,WAAV,UAAU;oFAAV,UAAU;cADtB,UAAU;;;MCiBE,cAAe,SAAQ,cAAc;IAMhD,YACY,MAAqB,EACrB,QAAkB,EAClB,aAA4B,EAC9B,UAAsB;QAE9B,KAAK,CAAC,MAAM,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;QAL7B,WAAM,GAAN,MAAM,CAAe;QACrB,aAAQ,GAAR,QAAQ,CAAU;QAClB,kBAAa,GAAb,aAAa,CAAe;QAC9B,eAAU,GAAV,UAAU,CAAY;QATxB,8BAAyB,GAAG,GAAG,CAAC;QAChC,UAAK,GAAwB,EAAE,CAAC;QAChC,UAAK,GAAwB,EAAE,CAAC;QAChC,gBAAW,GAAwB,EAAE,CAAC;KAS7C;IAEM,QAAQ;QACb,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE;YACrB,KACE,IAAI,KAAK,GAAG,CAAC,EACb,KAAK,GAAG,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,qBAAqB,EACzD,KAAK,EAAE,EACP;gBACA,IAAI,CAAC,YAAY,EAAE,CAAC;aACrB;SACF;KACF;IAEM,QAAQ,MAAW;IAEnB,SAAS;QACd,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,KAAK;YAC7B,MAAM,IAAI,GAAG,IAAsB,CAAC;YACpC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;SAC1B,CAAC,CAAC;QACH,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;QACtB,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;QACtB,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;QAC5B,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QACvC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;KACnE;IAEM,UAAU,CAAC,IAAuB;QACvC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QACzB,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAC3C,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAC3C,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QACjD,IAAI,CAAC,YAAY,EAAE,CAAC;KACrB;IAEO,mBAAmB,CACzB,IAAuB,EACvB,KAA0B;QAE1B,KAAK,IAAI,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;YAC1C,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;gBACrB,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACnB,MAAM;aACP;SACF;KACF;IAEM,SAAS,CAAC,IAAuB;QACtC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QACzB,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAC3C,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QACjD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;QAC9C,IAAI,CAAC,YAAY,CAAC,QAAQ,GAAG,CAAC,CAAC;QAC/B,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QAC1D,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,cAAc,CAAC,MAAM,CAAC,CAAC;QACnD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QACxB,IAAI,CAAC,YAAY,EAAE,CAAC;KACrB;IAEM,QAAQ,CAAC,QAAgB,EAAE,GAAW,EAAE,WAAmB;QAChE,MAAM,OAAO,GAAG,IAAI,gBAAgB,CAAC;YACnC,EAAE,EAAE,IAAI,CAAC,wBAAwB,EAAE;YACnC,IAAI,EAAE,QAAQ;YACd,aAAa,EAAE,IAAI,aAAa,CAAC;gBAC/B,eAAe,EAAE,eAAe,CAAC,IAAI;gBACrC,mBAAmB,EAAE,WAAW;aACjC,CAAC;YACF,iBAAiB,EAAE,IAAI,iBAAiB,CAAC,WAAW,CAAC;YACrD,YAAY,EAAE,YAAY,CAAC,QAAQ;YACnC,MAAM,EAAE,cAAc,CAAC,MAAM;YAC7B,YAAY,EAAE;gBACZ,GAAG;gBACH,QAAQ,EAAE,CAAC;gBACX,IAAI,EAAE,WAAW;gBACjB,oBAAoB,EAAE,IAAI,IAAI,EAAE;aACjC;SACF,CAAC,CAAC;QAEH,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACtB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACzB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACzB,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;QAC3B,IAAI,CAAC,YAAY,EAAE,CAAC;KACrB;IAEO,YAAY,CAAC,IAAuB;QAC1C,MAAM,GAAG,GAAG,IAAI,cAAc,EAAE,CAAC;QACjC,IAAI,CAAC,YAAY,CAAC,GAAG,GAAG,GAAG,CAAC;QAE5B,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QAC5E,GAAG,CAAC,OAAO,GAAG,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,kBAAkB,CAAC;QAC7D,GAAG,CAAC,eAAe,GAAG,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,uBAAuB,CAAC;;QAG1E,IAAI,aAAa,GAAG,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC;QAChE,IAAI,OAAO,aAAa,KAAK,UAAU,EAAE;YACvC,aAAa,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC;SACrC;QACD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,EAAE,UAAU,CAAS,EAAE,CAAS;YAChE,GAAG,CAAC,gBAAgB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;SAC5B,CAAC,CAAC;QAEH,GAAG,CAAC,YAAY,GAAG,MAAM,CAAC;QAC1B,GAAG,CAAC,WAAW,GAAG,UAAU,CAAC;YAC3B,MAAM,IAAI,GAAG,IAAsB,CAAC;YACpC,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,cAAc,CAAC,WAAW,CAAC,CAAC;SACzD,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACb,GAAG,CAAC,UAAU,GAAG,UAAU,CAAC;YAC1B,MAAM,IAAI,GAAG,IAAsB,CAAC;YACpC,IACE,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE;gBAClB,IAAI,CAAC,YAAY,CAAC,oBAAoB,CAAC,OAAO,EAAE;gBAClD,IAAI,CAAC,yBAAyB,GAAG,IAAI,EACrC;gBACA,IAAI,CAAC,YAAY,CAAC,QAAQ,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC;gBAChD,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;gBAC1D,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;gBAClE,IAAI,CAAC,YAAY,CAAC,oBAAoB,GAAG,IAAI,IAAI,EAAE,CAAC;aACrD;SACF,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACb,GAAG,CAAC,SAAS,GAAG,UAAU,CAAC;;;;;;;;;YASzB,MAAM,IAAI,GAAG,IAAsB,CAAC;YACpC,IAAI,GAAG,CAAC,UAAU,KAAK,CAAC,EAAE;gBACxB,IAAI,CAAC,YAAY,CAAC,QAAQ,GAAG,CAAC,CAAC;gBAC/B,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;gBAC1D,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE;oBACtB,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,cAAc,CAAC,QAAQ,CAAC,CAAC;oBACrD,IAAI,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,kBAAkB,EAAE;wBAClD,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,kBAAkB,CAC5C,GAAG,CAAC,QAAQ,EACZ,IAAI,CAAC,IAAI,CACV,CAAC;qBACH;yBAAM;wBACL,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;qBACjC;iBACF;qBAAM,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;;oBAE3B,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,cAAc,CAAC,MAAM,CAAC,CAAC;iBACpD;gBACD,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;gBACjD,IAAI,CAAC,YAAY,EAAE,CAAC;aACrB;SACF,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACd;IAEO,YAAY;QAClB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QACvC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;QAClE,IACE,IAAI,CAAC,WAAW,CAAC,MAAM;YACvB,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,qBAAqB,EACjD;YACA,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;YAChC,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE;gBAC5D,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,cAAc,CAAC,WAAW,CAAC,CAAC;gBACxD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC5B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;gBAC9C,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;aAC9B;SACF;KACF;IAEO,aAAa,CAAC,IAAuB;QAC3C,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE;YAC5D,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;YAC9B,IAAI,CAAC,YAAY,CAAC,GAAG,GAAG,IAAI,CAAC;SAC9B;KACF;IAEO,OAAO;QACb,IAAI,SAAS,GAAG,CAAC,CAAC;QAClB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,KAAK;YAC7B,SAAS,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;SACrC,CAAC,CAAC;QACH,OAAO,SAAS,CAAC;KAClB;IAEO,WAAW;QACjB,IAAI,SAAS,GAAG,CAAC,CAAC;QAClB,IAAI,SAAS,GAAG,CAAC,CAAC;QAClB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,KAAK;YAC7B,IAAI,mBAAmB,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC;YACrD,IAAI,IAAI,CAAC,MAAM,KAAK,cAAc,CAAC,MAAM,EAAE;gBACzC,mBAAmB,GAAG,CAAC,CAAC;aACzB;YACD,SAAS,IAAI,mBAAmB,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;YAC1D,SAAS,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;SACrC,CAAC,CAAC;QACH,OAAO,SAAS,GAAG,CAAC,GAAG,SAAS,GAAG,SAAS,GAAG,CAAC,CAAC;KAClD;;4EArNU,cAAc;mDAAd,cAAc,WAAd,cAAc;oFAAd,cAAc;cAD1B,UAAU;;;MCNE,yBAAyB;IAGpC,YACU,MAAqB,EACrB,IAAY,EACZ,KAAwB,EACxB,QAAkB,EAClB,iBAAoC,EACpC,aAA4B,EAC5B,MAAiB,EACjB,iBAAsC,EACtC,cAA8B;QAR9B,WAAM,GAAN,MAAM,CAAe;QACrB,SAAI,GAAJ,IAAI,CAAQ;QACZ,UAAK,GAAL,KAAK,CAAmB;QACxB,aAAQ,GAAR,QAAQ,CAAU;QAClB,sBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,kBAAa,GAAb,aAAa,CAAe;QAC5B,WAAM,GAAN,MAAM,CAAW;QACjB,sBAAiB,GAAjB,iBAAiB,CAAqB;QACtC,mBAAc,GAAd,cAAc,CAAgB;KACpC;;IAGG,wBAAwB;QAC7B,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACjB,IAAI,CAAC,OAAO,GAAG,IAAI,kBAAkB,CACnC,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,iBAAiB,EACtB,IAAI,CAAC,aAAa,EAClB,IAAI,CAAC,iBAAiB,EACtB,IAAI,CAAC,cAAc,EACnB,IAAI,CAAC,MAAM,CACZ,CAAC;SACH;QACD,OAAO,IAAI,CAAC,OAAO,CAAC;KACrB;;kGA/BU,yBAAyB;8DAAzB,yBAAyB,WAAzB,yBAAyB;oFAAzB,yBAAyB;cADrC,UAAU;;;;MCGE,oCAAoC;IAM/C,YAAoB,wBAAkD,EAClD,yBAAoD,EACpD,aAA4B,EAC5B,iBAAoC;QAHpC,6BAAwB,GAAxB,wBAAwB,CAA0B;QAClD,8BAAyB,GAAzB,yBAAyB,CAA2B;QACpD,kBAAa,GAAb,aAAa,CAAe;QAC5B,sBAAiB,GAAjB,iBAAiB,CAAmB;KACvD;IAED,QAAQ;QACN,QAAQ,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,yBAAyB,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;KAC7F;IAEM,MAAM,CAAC,MAAW;QACvB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;KACxB;IAEM,SAAS,CAAC,MAAW;QAC1B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAChC,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;QACvF,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,yBAAyB,CAAC,wBAAwB,EAAE,CAAC;QAEpF,MAAM,gBAAgB,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC;QACvD,gBAAgB,CAAC,KAAK,EAAE,CAAC;QAEzB,MAAM,gBAAgB,GAAG,IAAI,CAAC,wBAAwB,CAAC,uBAAuB,CAAC,aAAa,CAAC,CAAC;QAC9F,MAAM,YAAY,GAAG,gBAAgB,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;QACxE,MAAM,oBAAoB,GAAG,YAAY,CAAC,QAAyB,CAAC;QACpE,oBAAoB,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC;KACnE;IAEM,QAAQ,CAAC,QAAgB,EAAE,GAAW,EAAE,IAAY;QACzD,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;KACvD;;wHApCU,oCAAoC;sEAApC,oCAAoC;oBAEpC,aAAa;;;;;QChB1Bb,2BACI;QAAAM,kGAAoC;QACxCJ,cAAM;;oFDYO,oCAAoC;cALhD,SAAS;eAAC;;gBAET,QAAQ,EAAE,mCAAmC;gBAC7C,WAAW,EAAE,gDAAgD;aAC9D;mKAG6C,OAAO;kBAAlD,SAAS;mBAAC,aAAa,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE;;;MEN/B,WAAW;IADxB;QAEE,UAAK,GAAG,+BAA+B,CAAC;QAExC,cAAS,GAAwB;YAC/B,IAAI,gBAAgB,CAAC;gBACnB,EAAE,EAAE,GAAG;gBACP,IAAI,EAAE,uBAAuB;gBAC7B,IAAI,EAAE,0BAA0B;gBAChC,aAAa,EAAE,IAAI,aAAa,CAAC,EAAE,eAAe,EAAE,eAAe,CAAC,EAAE,EAAE,mBAAmB,EAAE,EAAE,EAAE,CAAC;gBAClG,iBAAiB,EAAE,IAAI,iBAAiB,CAAC,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC;gBAC1D,YAAY,EAAE,YAAY,CAAC,MAAM;gBACjC,MAAM,EAAE,cAAc,CAAC,SAAS;aACjC,CAAC;YACF,IAAI,gBAAgB,CAAC;gBACnB,EAAE,EAAE,GAAG;gBACP,IAAI,EAAE,uBAAuB;gBAC7B,IAAI,EAAE,0BAA0B;gBAChC,aAAa,EAAE,IAAI,aAAa,CAAC,EAAE,eAAe,EAAE,eAAe,CAAC,EAAE,EAAE,mBAAmB,EAAE,EAAE,EAAE,CAAC;gBAClG,YAAY,EAAE,YAAY,CAAC,MAAM;gBACjC,MAAM,EAAE,cAAc,CAAC,MAAM;aAC9B,CAAC;YACF,IAAI,gBAAgB,CAAC;gBACnB,EAAE,EAAE,GAAG;gBACP,IAAI,EAAE,uBAAuB;gBAC7B,IAAI,EAAE,0BAA0B;gBAChC,mBAAmB,EAAE,IAAI,mBAAmB,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC;gBAC7D,aAAa,EAAE,IAAI,aAAa,CAAC,EAAE,eAAe,EAAE,eAAe,CAAC,EAAE,EAAE,mBAAmB,EAAE,EAAE,EAAE,CAAC;gBAClG,YAAY,EAAE,YAAY,CAAC,MAAM;gBACjC,MAAM,EAAE,cAAc,CAAC,aAAa;aACrC,CAAC;YACF,IAAI,gBAAgB,CAAC;gBACnB,EAAE,EAAE,GAAG;gBACP,IAAI,EAAE,uBAAuB;gBAC7B,IAAI,EAAE,0BAA0B;gBAChC,aAAa,EAAE,IAAI,aAAa,CAAC,EAAE,eAAe,EAAE,eAAe,CAAC,EAAE,EAAE,mBAAmB,EAAE,EAAE,EAAE,CAAC;gBAClG,YAAY,EAAE,YAAY,CAAC,MAAM;gBACjC,MAAM,EAAE,cAAc,CAAC,MAAM;aAC9B,CAAC;YACF,IAAI,gBAAgB,CAAC;gBACnB,EAAE,EAAE,GAAG;gBACP,IAAI,EAAE,qCAAqC;gBAC3C,IAAI,EAAE,GAAG;gBACT,aAAa,EAAE,IAAI,aAAa,CAAC,EAAE,eAAe,EAAE,eAAe,CAAC,EAAE,EAAE,mBAAmB,EAAE,CAAC,EAAE,CAAC;gBACjG,YAAY,EAAE,YAAY,CAAC,QAAQ;gBACnC,MAAM,EAAE,cAAc,CAAC,MAAM;aAC9B,CAAC;YACF,IAAI,gBAAgB,CAAC;gBACnB,EAAE,EAAE,GAAG;gBACP,IAAI,EAAE,qBAAqB;gBAC3B,IAAI,EAAE,wBAAwB;gBAC9B,aAAa,EAAE,IAAI,aAAa,CAAC,EAAE,eAAe,EAAE,eAAe,CAAC,EAAE,EAAE,mBAAmB,EAAE,EAAE,EAAE,CAAC;gBAClG,YAAY,EAAE,YAAY,CAAC,MAAM;gBACjC,MAAM,EAAE,cAAc,CAAC,MAAM;aAC9B,CAAC;SACH,CAAC;KACH;;sEAvDY,WAAW;gDAAX,WAAW,WAAX,WAAW;oFAAX,WAAW;cADvB,UAAU;;;MCoFE,iCAAiC;IAC5C,YAAmB,MAAsB;QAAtB,WAAM,GAAN,MAAM,CAAgB;KAAI;;kEADlC,iCAAiC;8IAAjC,iCAAiC,2CAnBjC;QACT,aAAa;QACb,aAAa;QACb,iBAAiB;QACjB,aAAa;QACb,WAAW;QACX,aAAa;QACb,iBAAiB;QACjB,yBAAyB;QACzB,UAAU;QACV,QAAQ;QACR,mBAAmB;QACnB,QAAQ;QACR,WAAW;QACX,YAAY;QACZ,mBAAmB;QACnB,cAAc;KACf,YArCQ;YACP,aAAa;YACb,uBAAuB;YACvB,WAAW;YACX,mBAAmB;YACnB,eAAe;YACf,iBAAiB;YACjB,eAAe;YACf,kBAAkB;YAClB,aAAa;YACb,cAAc;YACd,aAAa;YACb,oBAAoB;YACpB,wBAAwB;YACxB,eAAe;YACf,gBAAgB;YAChB,gBAAgB;SACjB;qFAsBU,iCAAiC,mBAhD1C,oCAAoC;QACpC,aAAa;QACb,qBAAqB;QACrB,iBAAiB;QACjB,mBAAmB;QACnB,mBAAmB;QACnB,iBAAiB;QACjB,aAAa,aAGb,aAAa;QACb,uBAAuB;QACvB,WAAW;QACX,mBAAmB;QACnB,eAAe;QACf,iBAAiB;QACjB,eAAe;QACf,kBAAkB;QAClB,aAAa;QACb,cAAc;QACd,aAAa;QACb,oBAAoB;QACpB,wBAAwB;QACxB,eAAe;QACf,gBAAgB;QAChB,gBAAgB,aAER,oCAAoC;oFAqBnC,iCAAiC;cAlD7C,QAAQ;eAAC;gBACR,YAAY,EAAE;oBACZ,oCAAoC;oBACpC,aAAa;oBACb,qBAAqB;oBACrB,iBAAiB;oBACjB,mBAAmB;oBACnB,mBAAmB;oBACnB,iBAAiB;oBACjB,aAAa;iBACd;gBACD,OAAO,EAAE;oBACP,aAAa;oBACb,uBAAuB;oBACvB,WAAW;oBACX,mBAAmB;oBACnB,eAAe;oBACf,iBAAiB;oBACjB,eAAe;oBACf,kBAAkB;oBAClB,aAAa;oBACb,cAAc;oBACd,aAAa;oBACb,oBAAoB;oBACpB,wBAAwB;oBACxB,eAAe;oBACf,gBAAgB;oBAChB,gBAAgB;iBACjB;gBACD,OAAO,EAAE,CAAC,oCAAoC,CAAC;gBAC/C,eAAe,EAAE,CAAC,aAAa,EAAE,qBAAqB,EAAE,mBAAmB,CAAC;gBAC5E,SAAS,EAAE;oBACT,aAAa;oBACb,aAAa;oBACb,iBAAiB;oBACjB,aAAa;oBACb,WAAW;oBACX,aAAa;oBACb,iBAAiB;oBACjB,yBAAyB;oBACzB,UAAU;oBACV,QAAQ;oBACR,mBAAmB;oBACnB,QAAQ;oBACR,WAAW;oBACX,YAAY;oBACZ,mBAAmB;oBACnB,cAAc;iBACf;aACF;;;AC5FD;;;;ACAA;;;;;;"}