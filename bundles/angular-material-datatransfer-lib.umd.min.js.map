{"version":3,"sources":["../../../projects/amd-lib/src/lib/enums/custom-event-type.enum.ts","../../../projects/amd-lib/src/lib/directives/host.directive.ts","../../../projects/amd-lib/src/lib/models/app-config.model.ts","../../../projects/amd-lib/src/lib/services/config.service.ts","../../../projects/amd-lib/src/lib/utils/date.util.ts","../../../projects/amd-lib/src/lib/enums/decimal-byte-unit.enum.ts","../../../node_modules/tslib/tslib.es6.js","../../../projects/amd-lib/src/lib/extensions/enum.extension.ts","../../../projects/amd-lib/src/lib/utils/decimal-byte-unit.util.ts","../../../projects/amd-lib/src/lib/models/size-container.model.ts","../../../projects/amd-lib/src/lib/enums/transfer-status.enum.ts","../../../projects/amd-lib/src/lib/models/progress-container.model.ts","../../../projects/amd-lib/src/lib/stores/datatransfer.store.ts","../../../projects/amd-lib/src/lib/models/pagination-container.model.ts","../../../projects/amd-lib/src/lib/services/pagination.service.ts","../../../projects/amd-lib/src/lib/services/logger.service.ts","../../../projects/amd-lib/src/lib/components/pagination.component.html","../../../projects/amd-lib/src/lib/components/pagination.component.ts","../../../projects/amd-lib/src/lib/components/dropzone.component.ts","../../../projects/amd-lib/src/lib/components/progress.component.html","../../../projects/amd-lib/src/lib/components/dropzone.component.html","../../../projects/amd-lib/src/lib/components/progress.component.ts","../../../projects/amd-lib/src/lib/components/main.component.html","../../../projects/amd-lib/src/lib/components/main.component.ts","../../../projects/amd-lib/src/lib/enums/transfer-type.enum.ts","../../../projects/amd-lib/src/lib/components/browse-dialog.component.ts","../../../projects/amd-lib/src/lib/components/edit-dialog.component.html","../../../projects/amd-lib/src/lib/components/browse-dialog.component.html","../../../projects/amd-lib/src/lib/components/edit-dialog.component.ts","../../../projects/amd-lib/src/lib/facades/datatransfer.facade.ts","../../../projects/amd-lib/src/lib/enums/export-type.enum.ts","../../../projects/amd-lib/src/lib/io/exporters/base.exporter.ts","../../../projects/amd-lib/src/lib/io/exporters/csv.exporter.ts","../../../projects/amd-lib/src/lib/io/exporters/json.exporter.ts","../../../projects/amd-lib/src/lib/services/export.service.ts","../../../projects/amd-lib/src/lib/models/preprocess-container.model.ts","../../../projects/amd-lib/src/lib/enums/hash-type.enum.ts","../../../projects/amd-lib/src/lib/enums/encoding-type.enum.ts","../../../projects/amd-lib/src/lib/models/hash-container.model.ts","../../../projects/amd-lib/src/lib/io/datatransfer.io.ts","../../../projects/amd-lib/src/lib/io/uploaders/base.uploader.ts","../../../projects/amd-lib/src/lib/models/datatransfer-item.model.ts","../../../projects/amd-lib/src/lib/utils/guid.util.ts","../../../projects/amd-lib/src/lib/services/crypto.service.ts","../../../projects/amd-lib/src/lib/io/uploaders/resumablejs.uploader.ts","../../../projects/amd-lib/src/lib/io/downloaders/base.downloader.ts","../../../projects/amd-lib/src/lib/utils/common.util.ts","../../../projects/amd-lib/src/lib/io/downloaders/blob.downloader.ts","../../../projects/amd-lib/src/lib/factories/datatransfer-facade.factory.ts","../../../projects/amd-lib/src/lib/angular-material-datatransfer.component.ts","../../../projects/amd-lib/src/lib/angular-material-datatransfer.component.html","../../../projects/amd-lib/src/lib/services/demo.service.ts","../../../projects/amd-lib/src/lib/angular-material-datatransfer.module.ts"],"names":["CustomEventType","CustomEventTypeExtensions","CUSTOM_EVENT_TYPE_NS","CUSTOM_EVENT_TYPE_CREATE","CUSTOM_EVENT_TYPE_DOWNLOAD_ITEM","CUSTOM_EVENT_TYPE_UPDATE_CONFIG","CUSTOM_EVENT_TYPE_INIT","CUSTOM_EVENT_TYPE_UPLOAD_COMPLETED","CUSTOM_EVENT_TYPE_DOWNLOAD_COMPLETED","CUSTOM_EVENT_TYPE_ITEM_ADDED","CUSTOM_EVENT_TYPE_ITEM_REMOVED","CUSTOM_EVENT_TYPE_ITEM_COMPLETED","CUSTOM_EVENT_TYPE_ITEMS_CLEARED","CUSTOM_EVENT_TYPE_ITEM_CLICKED","toString","type","CREATE","DOWNLOAD_ITEM","UPDATE_CONFIG","INIT","UPLOAD_COMPLETED","DOWNLOAD_COMPLETED","ITEM_ADDED","ITEM_REMOVED","ITEM_COMPLETED","ITEMS_CLEARED","ITEM_CLICKED","toEnum","UNKNOWN","HostDirective","viewContainerRef","this","i0","ɵɵdirectiveInject","ViewContainerRef","selectors","Directive","selector","CoreAppConfig","showUploadDropzone","uploadBrowseElementId","undefined","uploadDropElementId","paginationRppOptions","simultaneousDownloads","downloadMethod","downloadHeaders","downloadWithCredentials","downloadXhrTimeout","preprocessHashEnabled","preprocessHashChecked","preprocessHashTarget","preprocessHashMethod","preprocessHashParameterName","preprocessHashFileNameParameterName","preprocessHashFunctionName","preprocessHashEncodingName","preprocessHashInputEncodingName","preprocessHashTooltipContent","saveDownloadFileAs","parseMessageCallback","message","getTarget","request","params","target","separator","indexOf","join","ResumableJsAppConfig","chunkSize","forceChunkSize","simultaneousUploads","fileParameterName","chunkNumberParameterName","chunkSizeParameterName","currentChunkSizeParameterName","totalSizeParameterName","typeParameterName","identifierParameterName","fileNameParameterName","relativePathParameterName","totalChunksParameterName","throttleProgressCallbacks","query","headers","preprocess","preprocessFile","method","uploadMethod","testMethod","testTarget","parameterNamespace","testChunks","generateUniqueIdentifier","maxChunkRetries","chunkRetryInterval","permanentErrors","maxFiles","withCredentials","xhrTimeout","clearInput","chunkFormat","minFileSize","maxFileSize","fileType","maxFilesErrorCallback","files","errorCount","alert","minFileSizeErrorCallback","file","fileName","name","maxFileSizeErrorCallback","fileTypeErrorCallback","AppConfig","production","core","resumablejs","ConfigService","prototype","load","config","settings","Object","keys","forEach","propertyName","factory","ɵfac","Injectable","DecimalByteUnit","DateUtil","now","Date","getTime","format","seconds","date","isNaN","getUTCHours","slice","getUTCMinutes","getUTCSeconds","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","hasOwnProperty","call","__extends","__","constructor","create","__values","o","s","Symbol","iterator","m","i","length","next","value","done","TypeError","EnumExtension","getNamesAndValues","e","getNames","map","n","getObjValues","filter","v","getValues","k","DecimalByteUnitUtil","C_KB","Math","pow","C_MB","C_GB","C_TB","C_PB","MAX","Number","MAX_VALUE","byteUnits","multiply","number","multiplier","limit","MIN_VALUE","convert","fromUnit","toUnit","bytes","toBytes","Byte","KB","MB","GB","TB","PB","result","_b","_c","currentUnit","abs","toFixed","TransferStatus","SizeContainer","init","decimalByteUnit","decimalByteUnitSize","injector","ReflectiveInjector","resolveAndCreate","decimalByteUnitUtil","get","update","updateDecimal","convertResult","displayUnit","displaySize","ProgressContainer","total","dateUtil","bitrateSizeContainer","loadedSizeContainer","totalSizeContainer","reset","progressTimestamp","bitrateTimestamp","loaded","bitrate","percent","displayBitrate","displayTimeLeft","updateProgress","interval","timeDiff","updateBitrate","POSITIVE_INFINITY","NEGATIVE_INFINITY","DatatransferStore","items","count","failedCount","uploadProgress","downloadProgress","updateCount","updateFailedCount","getByStatus","Failed","getItems","getSelected","item","isSelected","getById","id","find","getIndexById","findIndex","clear","addItem","push","removeById","index","splice","status","PaginationContainer","pages","page","rpp","PaginationService","datatransferStore","paginatedItems","pagination","setRppOptions","rppOptions","setPaginationContainer","pageCount","includes","onPaginationChange","max","hasNext","min","first","last","hasPrevious","moveNext","movePrevious","setPage","onPageChange","onRppChange","startIndex","endIndex","ceil","getPageByItemId","setPageByItemId","ɵɵinject","LoggerService","noop","defineProperty","enabled","console","debug","bind","error","log","info","warn","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵproperty","i0.ɵɵadvance","i0.ɵɵtextInterpolate1","PaginationComponent","logger","paginationService","inputs","decls","vars","consts","template","rf","ctx","i0.ɵɵlistener","i0.ɵɵtemplate","i0.ɵɵtextInterpolate3","Component","templateUrl","Input","DropzoneComponent","i0.ɵɵelement","ProgressComponent","datatransferFacade","startAll","pauseAll","removeAll","retryAll","openEditPathDialog","item_r23","i0.ɵɵtextInterpolate","openEditFilenameDialog","preprocessContainer","i0.ɵɵpropertyInterpolate1","retryItem","progressContainer","itemClick","removeItem","i0.ɵɵpropertyInterpolate","_r28","_r31","TransferType","MainComponent","ngAfterViewInit","dropzoneElement","document","getElementById","addEventListener","openBrowseDialog","assignUploadDrop","uploadBrowseElement","uploadDropElement","export","toggleVisible","$event","checked","removeSelected","BrowseDialogComponent","dialogRef","data","assignUploadBrowse","close","onNoClick","ctx_r0","editFormControl","ctx_r1","i1","MatDialogRef","MAT_DIALOG_DATA","Inject","EditDialogComponent","mode","itemPath","path","itemName","FormControl","editPath","errorMessage","editFilename","ExportType","DatatransferFacade","zone","store","exportService","uploader","downloader","dialog","progressInterval","bitrateInterval","datatransfer","on","that","run","changeItemStatus","progress","updateItemProgress","transferType","updateOverallProgress","size","updateOverallSize","element","isDirectory","assignBrowse","assignDrop","open","_this","Upload","Ready","Queued","pause","cancel","dispatchEvent","CustomEvent","detail","Download","Finished","download","filename","url","sizeInBytes","exportType","getStatusClass","Uploading","Downloading","Preprocessing","showStartButton","isWorking","showPauseButton","showRemoveButton","showRetryButton","showRetryButtonByItem","showExportButton","showPreprocessingCheckbox","showPreprocessingTooltip","showSpinner","showProgressbar","showPath","currentPath","showEditDialog","oldPath","newPath","cleanedPath","replace","startsWith","endsWith","parseMessage","Function","BaseExporter","content","mimeType","a","createElement","navigator","msSaveBlob","Blob","URL","href","createObjectURL","setAttribute","body","appendChild","click","removeChild","location","encodeURIComponent","CsvExporter","_super","csvContent","itemString","getStatusName","sizeContainer","JsonExporter","JSON","stringify","ExportService","csvExporter","jsonExporter","CSV","HashType","HashTypeImplementation","HashTypeExtensions","EncodingType","EncodingTypeImplementation","EncodingTypeExtensions","PreprocessContainer","_isPaused","_isCancelled","assign","isPaused","isCancelled","doWork","hashTypeImplementation","hashType","MD5","SHA1","encodingTypeImplementation","encodingType","Latin1","Hex","Base64","UTF8","HashContainer","inputEncodingType","hashTypeString","encodingTypeString","inputEncodingTypeString","startDate","endDate","reader","FileReader","StreamHashContainer","offset","BaseDatatransfer","guidUtil","cryptoService","events","_isWorking","event","callback","toLowerCase","fire","args","_i","arguments","apply","updateZone","createGuid","preprocessHash","continueCallback","cancelCallback","successCallback","container","hashString","xhr_1","XMLHttpRequest","responseHandler","responseText","concat","pair","send","Internal","createStreamHashContainer","setTimeout","BaseUploader","filenameRegExp","RegExp","pathRegExp","test","Error","DatatransferItem","_path","displayPath","_message","newMessage","getTransferTypeName","GuidUtil","s4","floor","random","substring","CryptoService","STREAM_HASH_CHUNK_SIZE","HASH_TYPE_IMPLEMENTATION","CryptoBrowserify","ENCODING_TYPE_IMPLEMENTATION","createHashContainer","hash","cryptoBrowserify.createHash","onload","digest","readAsBinaryString","errorCallback","binary","end","write","onerror","read","round","NgZone","ResumableJsUploader","r","preprocessFileFn","preprocessChunkFn","initResumable","resumableChunk","preprocessFinished","resumableFile","internalItem","uploadNextChunk","Resumable","newItem","uniqueIdentifier","relativePath","substr","externalItem","getSize","upload","preprocessState","removeFile","retry","BaseDownloader","CommonUtil","each","BlobDownloader","commonUtil","queue","downloading","downloadNext","abortDownload","getProgress","removeItemFromArray","array","initDownload","lastProgressCallback","xhr","timeout","customHeaders","setRequestHeader","responseType","onloadstart","onprogress","onloadend","readyState","response","saveAs","shift","abort","totalSize","totalDone","currentFileProgress","DatatransferFacadeFactory","resumableUploader","blobDownloader","createDatatransferFacade","facade1","MatDialog","AngularMaterialDatatransferComponent","componentFactoryResolver","datatransferFacadeFactory","configService","ngOnInit","Event","setConfig","amdHost","componentFactory","resolveComponentFactory","createComponent","instance","ComponentFactoryResolver","viewQuery","ViewChild","static","DemoService","title","testItems","appRef","AngularMaterialDatatransferModule","ApplicationRef","providers","imports","BrowserModule","BrowserAnimationsModule","FormsModule","ReactiveFormsModule","MatButtonModule","MatCheckboxModule","MatDialogModule","MatFormFieldModule","MatIconModule","MatInputModule","MatMenuModule","MatProgressBarModule","MatProgressSpinnerModule","MatSelectModule","MatTooltipModule","FlexLayoutModule","declarations","exports","NgModule","entryComponents"],"mappings":"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","sourcesContent":["export enum CustomEventType {\r\n    UNKNOWN,\r\n    // This event can be used to bootstrap the app module. An IAppConfig can be passed as detail payload.\r\n    CREATE,\r\n    // This event can be used to trigger an item download. The filename, url and size can be passed as detail payload.\r\n    DOWNLOAD_ITEM,\r\n    // This event can be used to update the app configuration. An IAppConfig can be passed as detail payload.\r\n    UPDATE_CONFIG,\r\n    // Indicates that the app has been initialized.\r\n    INIT,\r\n    // Indicates that the overall upload has been completed.\r\n    UPLOAD_COMPLETED,\r\n    // Indicates that the overall download has been completed.\r\n    DOWNLOAD_COMPLETED,\r\n    // Indicates that an item has been added. It will be passed a IDatatransferItem as detail payload.\r\n    ITEM_ADDED,\r\n    // Indicates that an item has been removed. It will be passed a IDatatransferItem as detail payload.\r\n    ITEM_REMOVED,\r\n    // Indicates that an item has been completed.\r\n    ITEM_COMPLETED,\r\n    // Indicates that all items have been cleared.\r\n    ITEMS_CLEARED,\r\n    // Indicates that an item have been clicked.\r\n    ITEM_CLICKED\r\n}\r\n\r\n// tslint:disable-next-line: no-namespace\r\nexport namespace CustomEventTypeExtensions {\r\n    const CUSTOM_EVENT_TYPE_NS = 'github:niklr/angular-material-datatransfer.';\r\n    const CUSTOM_EVENT_TYPE_UNKNOWN = CUSTOM_EVENT_TYPE_NS + 'unknown';\r\n    const CUSTOM_EVENT_TYPE_CREATE = CUSTOM_EVENT_TYPE_NS + 'create';\r\n    const CUSTOM_EVENT_TYPE_DOWNLOAD_ITEM = CUSTOM_EVENT_TYPE_NS + 'download-item';\r\n    const CUSTOM_EVENT_TYPE_UPDATE_CONFIG = CUSTOM_EVENT_TYPE_NS + 'update-config';\r\n    const CUSTOM_EVENT_TYPE_INIT = CUSTOM_EVENT_TYPE_NS + 'init';\r\n    const CUSTOM_EVENT_TYPE_UPLOAD_COMPLETED = CUSTOM_EVENT_TYPE_NS + 'upload-completed';\r\n    const CUSTOM_EVENT_TYPE_DOWNLOAD_COMPLETED = CUSTOM_EVENT_TYPE_NS + 'download-completed';\r\n    const CUSTOM_EVENT_TYPE_ITEM_ADDED = CUSTOM_EVENT_TYPE_NS + 'item-added';\r\n    const CUSTOM_EVENT_TYPE_ITEM_REMOVED = CUSTOM_EVENT_TYPE_NS + 'item-removed';\r\n    const CUSTOM_EVENT_TYPE_ITEM_COMPLETED = CUSTOM_EVENT_TYPE_NS + 'item-completed';\r\n    const CUSTOM_EVENT_TYPE_ITEMS_CLEARED = CUSTOM_EVENT_TYPE_NS + 'items-cleared';\r\n    const CUSTOM_EVENT_TYPE_ITEM_CLICKED = CUSTOM_EVENT_TYPE_NS + 'item-clicked';\r\n    export function toString(type: CustomEventType): string {\r\n        switch (type) {\r\n            case CustomEventType.CREATE:\r\n                return CUSTOM_EVENT_TYPE_CREATE;\r\n            case CustomEventType.DOWNLOAD_ITEM:\r\n                return CUSTOM_EVENT_TYPE_DOWNLOAD_ITEM;\r\n            case CustomEventType.UPDATE_CONFIG:\r\n                return CUSTOM_EVENT_TYPE_UPDATE_CONFIG;\r\n            case CustomEventType.INIT:\r\n                return CUSTOM_EVENT_TYPE_INIT;\r\n            case CustomEventType.UPLOAD_COMPLETED:\r\n                return CUSTOM_EVENT_TYPE_UPLOAD_COMPLETED;\r\n            case CustomEventType.DOWNLOAD_COMPLETED:\r\n                return CUSTOM_EVENT_TYPE_DOWNLOAD_COMPLETED;\r\n            case CustomEventType.ITEM_ADDED:\r\n                return CUSTOM_EVENT_TYPE_ITEM_ADDED;\r\n            case CustomEventType.ITEM_REMOVED:\r\n                return CUSTOM_EVENT_TYPE_ITEM_REMOVED;\r\n            case CustomEventType.ITEM_COMPLETED:\r\n                return CUSTOM_EVENT_TYPE_ITEM_COMPLETED;\r\n            case CustomEventType.ITEMS_CLEARED:\r\n                return CUSTOM_EVENT_TYPE_ITEMS_CLEARED;\r\n            case CustomEventType.ITEM_CLICKED:\r\n                return CUSTOM_EVENT_TYPE_ITEM_CLICKED;\r\n            default:\r\n                return CUSTOM_EVENT_TYPE_UNKNOWN;\r\n        }\r\n    }\r\n    export function toEnum(type: string): CustomEventType {\r\n        switch (type) {\r\n            case CUSTOM_EVENT_TYPE_CREATE:\r\n                return CustomEventType.CREATE;\r\n            case CUSTOM_EVENT_TYPE_DOWNLOAD_ITEM:\r\n                return CustomEventType.DOWNLOAD_ITEM;\r\n            case CUSTOM_EVENT_TYPE_UPDATE_CONFIG:\r\n                return CustomEventType.UPDATE_CONFIG;\r\n            case CUSTOM_EVENT_TYPE_INIT:\r\n                return CustomEventType.INIT;\r\n            case CUSTOM_EVENT_TYPE_UPLOAD_COMPLETED:\r\n                return CustomEventType.UPLOAD_COMPLETED;\r\n            case CUSTOM_EVENT_TYPE_DOWNLOAD_COMPLETED:\r\n                return CustomEventType.DOWNLOAD_COMPLETED;\r\n            case CUSTOM_EVENT_TYPE_ITEM_ADDED:\r\n                return CustomEventType.ITEM_ADDED;\r\n            case CUSTOM_EVENT_TYPE_ITEM_REMOVED:\r\n                return CustomEventType.ITEM_REMOVED;\r\n            case CUSTOM_EVENT_TYPE_ITEM_COMPLETED:\r\n                return CustomEventType.ITEM_COMPLETED;\r\n            case CUSTOM_EVENT_TYPE_ITEMS_CLEARED:\r\n                return CustomEventType.ITEMS_CLEARED;\r\n            case CUSTOM_EVENT_TYPE_ITEM_CLICKED:\r\n                return CustomEventType.ITEM_CLICKED;\r\n            default:\r\n                return CustomEventType.UNKNOWN;\r\n        }\r\n    }\r\n}\r\n","import { Directive, ViewContainerRef } from '@angular/core';\r\n\r\n@Directive({\r\n    // tslint:disable-next-line: directive-selector\r\n    selector: '[amd-host]',\r\n})\r\nexport class HostDirective {\r\n    constructor(public viewContainerRef: ViewContainerRef) { }\r\n}\r\n","export class CoreAppConfig {\r\n  showUploadDropzone = true;\r\n  uploadBrowseElementId = undefined;\r\n  uploadDropElementId = undefined;\r\n  paginationRppOptions = [5, 10, 25];\r\n  simultaneousDownloads = 2;\r\n  downloadMethod = \"GET\";\r\n  downloadHeaders: any = {};\r\n  downloadWithCredentials = false;\r\n  downloadXhrTimeout = 0;\r\n  preprocessHashEnabled = false;\r\n  preprocessHashChecked = true;\r\n  preprocessHashTarget = \"https://httpbin.org\";\r\n  preprocessHashMethod = \"GET\";\r\n  preprocessHashParameterName = \"hash\";\r\n  preprocessHashFileNameParameterName = \"filename\";\r\n  preprocessHashFunctionName = \"sha1\";\r\n  preprocessHashEncodingName = \"hex\";\r\n  preprocessHashInputEncodingName = \"latin1\";\r\n  preprocessHashTooltipContent =\r\n    \"The preprocess option checks if the file is already on the system before uploading.\";\r\n  saveDownloadFileAs: (response: any, name: string) => void = null;\r\n  parseMessageCallback = function (message) {\r\n    return message;\r\n  };\r\n  getTarget = function (request, params) {\r\n    let target;\r\n\r\n    if (request === \"preprocessHash\" && this.preprocessHashChecked) {\r\n      target = this.preprocessHashTarget;\r\n    }\r\n\r\n    if (typeof target === \"function\") {\r\n      return target(params);\r\n    }\r\n\r\n    if (target) {\r\n      const separator = target.indexOf(\"?\") < 0 ? \"?\" : \"&\";\r\n      const joinedParams = params.join(\"&\");\r\n\r\n      return target + separator + joinedParams;\r\n    } else {\r\n      return;\r\n    }\r\n  };\r\n}\r\n\r\nexport class ResumableJsAppConfig {\r\n  chunkSize = 1 * 1024 * 1024;\r\n  forceChunkSize = false;\r\n  simultaneousUploads = 3;\r\n  fileParameterName = \"file\";\r\n  chunkNumberParameterName = \"resumableChunkNumber\";\r\n  chunkSizeParameterName = \"resumableChunkSize\";\r\n  currentChunkSizeParameterName = \"resumableCurrentChunkSize\";\r\n  totalSizeParameterName = \"resumableTotalSize\";\r\n  typeParameterName = \"resumableType\";\r\n  identifierParameterName = \"resumableIdentifier\";\r\n  fileNameParameterName = \"resumableFilename\";\r\n  relativePathParameterName = \"resumableRelativePath\";\r\n  totalChunksParameterName = \"resumableTotalChunks\";\r\n  throttleProgressCallbacks = 0.5;\r\n  query = {};\r\n  headers = {};\r\n  preprocess = null;\r\n  preprocessFile = null;\r\n  method = \"multipart\";\r\n  uploadMethod = \"POST\";\r\n  testMethod = \"GET\";\r\n  prioritizeFirstAndLastChunk: false;\r\n  target = \"https://httpbin.org\";\r\n  testTarget = null;\r\n  parameterNamespace = \"\";\r\n  testChunks = true;\r\n  generateUniqueIdentifier = null;\r\n  getTarget = null;\r\n  maxChunkRetries = 100;\r\n  chunkRetryInterval = undefined;\r\n  permanentErrors = [400, 404, 405, 415, 501];\r\n  maxFiles = undefined;\r\n  withCredentials = false;\r\n  xhrTimeout = 0;\r\n  clearInput = true;\r\n  chunkFormat = \"blob\";\r\n  minFileSize = 1;\r\n  maxFileSize = undefined;\r\n  fileType = [];\r\n  maxFilesErrorCallback = function (files, errorCount) {\r\n    alert(\r\n      \"Please upload no more than \" +\r\n        this.maxFiles +\r\n        \" file\" +\r\n        (this.maxFiles === 1 ? \"\" : \"s\") +\r\n        \" at a time.\"\r\n    );\r\n  };\r\n  minFileSizeErrorCallback = function (file, errorCount) {\r\n    alert(\r\n      file.fileName ||\r\n        file.name +\r\n          \" is too small; please upload files larger than \" +\r\n          this.minFileSize +\r\n          \".\"\r\n    );\r\n  };\r\n  maxFileSizeErrorCallback = function (file, errorCount) {\r\n    alert(\r\n      file.fileName ||\r\n        file.name +\r\n          \" is too large; please upload files less than \" +\r\n          this.maxFileSize +\r\n          \".\"\r\n    );\r\n  };\r\n  fileTypeErrorCallback = function (file, errorCount) {\r\n    alert(\r\n      file.fileName ||\r\n        file.name +\r\n          \" has type not allowed; please upload files of type \" +\r\n          this.fileType +\r\n          \".\"\r\n    );\r\n  };\r\n}\r\n\r\nexport interface IAppConfig {\r\n  production: boolean;\r\n  core: CoreAppConfig;\r\n  resumablejs: ResumableJsAppConfig;\r\n}\r\n\r\nexport class AppConfig implements IAppConfig {\r\n  production = true;\r\n  core = new CoreAppConfig();\r\n  resumablejs = new ResumableJsAppConfig();\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { IAppConfig, AppConfig } from '../models/app-config.model';\r\n\r\n@Injectable()\r\nexport class ConfigService {\r\n\r\n    public static settings: IAppConfig = new AppConfig();\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    public load(config: IAppConfig) {\r\n        if (!!config) {\r\n            ConfigService.settings.production = config.production;\r\n            if (!!config.core) {\r\n                Object.keys(config.core).forEach(propertyName => {\r\n                    if (typeof config.core[propertyName] !== 'undefined') {\r\n                        ConfigService.settings.core[propertyName] = config.core[propertyName];\r\n                    }\r\n                });\r\n            }\r\n            if (!!config.resumablejs) {\r\n                Object.keys(config.resumablejs).forEach(propertyName => {\r\n                    if (typeof config.resumablejs[propertyName] !== 'undefined') {\r\n                        ConfigService.settings.resumablejs[propertyName] = config.resumablejs[propertyName];\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class DateUtil {\r\n    public now(): number {\r\n        return ((Date.now) ? Date.now() : (new Date()).getTime());\r\n    }\r\n\r\n    public format(seconds): string {\r\n        let date = new Date(seconds * 1000);\r\n        if (isNaN(date.getTime())) {\r\n            return undefined;\r\n        } else {\r\n            return ('0' + date.getUTCHours()).slice(-2) + ':' +\r\n                ('0' + date.getUTCMinutes()).slice(-2) + ':' +\r\n                ('0' + date.getUTCSeconds()).slice(-2);\r\n        }\r\n    }\r\n}\r\n","export enum DecimalByteUnit {\r\n\t/**\r\n\t * Byte (B)\r\n\t * 1 Byte\r\n\t */\r\n    Byte,\r\n\r\n\t/**\r\n\t * Kilobyte (kB)\r\n\t * 10^3 Byte = 1.000 Byte\r\n\t */\r\n    KB,\r\n\r\n\t/**\r\n\t * Megabyte (MB)\r\n\t * 10^6 Byte = 1.000.000 Byte\r\n\t */\r\n    MB,\r\n\r\n\t/**\r\n\t * Gigabyte (GB)\r\n\t * 10^9 Byte = 1.000.000.000 Byte\r\n\t */\r\n    GB,\r\n\r\n\t/**\r\n\t * Terabyte (TB)\r\n\t * 10^12 Byte = 1.000.000.000.000 Byte\r\n\t */\r\n    TB,\r\n\r\n\t/**\r\n\t * Petabyte (PB)\r\n\t * 10^15 Byte = 1.000.000.000.000.000 Byte\r\n\t */\r\n    PB\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","// @dynamic\r\nexport class EnumExtension {\r\n    static getNamesAndValues<T extends number>(e: any) {\r\n        return this.getNames(e).map(n => ({ name: n, value: e[n] as T }));\r\n    }\r\n\r\n    static getNames(e: any) {\r\n        return this.getObjValues(e).filter(v => typeof v === 'string') as string[];\r\n    }\r\n\r\n    static getValues<T extends number>(e: any) {\r\n        return this.getObjValues(e).filter(v => typeof v === 'number') as T[];\r\n    }\r\n\r\n    private static getObjValues(e: any): (number | string)[] {\r\n        return Object.keys(e).map(k => e[k]);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { EnumExtension } from '../extensions/enum.extension';\r\nimport { DecimalByteUnit } from '../enums/decimal-byte-unit.enum';\r\n\r\n@Injectable()\r\nexport class DecimalByteUnitUtil {\r\n    C_KB: number = Math.pow(10, 3);\r\n    C_MB: number = Math.pow(10, 6);\r\n    C_GB: number = Math.pow(10, 9);\r\n    C_TB: number = Math.pow(10, 12);\r\n    C_PB: number = Math.pow(10, 15);\r\n\r\n    MAX: number = Number.MAX_VALUE;\r\n\r\n    byteUnits = EnumExtension.getNames(DecimalByteUnit);\r\n\r\n    private multiply(number: number, multiplier: number): number {\r\n        const limit: number = this.MAX / multiplier;\r\n\r\n        if (number > limit) {\r\n            return Number.MAX_VALUE;\r\n        }\r\n        if (number < -limit) {\r\n            return Number.MIN_VALUE;\r\n        }\r\n\r\n        return number * multiplier;\r\n    }\r\n\r\n    public convert(number: number, fromUnit: DecimalByteUnit, toUnit: DecimalByteUnit): number {\r\n        const bytes: number = this.toBytes(number, fromUnit);\r\n        switch (toUnit) {\r\n            case DecimalByteUnit.Byte:\r\n                return bytes;\r\n            case DecimalByteUnit.KB:\r\n                return bytes / this.C_KB;\r\n            case DecimalByteUnit.MB:\r\n                return bytes / this.C_MB;\r\n            case DecimalByteUnit.GB:\r\n                return bytes / this.C_GB;\r\n            case DecimalByteUnit.TB:\r\n                return bytes / this.C_TB;\r\n            case DecimalByteUnit.PB:\r\n                return bytes / this.C_PB;\r\n        }\r\n        return number;\r\n    }\r\n\r\n    public toBytes(number: number, fromUnit: DecimalByteUnit): number {\r\n        switch (fromUnit) {\r\n            case DecimalByteUnit.Byte:\r\n                return number;\r\n            case DecimalByteUnit.KB:\r\n                return this.multiply(number, this.C_KB);\r\n            case DecimalByteUnit.MB:\r\n                return this.multiply(number, this.C_MB);\r\n            case DecimalByteUnit.GB:\r\n                return this.multiply(number, this.C_GB);\r\n            case DecimalByteUnit.TB:\r\n                return this.multiply(number, this.C_TB);\r\n            case DecimalByteUnit.PB:\r\n                return this.multiply(number, this.C_PB);\r\n        }\r\n        return number;\r\n    }\r\n\r\n    public format(number: number, fromUnit: DecimalByteUnit): [DecimalByteUnit, number] {\r\n        let result: [DecimalByteUnit, number];\r\n        result = [DecimalByteUnit.Byte, this.toBytes(number, fromUnit)];\r\n        for (const currentUnit of this.byteUnits) {\r\n            if (Math.abs(result[1]) < 1000) {\r\n                result[0] = DecimalByteUnit[currentUnit];\r\n                break;\r\n            } else {\r\n                result[1] /= 1000;\r\n            }\r\n        }\r\n        result[1] = Number(result[1].toFixed(2));\r\n        return result;\r\n    }\r\n}\r\n","import { ReflectiveInjector } from '@angular/core';\r\nimport { DecimalByteUnit } from '../enums/decimal-byte-unit.enum';\r\nimport { DecimalByteUnitUtil } from '../utils/decimal-byte-unit.util';\r\n\r\nexport interface ISizeContainer {\r\n    displayUnit: string;\r\n    displaySize: number;\r\n    decimalByteUnit: DecimalByteUnit;\r\n    decimalByteUnitSize: number;\r\n    update(init?: Partial<SizeContainer>): void;\r\n    updateDecimal(decimalByteUnit: DecimalByteUnit, decimalByteUnitSize: number): void;\r\n}\r\n\r\nexport class SizeContainer implements ISizeContainer {\r\n\r\n    private decimalByteUnitUtil: DecimalByteUnitUtil;\r\n\r\n    public displayUnit: string;\r\n    public displaySize: number;\r\n    public decimalByteUnit: DecimalByteUnit = DecimalByteUnit.MB;\r\n    public decimalByteUnitSize = 0;\r\n\r\n    public constructor(init?: Partial<SizeContainer>) {\r\n        let injector = ReflectiveInjector.resolveAndCreate([DecimalByteUnitUtil]);\r\n        this.decimalByteUnitUtil = injector.get(DecimalByteUnitUtil);\r\n        this.update(init);\r\n    }\r\n\r\n    public update(init?: Partial<SizeContainer>): void {\r\n        if (!!this.decimalByteUnitUtil && !!init && !!init.decimalByteUnitSize) {\r\n            this.updateDecimal(init.decimalByteUnit, init.decimalByteUnitSize);\r\n        }\r\n    }\r\n\r\n    public updateDecimal(decimalByteUnit: DecimalByteUnit, decimalByteUnitSize: number): void {\r\n        let convertResult: [DecimalByteUnit, number] =\r\n            this.decimalByteUnitUtil.format(decimalByteUnitSize, decimalByteUnit);\r\n\r\n        this.decimalByteUnit = convertResult[0];\r\n        this.decimalByteUnitSize = convertResult[1];\r\n\r\n        this.displayUnit = DecimalByteUnit[this.decimalByteUnit];\r\n        this.displaySize = !!this.decimalByteUnitSize ? this.decimalByteUnitSize : 0;\r\n    }\r\n}\r\n","export enum TransferStatus {\r\n    Ready,\r\n    Queued,\r\n    Preprocessing,\r\n    Uploading,\r\n    Downloading,\r\n    Finished,\r\n    Failed\r\n}\r\n","import { ReflectiveInjector } from '@angular/core';\r\nimport { DateUtil } from '../utils/date.util';\r\nimport { ISizeContainer, SizeContainer } from './size-container.model';\r\nimport { DecimalByteUnit } from '../enums/decimal-byte-unit.enum';\r\n\r\nexport interface IProgressContainer {\r\n    total: number; // bytes\r\n    progressTimestamp: number; // milliseconds\r\n    bitrateTimestamp: number; // milliseconds\r\n    bitrate: number; // bit/s\r\n    percent: number; // 0-100\r\n    displayBitrate: string;\r\n    displayTimeLeft: string;\r\n    loadedSizeContainer: ISizeContainer;\r\n    totalSizeContainer: ISizeContainer;\r\n    reset(total: number): void;\r\n    updateProgress(now: number, loaded: number, interval: number): void;\r\n    updateBitrate(now: number, loaded: number, interval: number): void;\r\n}\r\n\r\nexport class ProgressContainer implements IProgressContainer {\r\n    private dateUtil: DateUtil;\r\n    private loaded: number; // bytes\r\n    private bitrateSizeContainer: ISizeContainer;\r\n\r\n    public total: number;\r\n    public progressTimestamp: number;\r\n    public bitrateTimestamp: number;\r\n    public bitrate: number;\r\n    public percent: number;\r\n    public displayBitrate: string;\r\n    public displayTimeLeft: string;\r\n    public loadedSizeContainer: ISizeContainer;\r\n    public totalSizeContainer: ISizeContainer;\r\n\r\n    public constructor(total: number) {\r\n        const injector = ReflectiveInjector.resolveAndCreate([DateUtil]);\r\n        this.dateUtil = injector.get(DateUtil);\r\n\r\n        this.bitrateSizeContainer = new SizeContainer();\r\n        this.loadedSizeContainer = new SizeContainer();\r\n        this.totalSizeContainer = new SizeContainer();\r\n        this.reset(total);\r\n    }\r\n\r\n    public reset(total: number): void {\r\n        this.progressTimestamp = this.dateUtil.now();\r\n        this.bitrateTimestamp = this.dateUtil.now();\r\n        this.loaded = 0;\r\n        this.bitrate = 0;\r\n        this.percent = 0;\r\n        this.total = total;\r\n        this.displayBitrate = undefined;\r\n        this.displayTimeLeft = undefined;\r\n        this.bitrateSizeContainer.updateDecimal(DecimalByteUnit.Byte, this.bitrate);\r\n        this.loadedSizeContainer.updateDecimal(DecimalByteUnit.Byte, this.loaded);\r\n        this.totalSizeContainer.updateDecimal(DecimalByteUnit.Byte, this.total);\r\n    }\r\n\r\n    public updateProgress(now: number, loaded: number, interval: number): void {\r\n        const timeDiff = now - this.progressTimestamp;\r\n        // console.log('loaded: ' + loaded + ' total: ' + this.total);\r\n        if (!this.percent || timeDiff > interval) {\r\n            this.percent = Number((loaded / this.total * 100).toFixed(2));\r\n            this.loaded = loaded;\r\n            this.loadedSizeContainer.updateDecimal(DecimalByteUnit.Byte, this.loaded);\r\n            this.progressTimestamp = now;\r\n            if (this.bitrate > 0) {\r\n                this.displayTimeLeft = this.dateUtil.format((this.total - this.loaded) * 8 / this.bitrate);\r\n            } else {\r\n                this.displayTimeLeft = this.dateUtil.format(0);\r\n            }\r\n        } else if (loaded >= this.total) {\r\n            this.percent = 100;\r\n            this.loaded = this.total;\r\n        }\r\n    }\r\n\r\n    public updateBitrate(now: number, loaded: number, interval: number): void {\r\n        const timeDiff = now - this.bitrateTimestamp;\r\n        if (!this.bitrate || timeDiff > interval) {\r\n            this.bitrate = (loaded - this.loaded) * (1000 / timeDiff) * 8;\r\n            if (this.bitrate === Number.POSITIVE_INFINITY || this.bitrate === Number.NEGATIVE_INFINITY) {\r\n                this.bitrate = 0;\r\n            }\r\n            this.bitrateSizeContainer.updateDecimal(DecimalByteUnit.Byte, this.bitrate / 8);\r\n            this.displayBitrate = this.bitrateSizeContainer.displaySize + ' ' + this.bitrateSizeContainer.displayUnit + '/s';\r\n            this.bitrateTimestamp = now;\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { IDatatransferItem } from '../models/datatransfer-item.model';\r\nimport { IProgressContainer, ProgressContainer } from '../models/progress-container.model';\r\nimport { TransferStatus } from '../enums/transfer-status.enum';\r\n\r\n@Injectable()\r\nexport class DatatransferStore {\r\n\r\n    private items: IDatatransferItem[] = [];\r\n\r\n    public count = 0;\r\n    public failedCount = 0;\r\n    public uploadProgress: IProgressContainer = new ProgressContainer(0);\r\n    public downloadProgress: IProgressContainer = new ProgressContainer(0);\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    private updateCount(): void {\r\n        this.count = this.items.length;\r\n    }\r\n\r\n    public updateFailedCount(): void {\r\n        this.failedCount = this.getByStatus(TransferStatus.Failed).length;\r\n    }\r\n\r\n    public getItems(): IDatatransferItem[] {\r\n        return this.items;\r\n    }\r\n\r\n    public getSelected(): IDatatransferItem[] {\r\n        return this.items.filter((item) => item.isSelected === true);\r\n    }\r\n\r\n    public getById(id: string): IDatatransferItem {\r\n        return this.items.find((item) => item.id === id);\r\n    }\r\n\r\n    public getIndexById(id: string): number {\r\n        return this.items.findIndex(i => i.id === id);\r\n    }\r\n\r\n    public clear(): void {\r\n        this.items.length = 0;\r\n        this.updateCount();\r\n        this.updateFailedCount();\r\n    }\r\n\r\n    public addItem(item: IDatatransferItem): void {\r\n        this.items.push(item);\r\n        this.updateCount();\r\n    }\r\n\r\n    public removeById(id: string): void {\r\n        const index: number = this.getIndexById(id);\r\n        if (index > -1) {\r\n            this.items.splice(index, 1);\r\n            this.updateCount();\r\n        }\r\n    }\r\n\r\n    public getByStatus(status: TransferStatus) {\r\n        return this.items.filter((item) => item.status === status);\r\n    }\r\n}\r\n","export interface IPaginationContainer {\r\n    pages: number[];\r\n    page: number;\r\n    rpp: number;\r\n    total: number;\r\n    rppOptions: number[];\r\n}\r\n\r\nexport class PaginationContainer implements IPaginationContainer {\r\n    public pages: number[];\r\n    public page: number;\r\n    public rpp: number;\r\n    public total: number;\r\n    public rppOptions: number[];\r\n\r\n    constructor() {\r\n        this.pages = [];\r\n        this.page = 1;\r\n        this.rpp = 5;\r\n        this.total = 0;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { IPaginationContainer, PaginationContainer } from '../models/pagination-container.model';\r\nimport { IDatatransferItem } from '../models/datatransfer-item.model';\r\nimport { DatatransferStore } from '../stores/datatransfer.store';\r\n\r\n@Injectable()\r\nexport class PaginationService {\r\n\r\n    public pagination: IPaginationContainer;\r\n    public paginatedItems: IDatatransferItem[] = [];\r\n\r\n    constructor(private datatransferStore: DatatransferStore) {\r\n        this.pagination = new PaginationContainer();\r\n    }\r\n\r\n    setRppOptions(rppOptions: number[]): void {\r\n        this.pagination.rppOptions = rppOptions;\r\n        this.setPaginationContainer();\r\n    }\r\n\r\n    update(total: number): void {\r\n        if (total <= 0) {\r\n            this.paginatedItems.length = 0;\r\n        }\r\n        this.pagination.total = total;\r\n        this.setPaginationContainer();\r\n    }\r\n\r\n    setPaginationContainer(): void {\r\n        const pageCount: number = this.pageCount();\r\n        if (this.pagination.pages.length > pageCount) {\r\n            this.pagination.pages.splice(pageCount);\r\n        } else {\r\n            for (let i = this.pagination.pages.length; i < pageCount; i++) {\r\n                this.pagination.pages.push(i + 1);\r\n            }\r\n        }\r\n        if (!this.pagination.pages.includes(this.pagination.page)) {\r\n            this.pagination.page = 1;\r\n        }\r\n        if (!!this.pagination.rppOptions && this.pagination.rppOptions.length > 0\r\n            && !this.pagination.rppOptions.includes(this.pagination.rpp)) {\r\n            this.pagination.rpp = this.pagination.rppOptions[0];\r\n        }\r\n        this.onPaginationChange();\r\n    }\r\n\r\n    max(): number {\r\n        return this.hasNext() ? this.pagination.page * this.pagination.rpp : this.pagination.total;\r\n    }\r\n\r\n    min(): number {\r\n        return this.pagination.total > 0 ? this.pagination.page * this.pagination.rpp - this.pagination.rpp + 1 : 0;\r\n    }\r\n\r\n    first(): void {\r\n        this.pagination.page = 1;\r\n        this.onPaginationChange();\r\n    }\r\n\r\n    last(): void {\r\n        this.pagination.page = this.pageCount();\r\n        this.onPaginationChange();\r\n    }\r\n\r\n    hasNext(): boolean {\r\n        return this.pagination.page * this.pagination.rpp < this.pagination.total;\r\n    }\r\n\r\n    hasPrevious(): boolean {\r\n        return this.pagination.page > 1;\r\n    }\r\n\r\n    moveNext(): void {\r\n        this.pagination.page++;\r\n        this.onPaginationChange();\r\n    }\r\n\r\n    movePrevious(): void {\r\n        this.pagination.page--;\r\n        this.onPaginationChange();\r\n    }\r\n\r\n    setPage(page: number) {\r\n        this.pagination.page = page;\r\n        this.onPageChange();\r\n    }\r\n\r\n    onPageChange(): void {\r\n        this.setPaginationContainer();\r\n        this.onPaginationChange();\r\n    }\r\n\r\n    onRppChange(): void {\r\n        this.setPaginationContainer();\r\n        this.pagination.page = 1;\r\n        this.onPaginationChange();\r\n    }\r\n\r\n    onPaginationChange(): void {\r\n        const startIndex = (this.pagination.page - 1) * this.pagination.rpp;\r\n        const endIndex = Math.min(startIndex + this.pagination.rpp, this.pagination.total);\r\n        this.paginatedItems = this.datatransferStore.getItems().slice(startIndex, endIndex);\r\n    }\r\n\r\n    pageCount(): number {\r\n        return this.pagination.total > 0 ? Math.ceil(this.pagination.total / (this.pagination.rpp > 0 ? this.pagination.rpp : 1)) : 1;\r\n    }\r\n\r\n    getPageByItemId(id: string): number {\r\n        const index: number = this.datatransferStore.getIndexById(id);\r\n        if (index > -1) {\r\n            return Math.ceil((index + 1) / this.pagination.rpp);\r\n        }\r\n    }\r\n\r\n    setPageByItemId(id: string): void {\r\n        const page = this.getPageByItemId(id);\r\n        if (this.pagination.page !== page) {\r\n            this.setPage(page);\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ConfigService } from './config.service';\r\n\r\n// From: https://github.com/angular/angular/issues/5458\r\n@Injectable()\r\nexport class LoggerService {\r\n\r\n    private get enabled(): boolean {\r\n        return !ConfigService.settings.production;\r\n    }\r\n\r\n    noop = () => { };\r\n\r\n    constructor() {\r\n    }\r\n\r\n    get debug() {\r\n        if (this.enabled) {\r\n            return console.debug.bind(console);\r\n        }\r\n        return this.noop;\r\n    }\r\n\r\n    get error() {\r\n        if (this.enabled) {\r\n            return console.error.bind(console);\r\n        }\r\n        return this.noop;\r\n    }\r\n\r\n    get log() {\r\n        if (this.enabled) {\r\n            return console.log.bind(console);\r\n        }\r\n        return this.noop;\r\n    }\r\n\r\n    get info() {\r\n        if (this.enabled) {\r\n            return console.info.bind(console);\r\n        }\r\n        return this.noop;\r\n    }\r\n\r\n    get warn() {\r\n        if (this.enabled) {\r\n            return console.warn.bind(console);\r\n        }\r\n        return this.noop;\r\n    }\r\n}\r\n","<mat-form-field>\r\n    <mat-select placeholder=\"Page\" [(ngModel)]=\"paginationService.pagination.page\" (change)=\"onPageChange()\" aria-label=\"Page\">\r\n        <mat-option *ngFor=\"let p of paginationService.pagination.pages\" [value]=\"p\">\r\n            {{ p }}\r\n        </mat-option>\r\n    </mat-select>\r\n</mat-form-field>\r\n<mat-form-field>\r\n    <mat-select placeholder=\"Rows per page\" [(ngModel)]=\"paginationService.pagination.rpp\" (change)=\"onRppChange()\" aria-label=\"Rows per page\">\r\n        <mat-option *ngFor=\"let o of paginationService.pagination.rppOptions\" [value]=\"o\">\r\n            {{ o }}\r\n        </mat-option>\r\n    </mat-select>\r\n</mat-form-field>\r\n<span>{{min()}} - {{max()}} of {{paginationService.pagination.total}}</span>\r\n<button mat-icon-button mat-button (click)=\"movePrevious()\" [disabled]=\"!hasPrevious()\">\r\n    <mat-icon>navigate_before</mat-icon>\r\n</button>\r\n<button mat-icon-button mat-button (click)=\"moveNext()\" [disabled]=\"!hasNext()\">\r\n    <mat-icon>navigate_next</mat-icon>\r\n</button>","import { Component, Input } from '@angular/core';\r\nimport { PaginationService } from '../services/pagination.service';\r\nimport { LoggerService } from '../services/logger.service';\r\n\r\n@Component({\r\n    // tslint:disable-next-line:component-selector\r\n    selector: 'amd-pagination',\r\n    templateUrl: 'pagination.component.html'\r\n})\r\n\r\nexport class PaginationComponent {\r\n\r\n    @Input() paginationService: PaginationService;\r\n\r\n    constructor(private logger: LoggerService) { }\r\n\r\n    max(): number {\r\n        return this.paginationService.max();\r\n    };\r\n\r\n    min(): number {\r\n        return this.paginationService.min();\r\n    };\r\n\r\n    first(): void {\r\n        this.paginationService.first();\r\n    }\r\n\r\n    last(): void {\r\n        this.paginationService.last();\r\n    }\r\n\r\n    hasNext(): boolean {\r\n        return this.paginationService.hasNext();\r\n    }\r\n\r\n    hasPrevious(): boolean {\r\n        return this.paginationService.hasPrevious();\r\n    };\r\n\r\n    moveNext(): void {\r\n        this.paginationService.moveNext();\r\n    }\r\n\r\n    movePrevious(): void {\r\n        this.paginationService.movePrevious();\r\n    }\r\n\r\n    onPageChange(): void {\r\n        this.paginationService.onPageChange();\r\n    }\r\n\r\n    onRppChange(): void {\r\n        this.paginationService.onRppChange();\r\n    }\r\n\r\n    onPaginationChange(): void {\r\n        this.paginationService.onPaginationChange();\r\n    }\r\n\r\n    pageCount(): number {\r\n        return this.paginationService.pageCount();\r\n    }\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    // tslint:disable-next-line:component-selector\r\n    selector: 'amd-dropzone',\r\n    templateUrl: 'dropzone.component.html'\r\n})\r\n\r\nexport class DropzoneComponent {\r\n\r\n    constructor() { }\r\n}\r\n","<div style=\"font-size: 11px; margin-top: 10px;\">\r\n    <div fxFlex=\"25%\" fxFlex.lt-md=\"50%\">\r\n        {{progressContainer.displayBitrate}}\r\n    </div>\r\n    <div fxFlex=\"25%\" fxHide.lt-md style=\"text-align: center\">\r\n        {{progressContainer.displayTimeLeft}}\r\n    </div>\r\n    <div fxFlex=\"25%\" fxHide.lt-md style=\"text-align: center\">\r\n        {{progressContainer.percent}}%\r\n    </div>\r\n    <div fxFlex=\"25%\" fxFlex.lt-md=\"50%\" style=\"text-align: right\">\r\n        {{progressContainer.loadedSizeContainer.displaySize}} / {{progressContainer.totalSizeContainer.displaySize}} {{progressContainer.totalSizeContainer.displayUnit}}\r\n    </div>\r\n</div>\r\n<mat-progress-bar *ngIf=\"progressContainer.total > 0\" [value]=\"progressContainer.percent\">\r\n</mat-progress-bar>","<div class=\"amd-dropzone\" id=\"amd-dropzone-component\">\r\n    <div class=\"amd-dropzone-content\">\r\n        <mat-icon style=\"font-size: 64px; color: rgba(255, 255, 255, 1);\">insert_drive_file</mat-icon>\r\n        <mat-icon style=\"margin-left: 10px;\">add_circle_outline</mat-icon>\r\n        <p>Drop your files/folders here or click to upload.</p>\r\n    </div>\r\n</div>","import { Component, Input } from '@angular/core';\r\nimport { IProgressContainer } from '../models/progress-container.model';\r\n\r\n@Component({\r\n    // tslint:disable-next-line:component-selector\r\n    selector: 'amd-progress',\r\n    templateUrl: 'progress.component.html'\r\n})\r\n\r\nexport class ProgressComponent {\r\n\r\n    @Input() progressContainer: IProgressContainer;\r\n\r\n    constructor() { }\r\n}\r\n","<div class=\"amd-font\">\r\n    <div *ngIf=\"config.core.showUploadDropzone\">\r\n        <amd-dropzone></amd-dropzone>\r\n    </div>\r\n\r\n    <div fxLayout=\"row\" fxLayout.lt-sm=\"column\" style=\"margin-bottom: 10px\">\r\n        <div fxFlex>\r\n            <button class=\"amd-mr-1\" mat-raised-button *ngIf=\"datatransferFacade.showStartButton()\"\r\n                (click)=\"datatransferFacade.startAll()\">\r\n                <mat-icon>play_arrow</mat-icon> Start\r\n            </button>\r\n            <button class=\"amd-mr-1\" mat-raised-button *ngIf=\"datatransferFacade.showPauseButton()\"\r\n                (click)=\"datatransferFacade.pauseAll()\">\r\n                <mat-icon>pause</mat-icon> Pause\r\n            </button>\r\n            <button class=\"amd-mr-1\" mat-raised-button *ngIf=\"datatransferFacade.showRemoveButton()\"\r\n                (click)=\"datatransferFacade.removeAll()\">\r\n                <mat-icon>close</mat-icon> Remove all\r\n            </button>\r\n            <button class=\"amd-mr-1\" mat-raised-button *ngIf=\"datatransferFacade.showRetryButton()\"\r\n                (click)=\"datatransferFacade.retryAll()\">\r\n                <mat-icon>refresh</mat-icon> Retry ({{datatransferStore.failedCount}})\r\n            </button>\r\n            <mat-menu #exportMenu=\"matMenu\">\r\n                <button mat-menu-item (click)=\"datatransferFacade.export('CSV')\">\r\n                    <span>CSV</span>\r\n                </button>\r\n                <button mat-menu-item (click)=\"datatransferFacade.export('JSON')\">\r\n                    <span>JSON</span>\r\n                </button>\r\n            </mat-menu>\r\n            <button mat-raised-button *ngIf=\"datatransferFacade.showExportButton()\" [matMenuTriggerFor]=\"exportMenu\">\r\n                Export\r\n                <mat-icon>expand_more</mat-icon>\r\n            </button>\r\n            <mat-checkbox *ngIf=\"datatransferFacade.showPreprocessingCheckbox()\"\r\n                [(ngModel)]=\"config.core.preprocessHashChecked\" style=\"margin-left: 10px;\">\r\n                Preprocessing <span *ngIf=\"datatransferFacade.showPreprocessingTooltip()\"\r\n                    class=\"amd-vertical-align-middle\" [matTooltip]=\"config.core.preprocessHashTooltipContent\"\r\n                    matTooltipPosition=\"right\">\r\n                    <mat-icon>info_outline</mat-icon>\r\n                </span>\r\n            </mat-checkbox>\r\n        </div>\r\n        <div fxFlex=\"70px\" fxFlex.lt-sm=\"0px\">\r\n        </div>\r\n        <div fxFlex>\r\n            <div *ngIf=\"uploadProgress.percent > 0\">\r\n                <amd-progress [progressContainer]=\"uploadProgress\"></amd-progress>\r\n            </div>\r\n            <div *ngIf=\"downloadProgress.percent > 0\">\r\n                <amd-progress [progressContainer]=\"downloadProgress\"></amd-progress>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"amd-container\">\r\n        <div fxLayout=\"row\" class=\"amd-container-header\" style=\"align-items: center;\">\r\n            <div fxFlex=\"40px\">\r\n                <mat-checkbox (change)=\"datatransferFacade.toggleVisible($event.checked)\"></mat-checkbox>\r\n            </div>\r\n            <div fxFlex=\"50%\" fxFlex.lt-sm=\"100%\">\r\n                Filename\r\n            </div>\r\n            <div fxFlex=\"50%\" style=\"padding-left: 40px;\" fxHide.lt-sm>\r\n                Progress\r\n            </div>\r\n            <div fxFlex=\"20px\">\r\n                <mat-menu #batchItemMenu=\"matMenu\">\r\n                    <button mat-menu-item (click)=\"datatransferFacade.removeSelected()\">\r\n                        <mat-icon>close</mat-icon>\r\n                        <span>Remove</span>\r\n                    </button>\r\n                </mat-menu>\r\n                <button mat-icon-button [matMenuTriggerFor]=\"batchItemMenu\">\r\n                    <mat-icon>more_vert</mat-icon>\r\n                </button>\r\n            </div>\r\n        </div>\r\n        <ng-template ngFor let-item [ngForOf]=\"paginationService.paginatedItems\" let-i=\"index\">\r\n            <div *ngIf=\"datatransferFacade.showPath(paginationService.paginatedItems, i)\">\r\n                <div fxLayout=\"row\" class=\"amd-container-headline\">\r\n                    <div fxFlex class=\"amd-container-headline-item\">\r\n                        <div class=\"amd-container-headline-item-entry\">\r\n                            <div fxFlex=\"40px\">\r\n                                <mat-icon>folder_open</mat-icon>\r\n                            </div>\r\n                            <div fxFlex>\r\n                                <span>\r\n                                    <b>{{item.displayPath}}</b>\r\n                                </span>\r\n                                <button mat-icon-button (click)=\"datatransferFacade.openEditPathDialog(item)\"\r\n                                    *ngIf=\"datatransferFacade.showEditDialog(item)\">\r\n                                    <mat-icon aria-label=\"Edit path\">edit</mat-icon>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div fxLayout=\"row\" fxLayout.lt-sm=\"column\" class=\"amd-container-row\"\r\n                [ngClass]=\"{'selected': item.isSelected}\" (click)=\"datatransferFacade.itemClick(item)\">\r\n                <div fxFlex class=\"amd-container-row-item\">\r\n                    <div class=\"amd-container-row-item-entry\">\r\n                        <div fxFlex=\"40px\">\r\n                            <mat-checkbox [(ngModel)]=\"item.isSelected\"></mat-checkbox>\r\n                        </div>\r\n                        <div fxFlex=\"100%\">\r\n                            <div matTooltip=\"{{item.name}}\" matTooltipPosition=\"above\">\r\n                                <span>{{item.name}}</span>\r\n                                <button mat-icon-button (click)=\"datatransferFacade.openEditFilenameDialog(item)\"\r\n                                    *ngIf=\"datatransferFacade.showEditDialog(item)\">\r\n                                    <mat-icon aria-label=\"Edit filename\">edit</mat-icon>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div fxFlex class=\"amd-container-row-item\">\r\n                    <div class=\"amd-container-row-item-entry\">\r\n                        <div fxFlex=\"40px\" matTooltip=\"{{item.preprocessContainer.percent}}%\"\r\n                            *ngIf=\"datatransferFacade.showSpinner(item); else showStatusClass\">\r\n                            <mat-progress-spinner *ngIf=\"item.preprocessContainer.percent > 0\" [diameter]=\"20\"\r\n                                mode=\"determinate\" [value]=\"item.preprocessContainer.percent\"></mat-progress-spinner>\r\n                        </div>\r\n                        <ng-template #showStatusClass>\r\n                            <div fxFlex=\"40px\">\r\n                                <mat-icon>{{datatransferFacade.getStatusClass(item.status)}}</mat-icon>\r\n                            </div>\r\n                        </ng-template>\r\n                        <div fxFlex=\"100%\">\r\n                            <div *ngIf=\"datatransferFacade.showProgressbar(item); else showStatusBlock\">\r\n                                <div class=\"amd-container-row-item-entry-stats\">\r\n                                    <div fxFlex=\"25%\" fxFlex.lt-md=\"50%\">\r\n                                        {{item.progressContainer.displayBitrate}}\r\n                                    </div>\r\n                                    <div fxFlex=\"25%\" fxHide.lt-md style=\"text-align: center\">\r\n                                        {{item.progressContainer.displayTimeLeft}}\r\n                                    </div>\r\n                                    <div fxFlex=\"25%\" fxHide.lt-md style=\"text-align: center\">\r\n                                        {{item.progressContainer.percent}}%\r\n                                    </div>\r\n                                    <div fxFlex=\"25%\" fxFlex.lt-md=\"50%\" style=\"text-align: right\">\r\n                                        {{item.progressContainer.loadedSizeContainer.displaySize}} /\r\n                                        {{item.sizeContainer.displaySize}}\r\n                                        {{item.sizeContainer.displayUnit}}\r\n                                    </div>\r\n                                </div>\r\n                                <mat-progress-bar *ngIf=\"item.progressContainer.total > 0\" color=\"primary\"\r\n                                    mode=\"determinate\" [value]=\"item.progressContainer.percent\">\r\n                                </mat-progress-bar>\r\n                            </div>\r\n                            <ng-template #showStatusBlock>\r\n                                {{item.getStatusName()}} ({{item.sizeContainer.displaySize}}\r\n                                {{item.sizeContainer.displayUnit}})\r\n                                <div *ngIf=\"!!item.message\">\r\n                                    <small>{{datatransferFacade.parseMessage(item)}}</small>\r\n                                </div>\r\n                            </ng-template>\r\n                        </div>\r\n                        <div fxFlex=\"20px\">\r\n                            <mat-menu #itemMenu=\"matMenu\">\r\n                                <button mat-menu-item (click)=\"datatransferFacade.retryItem(item)\"\r\n                                    *ngIf=\"datatransferFacade.showRetryButtonByItem(item)\">\r\n                                    <mat-icon>refresh</mat-icon>\r\n                                    <span>Retry</span>\r\n                                </button>\r\n                                <button mat-menu-item (click)=\"datatransferFacade.removeItem(item)\">\r\n                                    <mat-icon>close</mat-icon>\r\n                                    <span>Remove</span>\r\n                                </button>\r\n                            </mat-menu>\r\n                            <button mat-icon-button [matMenuTriggerFor]=\"itemMenu\">\r\n                                <mat-icon>more_vert</mat-icon>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </ng-template>\r\n    </div>\r\n\r\n    <div style=\"font-size: 12px; margin-top: 20px; text-align: right;\">\r\n        <amd-pagination [paginationService]=\"paginationService\"></amd-pagination>\r\n    </div>\r\n</div>\r\n","import { Component, Input, AfterViewInit } from '@angular/core';\r\nimport { IAppConfig } from '../models/app-config.model';\r\nimport { DatatransferFacade } from '../facades/datatransfer.facade';\r\nimport { IProgressContainer } from '../models/progress-container.model';\r\nimport { ConfigService } from '../services/config.service';\r\nimport { PaginationService } from '../services/pagination.service';\r\nimport { DatatransferStore } from '../stores/datatransfer.store';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'amd-main',\r\n  templateUrl: './main.component.html'\r\n})\r\nexport class MainComponent implements AfterViewInit {\r\n\r\n  @Input()\r\n  datatransferFacade: DatatransferFacade;\r\n\r\n  config: IAppConfig;\r\n  uploadProgress: IProgressContainer;\r\n  downloadProgress: IProgressContainer;\r\n\r\n  constructor(public datatransferStore: DatatransferStore, public paginationService: PaginationService) {\r\n    this.config = ConfigService.settings;\r\n    this.uploadProgress = this.datatransferStore.uploadProgress;\r\n    this.downloadProgress = this.datatransferStore.downloadProgress;\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.init();\r\n  }\r\n\r\n  private init(): void {\r\n    if (this.config.core.showUploadDropzone) {\r\n      const dropzoneElement = document.getElementById('amd-dropzone-component');\r\n      if (dropzoneElement) {\r\n        dropzoneElement.addEventListener('click', this.datatransferFacade.openBrowseDialog.bind(this.datatransferFacade), false);\r\n        this.datatransferFacade.assignUploadDrop(dropzoneElement);\r\n      }\r\n    } else {\r\n      if (typeof this.config.core.uploadBrowseElementId !== 'undefined') {\r\n        const uploadBrowseElement = document.getElementById(this.config.core.uploadBrowseElementId);\r\n        if (uploadBrowseElement) {\r\n          uploadBrowseElement.addEventListener('click', this.datatransferFacade.openBrowseDialog.bind(this.datatransferFacade), false);\r\n        }\r\n      }\r\n      if (typeof this.config.core.uploadDropElementId !== 'undefined') {\r\n        const uploadDropElement = document.getElementById(this.config.core.uploadDropElementId);\r\n        if (uploadDropElement) {\r\n          this.datatransferFacade.assignUploadDrop(uploadDropElement);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","export enum TransferType {\r\n    Upload,\r\n    Download\r\n}\r\n","import { Component, Inject, AfterViewInit } from \"@angular/core\";\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from \"@angular/material/dialog\";\r\nimport { DatatransferFacade } from \"../facades/datatransfer.facade\";\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: \"amd-browse-dialog\",\r\n  templateUrl: \"browse-dialog.component.html\",\r\n})\r\nexport class BrowseDialogComponent implements AfterViewInit {\r\n  datatransferFacade: DatatransferFacade;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<BrowseDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any\r\n  ) {\r\n    this.datatransferFacade = <DatatransferFacade>this.data.datatransferFacade;\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.datatransferFacade.assignUploadBrowse(\r\n      document.getElementById(\"amd-browse-files\")\r\n    );\r\n    this.datatransferFacade.assignUploadBrowse(\r\n      document.getElementById(\"amd-browse-folder\"),\r\n      true\r\n    );\r\n  }\r\n\r\n  close(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onNoClick(): void {\r\n    this.close();\r\n  }\r\n}\r\n","<div *ngIf=\"mode === 'edit-path'\">\r\n    <mat-dialog-content>\r\n        <p>Enter a new path:</p>\r\n        <form>\r\n            <mat-form-field>\r\n                <input matInput autocomplete=\"off\" tabindex=\"1\" [value]=\"itemPath\"\r\n                    (input)=\"itemPath = $event.target.value; errorMessage = undefined;\" [formControl]=\"editFormControl\">\r\n            </mat-form-field>\r\n            <mat-error *ngIf=\"errorMessage\">\r\n                {{errorMessage}}\r\n            </mat-error>\r\n        </form>\r\n    </mat-dialog-content>\r\n    <mat-dialog-actions>\r\n        <button mat-raised-button (click)=\"editPath()\" tabindex=\"2\">Ok</button>\r\n        <button mat-raised-button (click)=\"close()\" tabindex=\"-1\">Cancel</button>\r\n    </mat-dialog-actions>\r\n</div>\r\n<div *ngIf=\"mode === 'edit-filename'\">\r\n    <mat-dialog-content>\r\n        <p>Enter a new filename:</p>\r\n        <form>\r\n            <mat-form-field>\r\n                <input matInput autocomplete=\"off\" tabindex=\"1\" [value]=\"itemName\"\r\n                    (input)=\"itemName = $event.target.value; errorMessage = undefined;\" [formControl]=\"editFormControl\">\r\n            </mat-form-field>\r\n            <mat-error *ngIf=\"errorMessage\">\r\n                {{errorMessage}}\r\n            </mat-error>\r\n        </form>\r\n    </mat-dialog-content>\r\n    <mat-dialog-actions>\r\n        <button mat-raised-button (click)=\"editFilename()\" tabindex=\"2\">Ok</button>\r\n        <button mat-raised-button (click)=\"close()\" tabindex=\"-1\">Cancel</button>\r\n    </mat-dialog-actions>\r\n</div>","<mat-dialog-content>Select specific files or a folder</mat-dialog-content>\r\n<mat-dialog-actions>\r\n    <button mat-raised-button id=\"amd-browse-files\" (click)=\"close()\" tabindex=\"1\">\r\n        <mat-icon>insert_drive_file</mat-icon> Files</button>\r\n    <button mat-raised-button id=\"amd-browse-folder\" (click)=\"close()\" tabindex=\"2\">\r\n        <mat-icon>folder_open</mat-icon> Folder</button>\r\n</mat-dialog-actions>","import { Component, Inject, AfterViewInit } from \"@angular/core\";\r\nimport { FormControl } from \"@angular/forms\";\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from \"@angular/material/dialog\";\r\nimport { DatatransferFacade } from \"../facades/datatransfer.facade\";\r\nimport { IDatatransferItem } from \"../models/datatransfer-item.model\";\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: \"amd-edit-dialog\",\r\n  templateUrl: \"edit-dialog.component.html\",\r\n})\r\nexport class EditDialogComponent implements AfterViewInit {\r\n  datatransferFacade: DatatransferFacade;\r\n  mode: string;\r\n  item: IDatatransferItem;\r\n  itemPath: string;\r\n  itemName: string;\r\n  errorMessage: string;\r\n  editFormControl: FormControl;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<EditDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any\r\n  ) {\r\n    this.datatransferFacade = <DatatransferFacade>this.data.datatransferFacade;\r\n    this.mode = this.data.mode;\r\n    this.item = <IDatatransferItem>this.data.item;\r\n    this.itemPath = this.item.path;\r\n    this.itemName = this.item.name;\r\n\r\n    this.editFormControl = new FormControl(\"\", []);\r\n  }\r\n\r\n  ngAfterViewInit() {}\r\n\r\n  close(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onNoClick(): void {\r\n    this.close();\r\n  }\r\n\r\n  editPath(): void {\r\n    try {\r\n      this.datatransferFacade.editPath(\r\n        this.item,\r\n        this.item.path,\r\n        this.itemPath\r\n      );\r\n      this.close();\r\n    } catch (error) {\r\n      this.errorMessage = error;\r\n    }\r\n  }\r\n\r\n  editFilename(): void {\r\n    try {\r\n      this.datatransferFacade.editFilename(this.item, this.itemName);\r\n      this.close();\r\n    } catch (error) {\r\n      this.errorMessage = error;\r\n    }\r\n  }\r\n}\r\n","import { NgZone } from \"@angular/core\";\r\nimport { MatDialog } from \"@angular/material/dialog\";\r\nimport { IProgressContainer } from \"../models/progress-container.model\";\r\nimport { ConfigService } from \"../services/config.service\";\r\nimport { LoggerService } from \"../services/logger.service\";\r\nimport { DatatransferStore } from \"../stores/datatransfer.store\";\r\nimport { DateUtil } from \"../utils/date.util\";\r\nimport { PaginationService } from \"../services/pagination.service\";\r\nimport { ExportService } from \"../services/export.service\";\r\nimport { IUploader } from \"../io/uploaders/base.uploader\";\r\nimport { IDownloader } from \"../io/downloaders/base.downloader\";\r\nimport { IDatatransfer } from \"../io/datatransfer.io\";\r\nimport { IDatatransferItem } from \"../models/datatransfer-item.model\";\r\nimport { TransferStatus } from \"../enums/transfer-status.enum\";\r\nimport { TransferType } from \"../enums/transfer-type.enum\";\r\nimport { BrowseDialogComponent } from \"../components/browse-dialog.component\";\r\nimport { EditDialogComponent } from \"../components/edit-dialog.component\";\r\nimport {\r\n  CustomEventType,\r\n  CustomEventTypeExtensions,\r\n} from \"../enums/custom-event-type.enum\";\r\n\r\nexport class DatatransferFacade {\r\n  private uploadProgress: IProgressContainer;\r\n  private downloadProgress: IProgressContainer;\r\n\r\n  // Interval in milliseconds to calculate progress:\r\n  private progressInterval = 200;\r\n  // Interval in milliseconds to calculate bitrate:\r\n  private bitrateInterval = 1000;\r\n\r\n  constructor(\r\n    private logger: LoggerService,\r\n    private zone: NgZone,\r\n    private store: DatatransferStore,\r\n    private dateUtil: DateUtil,\r\n    private paginationService: PaginationService,\r\n    private exportService: ExportService,\r\n    private uploader: IUploader,\r\n    private downloader: IDownloader,\r\n    private dialog: MatDialog\r\n  ) {\r\n    this.uploadProgress = this.store.uploadProgress;\r\n    this.downloadProgress = this.store.downloadProgress;\r\n    this.init(this.uploader, this.uploadProgress);\r\n    this.init(this.downloader, this.downloadProgress);\r\n  }\r\n\r\n  private init(\r\n    datatransfer: IDatatransfer,\r\n    progressContainer: IProgressContainer\r\n  ): void {\r\n    datatransfer.on(\r\n      \"itemAdded\",\r\n      function (item: IDatatransferItem) {\r\n        const that = this as DatatransferFacade;\r\n        that.zone.run(() => {\r\n          that.addItem(item);\r\n        });\r\n      }.bind(this)\r\n    );\r\n    datatransfer.on(\r\n      \"zoneUpdated\",\r\n      function (\r\n        item: IDatatransferItem,\r\n        status: TransferStatus,\r\n        message?: string\r\n      ) {\r\n        const that = this as DatatransferFacade;\r\n        that.zone.run(() => {\r\n          // console.log(that.uploader.isWorking());\r\n        });\r\n      }.bind(this)\r\n    );\r\n    datatransfer.on(\r\n      \"itemStatusChanged\",\r\n      function (\r\n        item: IDatatransferItem,\r\n        status: TransferStatus,\r\n        message?: string\r\n      ) {\r\n        const that = this as DatatransferFacade;\r\n        that.zone.run(() => {\r\n          that.changeItemStatus(item, status, message);\r\n        });\r\n      }.bind(this)\r\n    );\r\n    datatransfer.on(\r\n      \"itemProgressUpdated\",\r\n      function (item: IDatatransferItem, progress: number) {\r\n        const that = this as DatatransferFacade;\r\n        that.zone.run(() => {\r\n          that.updateItemProgress(item, progress);\r\n        });\r\n      }.bind(this)\r\n    );\r\n    datatransfer.on(\r\n      \"overallProgressUpdated\",\r\n      function (transferType: TransferType, progress: number) {\r\n        const that = this as DatatransferFacade;\r\n        that.zone.run(() => {\r\n          that.updateOverallProgress(progressContainer, transferType, progress);\r\n        });\r\n      }.bind(this)\r\n    );\r\n    datatransfer.on(\r\n      \"overallSizeUpdated\",\r\n      function (size: number) {\r\n        const that = this as DatatransferFacade;\r\n        that.zone.run(() => {\r\n          that.updateOverallSize(progressContainer, size);\r\n        });\r\n      }.bind(this)\r\n    );\r\n  }\r\n\r\n  public assignUploadBrowse(element, isDirectory = false): void {\r\n    this.uploader.assignBrowse(element, isDirectory);\r\n  }\r\n\r\n  public assignUploadDrop(element): void {\r\n    this.uploader.assignDrop(element);\r\n  }\r\n\r\n  public openBrowseDialog(): void {\r\n    const dialogRef = this.dialog.open(BrowseDialogComponent, {\r\n      data: {\r\n        datatransferFacade: this,\r\n      },\r\n    });\r\n  }\r\n\r\n  public openEditPathDialog(item: IDatatransferItem): void {\r\n    const dialogRef = this.dialog.open(EditDialogComponent, {\r\n      data: {\r\n        datatransferFacade: this,\r\n        mode: \"edit-path\",\r\n        item,\r\n      },\r\n    });\r\n  }\r\n\r\n  public openEditFilenameDialog(item: IDatatransferItem): void {\r\n    const dialogRef = this.dialog.open(EditDialogComponent, {\r\n      data: {\r\n        datatransferFacade: this,\r\n        mode: \"edit-filename\",\r\n        item,\r\n      },\r\n    });\r\n  }\r\n\r\n  public toggleVisible(checked: boolean): void {\r\n    this.paginationService.paginatedItems.forEach((item, index) => {\r\n      item.isSelected = checked;\r\n    });\r\n  }\r\n\r\n  public startAll(): void {\r\n    this.store.getItems().forEach((item, index) => {\r\n      const that = this as DatatransferFacade;\r\n      if (\r\n        item.transferType === TransferType.Upload &&\r\n        item.status === TransferStatus.Ready\r\n      ) {\r\n        that.changeItemStatus(item, TransferStatus.Queued);\r\n      }\r\n    });\r\n    this.uploader.startAll();\r\n  }\r\n\r\n  public pauseAll(): void {\r\n    this.store.getItems().forEach((item, index) => {\r\n      item.preprocessContainer.pause(true);\r\n    });\r\n    this.uploader.pauseAll();\r\n    this.downloader.pauseAll();\r\n  }\r\n\r\n  public removeAll(): void {\r\n    this.store.getItems().forEach((item, index) => {\r\n      item.preprocessContainer.cancel(true);\r\n    });\r\n    this.uploader.removeAll();\r\n    this.downloader.removeAll();\r\n    this.store.clear();\r\n    this.uploadProgress.reset(0);\r\n    this.paginationService.update(0);\r\n    document.dispatchEvent(\r\n      new CustomEvent(\r\n        CustomEventTypeExtensions.toString(CustomEventType.ITEMS_CLEARED)\r\n      )\r\n    );\r\n  }\r\n\r\n  public retryAll(): void {\r\n    this.store.getByStatus(TransferStatus.Failed).forEach((item, index) => {\r\n      const that = this as DatatransferFacade;\r\n      that.retryItem(item);\r\n    });\r\n  }\r\n\r\n  public removeSelected(): void {\r\n    const temp = this.store.getSelected().slice();\r\n    temp.forEach((item, index) => {\r\n      const that = this as DatatransferFacade;\r\n      that.removeItem(item);\r\n    });\r\n  }\r\n\r\n  public addItem(item: IDatatransferItem): void {\r\n    if (!!item) {\r\n      this.store.addItem(item);\r\n      this.paginationService.update(this.store.count);\r\n      document.dispatchEvent(\r\n        new CustomEvent(\r\n          CustomEventTypeExtensions.toString(CustomEventType.ITEM_ADDED),\r\n          { detail: item }\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  public removeItem(item: IDatatransferItem): void {\r\n    if (!!item) {\r\n      item.preprocessContainer.cancel(true);\r\n      switch (item.transferType) {\r\n        case TransferType.Upload:\r\n          this.uploader.removeItem(item);\r\n          break;\r\n        case TransferType.Download:\r\n          this.downloader.removeItem(item);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n      this.store.removeById(item.id);\r\n      this.paginationService.update(this.store.count);\r\n      document.dispatchEvent(\r\n        new CustomEvent(\r\n          CustomEventTypeExtensions.toString(CustomEventType.ITEM_REMOVED),\r\n          { detail: item }\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  public retryItem(item: IDatatransferItem): void {\r\n    if (!!item) {\r\n      item.preprocessContainer.cancel(true);\r\n      switch (item.transferType) {\r\n        case TransferType.Upload:\r\n          this.uploader.retryItem(item);\r\n          break;\r\n        case TransferType.Download:\r\n          this.downloader.retryItem(item);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  public itemClick(item: IDatatransferItem) {\r\n   document.dispatchEvent(\r\n     new CustomEvent(\r\n       CustomEventTypeExtensions.toString(CustomEventType.ITEM_CLICKED),\r\n       { detail: item }\r\n     )\r\n   );\r\n  }\r\n\r\n  public changeItemStatus(\r\n    item: IDatatransferItem,\r\n    status: TransferStatus,\r\n    message?: string\r\n  ): void {\r\n    if (!!item && !!status) {\r\n      if (item.status !== status) {\r\n        this.paginationService.setPageByItemId(item.id);\r\n        item.status = status;\r\n        if (!!message) {\r\n          item.message = message;\r\n        }\r\n        this.store.updateFailedCount();\r\n        if (status === TransferStatus.Finished) {\r\n          document.dispatchEvent(\r\n            new CustomEvent(\r\n              CustomEventTypeExtensions.toString(\r\n                CustomEventType.ITEM_COMPLETED\r\n              ),\r\n              { detail: item }\r\n            )\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public updateItemProgress(item: IDatatransferItem, progress: number): void {\r\n    if (!!item) {\r\n      const now: number = this.dateUtil.now();\r\n      const loaded: number = item.progressContainer.total * progress;\r\n      item.progressContainer.updateBitrate(now, loaded, this.bitrateInterval);\r\n      item.progressContainer.updateProgress(now, loaded, this.progressInterval);\r\n    }\r\n  }\r\n\r\n  public updateOverallProgress(\r\n    progressContainer: IProgressContainer,\r\n    transferType: TransferType,\r\n    progress: number\r\n  ): void {\r\n    const now: number = this.dateUtil.now();\r\n    const loaded: number = progressContainer.total * progress;\r\n    // this.logger.log('total: ' + progressContainer.total + ' progress: ' + progress + ' loaded: ' + loaded);\r\n    progressContainer.updateBitrate(now, loaded, this.bitrateInterval);\r\n    progressContainer.updateProgress(now, loaded, this.progressInterval);\r\n    if (progressContainer.total > 0 && loaded >= progressContainer.total) {\r\n      switch (transferType) {\r\n        case TransferType.Upload:\r\n          document.dispatchEvent(\r\n            new CustomEvent(\r\n              CustomEventTypeExtensions.toString(\r\n                CustomEventType.UPLOAD_COMPLETED\r\n              )\r\n            )\r\n          );\r\n          break;\r\n        case TransferType.Download:\r\n          document.dispatchEvent(\r\n            new CustomEvent(\r\n              CustomEventTypeExtensions.toString(\r\n                CustomEventType.DOWNLOAD_COMPLETED\r\n              )\r\n            )\r\n          );\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  public updateOverallSize(\r\n    progressContainer: IProgressContainer,\r\n    size: number\r\n  ): void {\r\n    progressContainer.reset(size);\r\n  }\r\n\r\n  public download(filename: string, url: string, sizeInBytes: number): void {\r\n    this.downloader.download(filename, url, sizeInBytes);\r\n  }\r\n\r\n  public export(exportType: string): void {\r\n    this.exportService.export(exportType);\r\n  }\r\n\r\n  public getStatusClass(status: TransferStatus): string {\r\n    switch (status) {\r\n      case TransferStatus.Ready:\r\n        return \"add_circle_outline\";\r\n      case TransferStatus.Uploading:\r\n        return \"arrow_upward\";\r\n      case TransferStatus.Downloading:\r\n        return \"arrow_downward\";\r\n      case TransferStatus.Failed:\r\n        return \"error_outline\";\r\n      case TransferStatus.Queued:\r\n      case TransferStatus.Preprocessing:\r\n        return \"schedule\";\r\n      case TransferStatus.Finished:\r\n        return \"done_all\";\r\n      default:\r\n        return \"\";\r\n    }\r\n  }\r\n\r\n  public showStartButton(): boolean {\r\n    return (\r\n      this.store.count > 0 &&\r\n      !this.uploader.isWorking() &&\r\n      !this.downloader.isWorking()\r\n    );\r\n  }\r\n\r\n  public showPauseButton(): boolean {\r\n    return this.uploader.isWorking();\r\n  }\r\n\r\n  public showRemoveButton(): boolean {\r\n    return this.store.count > 0;\r\n  }\r\n\r\n  public showRetryButton(): boolean {\r\n    return (\r\n      this.store.failedCount > 0 &&\r\n      !this.uploader.isWorking() &&\r\n      !this.downloader.isWorking()\r\n    );\r\n  }\r\n\r\n  public showRetryButtonByItem(item: IDatatransferItem): boolean {\r\n    return item.status === TransferStatus.Failed;\r\n  }\r\n\r\n  public showExportButton(): boolean {\r\n    return this.store.count > 0;\r\n  }\r\n\r\n  public showPreprocessingCheckbox(): boolean {\r\n    return (\r\n      this.store.count > 0 && ConfigService.settings.core.preprocessHashEnabled\r\n    );\r\n  }\r\n\r\n  public showPreprocessingTooltip(): boolean {\r\n    return (\r\n      this.showPreprocessingCheckbox() &&\r\n      !!ConfigService.settings.core.preprocessHashTooltipContent\r\n    );\r\n  }\r\n\r\n  public showSpinner(item: IDatatransferItem): boolean {\r\n    return (\r\n      item.preprocessContainer.percent > 0 &&\r\n      item.status === TransferStatus.Preprocessing\r\n    );\r\n  }\r\n\r\n  public showProgressbar(item: IDatatransferItem): boolean {\r\n    return (\r\n      item.progressContainer.percent > 0 &&\r\n      (item.status === TransferStatus.Uploading ||\r\n        item.status === TransferStatus.Downloading)\r\n    );\r\n  }\r\n\r\n  public showPath(items: IDatatransferItem[], index: number): boolean {\r\n    if (index > 0 && items.length > index) {\r\n      const currentPath = items[index].path;\r\n      // don't show if previous path is same as current\r\n      return items[index - 1].path !== currentPath;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  public showEditDialog(item: IDatatransferItem): boolean {\r\n    let result = false;\r\n    if (item) {\r\n      switch (item.transferType) {\r\n        case TransferType.Upload:\r\n          if (item.status === TransferStatus.Ready) {\r\n            result = true;\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public editPath(\r\n    item: IDatatransferItem,\r\n    oldPath: string,\r\n    newPath: string\r\n  ): void {\r\n    switch (item.transferType) {\r\n      case TransferType.Upload:\r\n        // replace all \\ with /\r\n        let cleanedPath = newPath.replace(/\\\\/g, \"/\");\r\n        // replace repeated / with one\r\n        cleanedPath = cleanedPath.replace(/\\/+/g, \"/\");\r\n        if (cleanedPath.startsWith(\"/\")) {\r\n          cleanedPath = cleanedPath.slice(1);\r\n        }\r\n        if (cleanedPath && !cleanedPath.endsWith(\"/\")) {\r\n          cleanedPath += \"/\";\r\n        }\r\n        this.uploader.editPath(oldPath, cleanedPath);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  public editFilename(item: IDatatransferItem, name: string): void {\r\n    switch (item.transferType) {\r\n      case TransferType.Upload:\r\n        this.uploader.editFilename(item, name);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  public parseMessage(item: IDatatransferItem): string {\r\n    if (ConfigService.settings.core.parseMessageCallback instanceof Function) {\r\n      return ConfigService.settings.core.parseMessageCallback(item.message);\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n}\r\n","export enum ExportType {\r\n    CSV,\r\n    JSON\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { LoggerService } from '../../services/logger.service';\r\nimport { DatatransferStore } from '../../stores/datatransfer.store';\r\n\r\nexport interface IExporter {\r\n    export(): void;\r\n}\r\n\r\n@Injectable()\r\nexport abstract class BaseExporter implements IExporter {\r\n\r\n    constructor(protected logger: LoggerService, protected store: DatatransferStore) {\r\n\r\n    }\r\n\r\n    public abstract export(): void;\r\n\r\n    protected download(content, fileName, mimeType): void {\r\n        let a = document.createElement('a');\r\n        mimeType = mimeType || 'application/octet-stream';\r\n\r\n        if (navigator.msSaveBlob) { // IE10\r\n            navigator.msSaveBlob(new Blob([content], {\r\n                type: mimeType\r\n            }), fileName);\r\n        } else if (URL && 'download' in a) {\r\n            a.href = URL.createObjectURL(new Blob([content], {\r\n                type: mimeType\r\n            }));\r\n            a.setAttribute('download', fileName);\r\n            document.body.appendChild(a);\r\n            a.click();\r\n            document.body.removeChild(a);\r\n        } else {\r\n            location.href = 'data:application/octet-stream,' + encodeURIComponent(content); // only this mime type is supported\r\n        }\r\n    }\r\n\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { BaseExporter } from \"./base.exporter\";\r\nimport { LoggerService } from \"../../services/logger.service\";\r\nimport { DatatransferStore } from \"../../stores/datatransfer.store\";\r\n\r\n@Injectable()\r\nexport class CsvExporter extends BaseExporter {\r\n  constructor(\r\n    protected logger: LoggerService,\r\n    protected store: DatatransferStore\r\n  ) {\r\n    super(logger, store);\r\n  }\r\n\r\n  public export(): void {\r\n    let csvContent = \"id,name,path,status,size,message\\n\";\r\n    const items = this.store.getItems();\r\n    items.forEach((item, index) => {\r\n      const itemString =\r\n        item.id +\r\n        \",\" +\r\n        item.name +\r\n        \",\" +\r\n        item.path +\r\n        \",\" +\r\n        item.getStatusName() +\r\n        \",\" +\r\n        item.sizeContainer.displaySize +\r\n        \" \" +\r\n        item.sizeContainer.displayUnit +\r\n        \",\" +\r\n        item.message;\r\n\r\n      csvContent += index < items.length ? itemString + \"\\n\" : itemString;\r\n    });\r\n\r\n    this.download(csvContent, \"export.csv\", \"text/csv;encoding:utf-8\");\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { BaseExporter } from \"./base.exporter\";\r\nimport { LoggerService } from \"../../services/logger.service\";\r\nimport { DatatransferStore } from \"../../stores/datatransfer.store\";\r\n\r\n@Injectable()\r\nexport class JsonExporter extends BaseExporter {\r\n  constructor(\r\n    protected logger: LoggerService,\r\n    protected store: DatatransferStore\r\n  ) {\r\n    super(logger, store);\r\n  }\r\n\r\n  public export(): void {\r\n    const content = [];\r\n    const items = this.store.getItems();\r\n    items.forEach((item, index) => {\r\n      content.push({\r\n        id: item.id,\r\n        name: item.name,\r\n        path: item.path,\r\n        status: item.getStatusName(),\r\n        size:\r\n          item.sizeContainer.displaySize + \" \" + item.sizeContainer.displayUnit,\r\n        message: item.message,\r\n      });\r\n    });\r\n\r\n    this.download(\r\n      JSON.stringify(content, null, \"\\t\"),\r\n      \"export.json\",\r\n      \"text/json;encoding:utf-8\"\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { CsvExporter } from '../io/exporters/csv.exporter';\r\nimport { JsonExporter } from '../io/exporters/json.exporter';\r\nimport { ExportType } from '../enums/export-type.enum';\r\n\r\n@Injectable()\r\nexport class ExportService {\r\n\r\n    constructor(private csvExporter: CsvExporter, private jsonExporter: JsonExporter) {\r\n\r\n    }\r\n\r\n    public export(exportType: string): void {\r\n        let castedExportType: ExportType = ExportType[exportType];\r\n        switch (castedExportType) {\r\n            case ExportType.CSV:\r\n                this.csvExporter.export();\r\n                break;\r\n            case ExportType.JSON:\r\n                this.jsonExporter.export();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n}\r\n","export interface IPreprocessContainer {\r\n    percent: number; // 0-100\r\n    pause(pause: boolean): void;\r\n    isPaused(): boolean;\r\n    cancel(cancel: boolean): void;\r\n    isCancelled(): boolean;\r\n    doWork(): void;\r\n    run(): void;\r\n}\r\n\r\nexport class PreprocessContainer implements IPreprocessContainer {\r\n    public percent: number;\r\n\r\n    private _isPaused: boolean;\r\n    private _isCancelled: boolean;\r\n\r\n    public constructor(init?: Partial<PreprocessContainer>) {\r\n        this.percent = 0;\r\n        this._isPaused = false;\r\n        this._isCancelled = false;\r\n        Object.assign(this, init);\r\n    }\r\n\r\n    public pause(pause: boolean): void {\r\n        this._isPaused = pause;\r\n    }\r\n\r\n    public isPaused(): boolean {\r\n        return this._isPaused;\r\n    }\r\n\r\n    public cancel(cancel: boolean): void {\r\n        this._isCancelled = cancel;\r\n    }\r\n\r\n    public isCancelled(): boolean {\r\n        return this._isCancelled;\r\n    }\r\n\r\n    public doWork(): void {\r\n\r\n    }\r\n\r\n    public run(): void {\r\n        this._isPaused = false;\r\n        this.doWork();\r\n    }\r\n}\r\n","export enum HashType {\r\n    MD5,\r\n    SHA1\r\n}\r\n\r\nexport enum HashTypeImplementation {\r\n    Internal,\r\n    CryptoBrowserify\r\n}\r\n\r\n// tslint:disable-next-line: no-namespace\r\nexport namespace HashTypeExtensions {\r\n    export function toString(hashTypeImplementation: HashTypeImplementation, hashType: HashType): string {\r\n        switch (hashType) {\r\n            case HashType.MD5:\r\n                return 'md5';\r\n            case HashType.SHA1:\r\n                return 'sha1';\r\n            default:\r\n                return 'sha1';\r\n        }\r\n    }\r\n    export function toEnum(hashTypeImplementation: HashTypeImplementation, hashType: string): HashType {\r\n        switch (hashType) {\r\n            case 'md5':\r\n                return HashType.MD5;\r\n            case 'sha1':\r\n                return HashType.SHA1;\r\n            default:\r\n                return HashType.SHA1;\r\n        }\r\n    }\r\n}\r\n","export enum EncodingType {\r\n    Latin1,\r\n    Hex,\r\n    Base64,\r\n    UTF8\r\n}\r\n\r\nexport enum EncodingTypeImplementation {\r\n    Internal,\r\n    CryptoBrowserify\r\n}\r\n\r\n// tslint:disable-next-line: no-namespace\r\nexport namespace EncodingTypeExtensions {\r\n    export function toString(encodingTypeImplementation: EncodingTypeImplementation, encodingType: EncodingType): string {\r\n        switch (encodingType) {\r\n            case EncodingType.Latin1:\r\n                return 'latin1';\r\n            case EncodingType.Hex:\r\n                return 'hex';\r\n            case EncodingType.Base64:\r\n                return 'base64';\r\n            case EncodingType.UTF8:\r\n                return 'utf8';\r\n            default:\r\n                return 'hex';\r\n        }\r\n    }\r\n    export function toEnum(encodingTypeImplementation: EncodingTypeImplementation, encodingType: string): EncodingType {\r\n        switch (encodingType) {\r\n            case 'latin1':\r\n                return EncodingType.Latin1;\r\n            case 'hex':\r\n                return EncodingType.Hex;\r\n            case 'base64':\r\n                return EncodingType.Base64;\r\n            case 'utf8':\r\n                return EncodingType.UTF8;\r\n            default:\r\n                return EncodingType.Hex;\r\n        }\r\n    }\r\n}\r\n","import { IPreprocessContainer, PreprocessContainer } from './preprocess-container.model';\r\nimport { HashType, HashTypeImplementation, HashTypeExtensions } from '../enums/hash-type.enum';\r\nimport { EncodingType, EncodingTypeImplementation, EncodingTypeExtensions } from '../enums/encoding-type.enum';\r\n\r\nexport interface IHashContainer extends IPreprocessContainer {\r\n    file: File;\r\n    hashType: HashType;\r\n    hashTypeString: string;\r\n    encodingType: EncodingType;\r\n    encodingTypeString: string;\r\n    inputEncodingType: EncodingType;\r\n    inputEncodingTypeString: string;\r\n    startDate: Date;\r\n    endDate: Date;\r\n    hash: any;\r\n    hashString: string;\r\n    reader: FileReader;\r\n}\r\n\r\nexport interface IStreamHashContainer extends IHashContainer {\r\n    chunkSize: number;\r\n    offset: number;\r\n}\r\n\r\nexport class HashContainer extends PreprocessContainer implements IHashContainer {\r\n    public file: File;\r\n    public hashType: HashType;\r\n    public hashTypeString: string;\r\n    public encodingType: EncodingType;\r\n    public encodingTypeString: string;\r\n    public inputEncodingType: EncodingType;\r\n    public inputEncodingTypeString: string;\r\n    public startDate: Date;\r\n    public endDate: Date;\r\n    public hash: any;\r\n    public hashString: string;\r\n    public reader: FileReader;\r\n\r\n    public constructor(file: File, hashTypeImplementation: HashTypeImplementation, encodingTypeImplementation: EncodingTypeImplementation,\r\n                       hashType: HashType, encodingType: EncodingType, inputEncodingType: EncodingType) {\r\n        super();\r\n        this.file = file;\r\n        this.hashType = hashType;\r\n        this.hashTypeString = HashTypeExtensions.toString(hashTypeImplementation, hashType);\r\n        this.encodingType = encodingType;\r\n        this.encodingTypeString = EncodingTypeExtensions.toString(encodingTypeImplementation, encodingType);\r\n        this.inputEncodingType = inputEncodingType;\r\n        this.inputEncodingTypeString = EncodingTypeExtensions.toString(encodingTypeImplementation, inputEncodingType);\r\n        this.startDate = new Date();\r\n        this.endDate = new Date();\r\n        this.reader = new FileReader();\r\n    }\r\n}\r\n\r\nexport class StreamHashContainer extends HashContainer implements IStreamHashContainer {\r\n    public chunkSize: number;\r\n    public offset: number;\r\n\r\n    public constructor(file: File, hashTypeImplementation: HashTypeImplementation, encodingTypeImplementation: EncodingTypeImplementation,\r\n                       hashType: HashType, encodingType: EncodingType, inputEncodingType: EncodingType) {\r\n        super(file, hashTypeImplementation, encodingTypeImplementation, hashType, encodingType, inputEncodingType);\r\n        this.chunkSize = 0;\r\n        this.offset = 0;\r\n    }\r\n\r\n    public cancel(cancel: boolean): void {\r\n        super.cancel(cancel);\r\n        this.offset = 0;\r\n    }\r\n}\r\n","import { IDatatransferItem } from '../models/datatransfer-item.model';\r\nimport { ConfigService } from '../services/config.service';\r\nimport { LoggerService } from '../services/logger.service';\r\nimport { GuidUtil } from '../utils/guid.util';\r\nimport { CryptoService } from '../services/crypto.service';\r\nimport { TransferStatus } from '../enums/transfer-status.enum';\r\nimport { TransferType } from '../enums/transfer-type.enum';\r\nimport { IStreamHashContainer, StreamHashContainer } from '../models/hash-container.model';\r\nimport { HashTypeImplementation, HashTypeExtensions } from '../enums/hash-type.enum';\r\nimport { EncodingTypeImplementation, EncodingTypeExtensions } from '../enums/encoding-type.enum';\r\n\r\nexport interface IDatatransfer {\r\n    on(event: string, callback: Function): void;\r\n    isWorking(): boolean;\r\n    startAll(): void;\r\n    pauseAll(): void;\r\n    removeAll(): void;\r\n    addItem(item: IDatatransferItem): void;\r\n    removeItem(item: IDatatransferItem): void;\r\n    retryItem(item: IDatatransferItem): void;\r\n}\r\n\r\nexport abstract class BaseDatatransfer implements IDatatransfer {\r\n\r\n    private events = [];\r\n    protected _isWorking = false;\r\n\r\n    constructor(protected logger: LoggerService,\r\n                protected guidUtil: GuidUtil,\r\n                protected cryptoService: CryptoService) {\r\n    }\r\n\r\n    public on(event: string, callback: Function): void {\r\n        this.events.push(event.toLowerCase(), callback);\r\n    }\r\n\r\n    protected fire(...args: any[]): void {\r\n        const event = args[0].toLowerCase();\r\n        // Find event listeners, and support pseudo-event `catchAll`\r\n        for (let i = 0; i <= this.events.length; i += 2) {\r\n            if (this.events[i] === event) {\r\n                this.events[i + 1].apply(this, args.slice(1));\r\n            }\r\n            if (this.events[i] === 'catchall') {\r\n                this.events[i + 1].apply(null, args);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected updateZone(): void {\r\n        this.fire('zoneUpdated');\r\n    }\r\n\r\n    protected changeItemStatus(item: IDatatransferItem, status: TransferStatus, message?: string) {\r\n        this.fire('itemStatusChanged', item, status, message);\r\n    }\r\n\r\n    protected updateItemProgress(item: IDatatransferItem, progress: number): void {\r\n        this.fire('itemProgressUpdated', item, progress);\r\n    }\r\n\r\n    protected updateOverallProgress(transferType: TransferType, progress: number): void {\r\n        this.fire('overallProgressUpdated', transferType, progress);\r\n    }\r\n\r\n    protected updateOverallSize(size: number): void {\r\n        this.fire('overallSizeUpdated', size);\r\n    }\r\n\r\n    public isWorking(): boolean {\r\n        return this._isWorking;\r\n    }\r\n\r\n    public abstract startAll(): void;\r\n\r\n    public abstract pauseAll(): void;\r\n\r\n    public abstract removeAll(): void;\r\n\r\n    public addItem(item: IDatatransferItem): void {\r\n        this.fire('itemAdded', item);\r\n    }\r\n\r\n    public abstract removeItem(item: IDatatransferItem): void;\r\n\r\n    public abstract retryItem(item: IDatatransferItem): void;\r\n\r\n    protected generateUniqueIdentifier(): string {\r\n        return this.guidUtil.createGuid();\r\n    }\r\n\r\n    protected preprocessHash(item: IDatatransferItem, file: File, continueCallback: Function, cancelCallback: Function): void {\r\n        const successCallback = function(container: IStreamHashContainer) {\r\n            const that = this as BaseDatatransfer;\r\n            if (container.hashString) {\r\n                // const seconds = (container.endDate.getTime() - container.startDate.getTime()) / 1000;\r\n                // console.log('file hashing took ' + seconds + ' seconds');\r\n\r\n                const xhr = new XMLHttpRequest();\r\n\r\n                const responseHandler = function(e) {\r\n                    // ignore response if container has been cancelled\r\n                    if (!container.isCancelled()) {\r\n                        if (xhr.status === 200) {\r\n                            item.message = xhr.responseText;\r\n                            cancelCallback();\r\n                        } else {\r\n                            continueCallback();\r\n                        }\r\n                    }\r\n                };\r\n                xhr.addEventListener('load', responseHandler, false);\r\n                xhr.addEventListener('error', responseHandler, false);\r\n                xhr.addEventListener('timeout', responseHandler, false);\r\n\r\n                let params = [];\r\n                params = params.concat(\r\n                    [\r\n                        [ConfigService.settings.core.preprocessHashParameterName, container.hashString],\r\n                        [ConfigService.settings.core.preprocessHashFileNameParameterName, item.name]\r\n                    ]\r\n                        .map(function(pair) {\r\n                            return [\r\n                                pair[0], encodeURIComponent(pair[1])\r\n                            ].join('=');\r\n                        })\r\n                );\r\n\r\n                xhr.open(ConfigService.settings.core.preprocessHashMethod, ConfigService.settings.core.getTarget('preprocessHash', params));\r\n                xhr.send(null);\r\n\r\n            } else {\r\n                continueCallback();\r\n            }\r\n        }.bind(this);\r\n        const errorCallback = function(event: any, container: IStreamHashContainer) {\r\n            console.log(event);\r\n            continueCallback();\r\n        };\r\n\r\n        if (!item.preprocessContainer.isCancelled() && item.preprocessContainer instanceof StreamHashContainer) {\r\n            // continue\r\n        } else {\r\n            const hashType = HashTypeExtensions.toEnum(\r\n                HashTypeImplementation.Internal, ConfigService.settings.core.preprocessHashFunctionName);\r\n            const encodingType = EncodingTypeExtensions.toEnum(\r\n                EncodingTypeImplementation.Internal, ConfigService.settings.core.preprocessHashEncodingName);\r\n            const inputEncodingType = EncodingTypeExtensions.toEnum(\r\n                EncodingTypeImplementation.Internal, ConfigService.settings.core.preprocessHashInputEncodingName);\r\n\r\n            item.preprocessContainer = this.cryptoService.createStreamHashContainer(\r\n                file, hashType, encodingType, inputEncodingType, successCallback, errorCallback);\r\n        }\r\n\r\n        // wait for the initial mat-progress-spinner animation to complete\r\n        setTimeout(function() {\r\n            item.preprocessContainer.run();\r\n        }, 1000);\r\n    }\r\n}\r\n","import { IDatatransfer, BaseDatatransfer } from '../datatransfer.io';\r\nimport { IDatatransferItem } from '../../models/datatransfer-item.model';\r\nimport { TransferType } from '../../enums/transfer-type.enum';\r\nimport { LoggerService } from '../../services/logger.service';\r\nimport { GuidUtil } from '../../utils/guid.util';\r\nimport { CryptoService } from '../../services/crypto.service';\r\n\r\nexport interface IUploader extends IDatatransfer {\r\n    assignBrowse(element: any, isDirectory: any): void;\r\n    assignDrop(element: any): void;\r\n    editPath(oldPath: string, newPath: string): void;\r\n    editFilename(item: IDatatransferItem, name: string): void;\r\n}\r\n\r\nexport abstract class BaseUploader extends BaseDatatransfer {\r\n\r\n    private filenameRegExp = new RegExp('[\\/\\\\\\\\*?\"<>:|]');\r\n    private pathRegExp = new RegExp('[*?\"<>:|]');\r\n    protected transferType = TransferType.Upload;\r\n\r\n    constructor(protected logger: LoggerService,\r\n                protected guidUtil: GuidUtil,\r\n                protected cryptoService: CryptoService) {\r\n        super(logger, guidUtil, cryptoService);\r\n    }\r\n\r\n    public abstract assignBrowse(element: any, isDirectory: any): void;\r\n\r\n    public abstract assignDrop(element: any): void;\r\n\r\n    public editPath(oldPath: string, newPath: string): void {\r\n        if (this.pathRegExp.test(newPath)) {\r\n            throw new Error('A path cannot contain any of the following characters: * ? \" < > : |');\r\n        }\r\n    }\r\n\r\n    public editFilename(item: IDatatransferItem, name: string): void {\r\n        if (!item) {\r\n            throw new Error('Cannot edit the filename.');\r\n        }\r\n        if (!name) {\r\n            throw new Error('Empty filename is not allowed.');\r\n        }\r\n        if (this.filenameRegExp.test(name)) {\r\n            throw new Error('A filename cannot contain any of the following characters: \\\\ / * ? \" < > : |');\r\n        }\r\n    }\r\n}\r\n","import { ISizeContainer, SizeContainer } from './size-container.model';\r\nimport { TransferType } from '../enums/transfer-type.enum';\r\nimport { TransferStatus } from '../enums/transfer-status.enum';\r\nimport { IPreprocessContainer, PreprocessContainer } from './preprocess-container.model';\r\nimport { IProgressContainer, ProgressContainer } from './progress-container.model';\r\n\r\nexport interface IDatatransferItem {\r\n  id: string;\r\n  name: string;\r\n  path: string;\r\n  displayPath: string;\r\n  sizeContainer: ISizeContainer;\r\n  transferType: TransferType;\r\n  status: TransferStatus;\r\n  preprocessContainer: IPreprocessContainer;\r\n  progressContainer: IProgressContainer;\r\n  message?: string;\r\n  isSelected?: boolean;\r\n  externalItem?: any;\r\n  getStatusName(): string;\r\n  getTransferTypeName(): string;\r\n}\r\n\r\nexport class DatatransferItem implements IDatatransferItem {\r\n  public id: string;\r\n  public name: string;\r\n  private _path: string;\r\n  get path(): string {\r\n    return this._path;\r\n  }\r\n  set path(newPath: string) {\r\n      this._path = newPath;\r\n      this.displayPath = newPath;\r\n      if (this.displayPath) {\r\n        // remove last character\r\n        if (this.displayPath.endsWith('/')) {\r\n          this.displayPath = this.displayPath.slice(0, -1);\r\n        }\r\n        // replace all '/' with ' > '\r\n        this.displayPath = this.displayPath.replace(/\\//g, ' > ');\r\n      }\r\n  }\r\n  public displayPath: string;\r\n  public sizeContainer: ISizeContainer;\r\n  public transferType: TransferType;\r\n  public status: TransferStatus;\r\n  public preprocessContainer: IPreprocessContainer;\r\n  public progressContainer: IProgressContainer;\r\n  private _message; string;\r\n  get message(): string {\r\n    return this._message;\r\n  }\r\n  set message(newMessage: string) {\r\n    this._message = newMessage.toLowerCase().startsWith('<!doctype html') ? undefined : newMessage;\r\n  }\r\n  public isSelected?: boolean;\r\n  public externalItem?: any;\r\n\r\n  public constructor(init?: Partial<DatatransferItem>) {\r\n    this.sizeContainer = new SizeContainer();\r\n    this.preprocessContainer = new PreprocessContainer();\r\n    this.progressContainer = new ProgressContainer(0);\r\n    Object.assign(this, init);\r\n  }\r\n\r\n  public getStatusName(): string {\r\n    return TransferStatus[this.status];\r\n  }\r\n\r\n  public getTransferTypeName(): string {\r\n    return TransferType[this.transferType];\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class GuidUtil {\r\n    public createGuid(): string {\r\n        function s4() {\r\n            return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\r\n        }\r\n        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\r\n    }\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\nimport * as cryptoBrowserify from 'crypto-browserify';\r\nimport { HashTypeImplementation, HashType } from '../enums/hash-type.enum';\r\nimport { EncodingTypeImplementation, EncodingType } from '../enums/encoding-type.enum';\r\nimport { IHashContainer, HashContainer, IStreamHashContainer, StreamHashContainer } from '../models/hash-container.model';\r\nimport { FileReaderEvent } from '../extensions/file-reader.extension';\r\n\r\n@Injectable()\r\nexport class CryptoService {\r\n\r\n    // hash 4MB at a time\r\n    private readonly STREAM_HASH_CHUNK_SIZE = 1024 * 1000 * 4;\r\n    private readonly HASH_TYPE_IMPLEMENTATION = HashTypeImplementation.CryptoBrowserify;\r\n    private readonly ENCODING_TYPE_IMPLEMENTATION = EncodingTypeImplementation.CryptoBrowserify;\r\n\r\n    constructor(private zone: NgZone) {\r\n        // Performance remains unchanged by running the hash function outside of Angular.\r\n        // this.zone.runOutsideAngular(() => { }\r\n    }\r\n\r\n    public createHashContainer(file: File, hashType: HashType, encodingType: EncodingType,\r\n                               inputEncodingType: EncodingType): IHashContainer {\r\n\r\n        const container = new HashContainer(\r\n            file,\r\n            this.HASH_TYPE_IMPLEMENTATION,\r\n            this.ENCODING_TYPE_IMPLEMENTATION,\r\n            hashType,\r\n            encodingType,\r\n            inputEncodingType);\r\n\r\n        container.hash = cryptoBrowserify.createHash(container.hashTypeString);\r\n\r\n        container.reader.onload = function(event: FileReaderEvent) {\r\n            container.hashString = container.hash.update(event.target.result, container.inputEncodingTypeString)\r\n                .digest(container.encodingTypeString);\r\n            container.endDate = new Date();\r\n            container.percent = 100;\r\n        }.bind(container);\r\n\r\n        container.doWork = function() {\r\n            container.reader.readAsBinaryString(container.file);\r\n        };\r\n\r\n        return container;\r\n    }\r\n\r\n    public createStreamHashContainer(file: File, hashType: HashType, encodingType: EncodingType, inputEncodingType: EncodingType,\r\n                                     successCallback: Function, errorCallback: Function): IStreamHashContainer {\r\n\r\n        const container = new StreamHashContainer(\r\n            file,\r\n            this.HASH_TYPE_IMPLEMENTATION,\r\n            this.ENCODING_TYPE_IMPLEMENTATION,\r\n            hashType,\r\n            encodingType,\r\n            inputEncodingType);\r\n\r\n        container.chunkSize = this.STREAM_HASH_CHUNK_SIZE;\r\n        container.offset = 0;\r\n        container.hash = cryptoBrowserify.createHash(container.hashTypeString);\r\n\r\n        container.reader.onload = function(event: FileReaderEvent) {\r\n            const binary = event.target.result;\r\n\r\n            if (container.offset + container.chunkSize >= container.file.size) {\r\n                container.hash.end(binary, container.inputEncodingTypeString);\r\n            } else {\r\n                container.hash.write(binary, container.inputEncodingTypeString);\r\n            }\r\n\r\n            container.offset += container.chunkSize;\r\n\r\n            container.doWork();\r\n        }.bind(container);\r\n\r\n        container.reader.onerror = function(event) {\r\n            errorCallback(event, container);\r\n        };\r\n\r\n        container.doWork = function() {\r\n            if (!container.isCancelled() && !container.isPaused()) {\r\n                if (container.offset > container.file.size) {\r\n                    container.hashString = container.hash.read().toString(container.encodingTypeString);\r\n                    container.endDate = new Date();\r\n                    container.percent = 100;\r\n                    successCallback(container);\r\n                    return;\r\n                }\r\n\r\n                const slice = container.file.slice(container.offset, container.offset + container.chunkSize);\r\n                container.reader.readAsBinaryString(slice);\r\n                container.percent = Math.round(container.offset / file.size * 100);\r\n            }\r\n        };\r\n\r\n        return container;\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport * as Resumable from 'resumablejs';\r\nimport { BaseUploader } from './base.uploader';\r\nimport { ConfigService } from '../../services/config.service';\r\nimport { LoggerService } from '../../services/logger.service';\r\nimport { GuidUtil } from '../../utils/guid.util';\r\nimport { CryptoService } from '../../services/crypto.service';\r\nimport { TransferStatus } from '../../enums/transfer-status.enum';\r\nimport { DatatransferItem, IDatatransferItem } from '../../models/datatransfer-item.model';\r\nimport { SizeContainer } from '../../models/size-container.model';\r\nimport { DecimalByteUnit } from '../../enums/decimal-byte-unit.enum';\r\nimport { ProgressContainer } from '../../models/progress-container.model';\r\nimport { TransferType } from '../../enums/transfer-type.enum';\r\n\r\n@Injectable()\r\nexport class ResumableJsUploader extends BaseUploader {\r\n\r\n    private r: Resumable.Resumable = undefined;\r\n    private preprocessFileFn = undefined;\r\n    private preprocessChunkFn = undefined;\r\n\r\n    constructor(protected logger: LoggerService,\r\n                protected guidUtil: GuidUtil,\r\n                protected cryptoService: CryptoService) {\r\n        super(logger, guidUtil, cryptoService);\r\n        this.initResumable();\r\n    }\r\n\r\n    private initResumable(): void {\r\n        function generateId(file, event) {\r\n            const that = this as ResumableJsUploader;\r\n            return that.generateUniqueIdentifier();\r\n        }\r\n\r\n        function preprocessChunkInlineFn(resumableChunk) {\r\n            const that = this as ResumableJsUploader;\r\n            if (typeof that.preprocessChunkFn === 'function') {\r\n                that.preprocessChunkFn(resumableChunk);\r\n            } else {\r\n                resumableChunk.preprocessFinished();\r\n            }\r\n        }\r\n\r\n        function preprocessFileInlineFn(resumableFile) {\r\n            const that = this as ResumableJsUploader;\r\n            if (typeof that.preprocessFileFn === 'function') {\r\n                that.changeItemStatus(resumableFile.internalItem, TransferStatus.Preprocessing);\r\n                that.preprocessFileFn(resumableFile);\r\n            } else {\r\n                if (ConfigService.settings.core.preprocessHashEnabled && ConfigService.settings.core.preprocessHashChecked) {\r\n                    that.changeItemStatus(resumableFile.internalItem, TransferStatus.Preprocessing);\r\n                    const continueCallback = function() {\r\n                        resumableFile.preprocessFinished();\r\n                    };\r\n                    const cancelCallback = function() {\r\n                        resumableFile.cancel();\r\n                        that.changeItemStatus(resumableFile.internalItem, TransferStatus.Finished, resumableFile.internalItem.message);\r\n                        that.r.uploadNextChunk();\r\n                    };\r\n                    that.preprocessHash(resumableFile.internalItem, resumableFile.file, continueCallback, cancelCallback);\r\n                } else {\r\n                    resumableFile.preprocessFinished();\r\n                }\r\n            }\r\n        }\r\n\r\n        ConfigService.settings.resumablejs.generateUniqueIdentifier = generateId.bind(this);\r\n\r\n        if (typeof ConfigService.settings.resumablejs.preprocess === 'function') {\r\n            // clones the function with '{}' acting as it's new 'this' parameter\r\n            this.preprocessChunkFn = ConfigService.settings.resumablejs.preprocess.bind({});\r\n        }\r\n        ConfigService.settings.resumablejs.preprocess = preprocessChunkInlineFn.bind(this);\r\n\r\n        if (typeof ConfigService.settings.resumablejs.preprocessFile === 'function') {\r\n            // clones the function with '{}' acting as it's new 'this' parameter\r\n            this.preprocessFileFn = ConfigService.settings.resumablejs.preprocessFile.bind({});\r\n        }\r\n        ConfigService.settings.resumablejs.preprocessFile = preprocessFileInlineFn.bind(this);\r\n\r\n        // @ts-ignore: ignore type checking\r\n        this.r = new Resumable(ConfigService.settings.resumablejs);\r\n\r\n        this.r.on('fileAdded', function(file, event) {\r\n            const that = this as ResumableJsUploader;\r\n            // that.logger.log('fileAdded', file);\r\n            const newItem = new DatatransferItem({\r\n                id: file.uniqueIdentifier,\r\n                name: file.fileName,\r\n                path: file.relativePath.substr(0, file.relativePath.length - file.fileName.length),\r\n                sizeContainer: new SizeContainer({ decimalByteUnit: DecimalByteUnit.Byte, decimalByteUnitSize: file.size }),\r\n                progressContainer: new ProgressContainer(file.size),\r\n                transferType: TransferType.Upload,\r\n                status: TransferStatus.Ready,\r\n                externalItem: file\r\n            });\r\n            file.internalItem = newItem;\r\n            that.addItem(newItem);\r\n        }.bind(this));\r\n        this.r.on('fileProgress', function(file, message) {\r\n            const that = this as ResumableJsUploader;\r\n            // that.logger.log('fileProgress', file.progress());\r\n            that.changeItemStatus(file.internalItem, TransferStatus.Uploading);\r\n            that.updateItemProgress(file.internalItem, file.progress());\r\n            that.updateOverallProgress(that.transferType, that.r.progress());\r\n        }.bind(this));\r\n        this.r.on('fileSuccess', function(file, message) {\r\n            const that = this as ResumableJsUploader;\r\n            // that.logger.log('fileSuccess', file);\r\n            that.changeItemStatus(file.internalItem, TransferStatus.Finished, message);\r\n        }.bind(this));\r\n        this.r.on('fileError', function(file, message) {\r\n            const that = this as ResumableJsUploader;\r\n            // that.logger.log('fileError', file, message);\r\n            that.changeItemStatus(file.internalItem, TransferStatus.Failed, message);\r\n        }.bind(this));\r\n        this.r.on('uploadStart', function() {\r\n            const that = this as ResumableJsUploader;\r\n            // that.logger.log('uploadStart', that.r);\r\n            that._isWorking = true;\r\n            that.updateZone();\r\n            that.updateOverallProgress(that.transferType, that.r.progress());\r\n            that.updateOverallSize(that.r.getSize());\r\n        }.bind(this));\r\n        this.r.on('chunkingComplete', function() {\r\n            const that = this as ResumableJsUploader;\r\n            // that.logger.log('chunkingComplete');\r\n        }.bind(this));\r\n        this.r.on('pause', function() {\r\n            const that = this as ResumableJsUploader;\r\n            // that.logger.log('pause');\r\n            that._isWorking = false;\r\n            that.updateZone();\r\n        }.bind(this));\r\n        this.r.on('cancel', function() {\r\n            const that = this as ResumableJsUploader;\r\n            // that.logger.log('cancel');\r\n            that._isWorking = false;\r\n            that.updateZone();\r\n        }.bind(this));\r\n        this.r.on('complete', function() {\r\n            const that = this as ResumableJsUploader;\r\n            // that.logger.log('complete', that.r);\r\n            that._isWorking = false;\r\n            that.updateZone();\r\n        }.bind(this));\r\n    }\r\n\r\n    public assignBrowse(element, isDirectory): void {\r\n        this.r.assignBrowse(element, isDirectory);\r\n    }\r\n\r\n    public assignDrop(element): void {\r\n        this.r.assignDrop(element);\r\n    }\r\n\r\n    public editPath(oldPath: string, newPath: string): void {\r\n        super.editPath(oldPath, newPath);\r\n        this.r.files.forEach((file: any, index) => {\r\n            const internalItem = file.internalItem as IDatatransferItem;\r\n            if (internalItem.status === TransferStatus.Ready && internalItem.path === oldPath) {\r\n                file.relativePath = newPath + file.fileName;\r\n                internalItem.path = newPath;\r\n            }\r\n        });\r\n    }\r\n\r\n    public editFilename(item: IDatatransferItem, name: string): void {\r\n        super.editFilename(item, name);\r\n        item.externalItem.fileName = name;\r\n        item.externalItem.relativePath = item.path + name;\r\n        item.name = name;\r\n    }\r\n\r\n    public startAll(): void {\r\n        this.r.upload();\r\n    }\r\n\r\n    public pauseAll(): void {\r\n        // reset preprocessState\r\n        this.r.files.forEach((file: any, index) => {\r\n            if (file.preprocessState === 1) {\r\n                file.preprocessState = 0;\r\n            }\r\n        });\r\n        this.r.pause();\r\n    }\r\n\r\n    public removeAll(): void {\r\n        const tempFiles = this.r.files.slice();\r\n        tempFiles.forEach((file: any, index) => {\r\n            const that = this as ResumableJsUploader;\r\n            that.r.removeFile(file);\r\n        });\r\n        this._isWorking = false;\r\n    }\r\n\r\n    public removeItem(item: IDatatransferItem): void {\r\n        this.r.removeFile(item.externalItem);\r\n        if (this.r.files.length <= 0) {\r\n            this._isWorking = false;\r\n        }\r\n    }\r\n\r\n    public retryItem(item: IDatatransferItem): void {\r\n        item.externalItem.retry();\r\n    }\r\n}\r\n","import { IDatatransfer, BaseDatatransfer } from '../datatransfer.io';\r\nimport { TransferType } from '../../enums/transfer-type.enum';\r\nimport { LoggerService } from '../../services/logger.service';\r\nimport { GuidUtil } from '../../utils/guid.util';\r\nimport { CryptoService } from '../../services/crypto.service';\r\n\r\nexport interface IDownloader extends IDatatransfer {\r\n    download(filename: string, url: string, sizeInBytes: number): void;\r\n}\r\n\r\nexport abstract class BaseDownloader extends BaseDatatransfer implements IDownloader {\r\n\r\n    protected transferType = TransferType.Download;\r\n\r\n    constructor(protected logger: LoggerService,\r\n                protected guidUtil: GuidUtil,\r\n                protected cryptoService: CryptoService) {\r\n        super(logger, guidUtil, cryptoService);\r\n    }\r\n\r\n    public abstract download(filename: string, url: string, sizeInBytes: number): void;\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class CommonUtil {\r\n    public each(o: any, callback: Function): void {\r\n        if (typeof (o.length) !== 'undefined') {\r\n            for (let i = 0; i < o.length; i++) {\r\n                // Array or FileList\r\n                if (callback(o[i]) === false) {\r\n                    return;\r\n                }\r\n            }\r\n        } else {\r\n            for (let i in o) {\r\n                // Object\r\n                if (callback(i, o[i]) === false) {\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { BaseDownloader } from \"./base.downloader\";\r\nimport {\r\n  IDatatransferItem,\r\n  DatatransferItem,\r\n} from \"../../models/datatransfer-item.model\";\r\nimport { ConfigService } from \"../../services/config.service\";\r\nimport { LoggerService } from \"../../services/logger.service\";\r\nimport { GuidUtil } from \"../../utils/guid.util\";\r\nimport { CryptoService } from \"../../services/crypto.service\";\r\nimport { CommonUtil } from \"../../utils/common.util\";\r\nimport { TransferStatus } from \"../../enums/transfer-status.enum\";\r\nimport { SizeContainer } from \"../../models/size-container.model\";\r\nimport { DecimalByteUnit } from \"../../enums/decimal-byte-unit.enum\";\r\nimport { ProgressContainer } from \"../../models/progress-container.model\";\r\nimport { TransferType } from \"../../enums/transfer-type.enum\";\r\n\r\n@Injectable()\r\nexport class BlobDownloader extends BaseDownloader {\r\n  private throttleProgressCallbacks = 0.1;\r\n  private files: IDatatransferItem[] = [];\r\n  private queue: IDatatransferItem[] = [];\r\n  private downloading: IDatatransferItem[] = [];\r\n\r\n  constructor(\r\n    protected logger: LoggerService,\r\n    protected guidUtil: GuidUtil,\r\n    protected cryptoService: CryptoService,\r\n    private commonUtil: CommonUtil\r\n  ) {\r\n    super(logger, guidUtil, cryptoService);\r\n  }\r\n\r\n  public startAll(): void {\r\n    if (!this.isWorking()) {\r\n      for (\r\n        let index = 0;\r\n        index < ConfigService.settings.core.simultaneousDownloads;\r\n        index++\r\n      ) {\r\n        this.downloadNext();\r\n      }\r\n    }\r\n  }\r\n\r\n  public pauseAll(): void {}\r\n\r\n  public removeAll(): void {\r\n    this.files.forEach((item, index) => {\r\n      const that = this as BlobDownloader;\r\n      that.abortDownload(item);\r\n    });\r\n    this.files.length = 0;\r\n    this.queue.length = 0;\r\n    this.downloading.length = 0;\r\n    this._isWorking = false;\r\n    this.updateOverallSize(this.getSize());\r\n    this.updateOverallProgress(this.transferType, this.getProgress());\r\n  }\r\n\r\n  public removeItem(item: IDatatransferItem): void {\r\n    this.abortDownload(item);\r\n    this.removeItemFromArray(item, this.files);\r\n    this.removeItemFromArray(item, this.queue);\r\n    this.removeItemFromArray(item, this.downloading);\r\n    this.downloadNext();\r\n  }\r\n\r\n  private removeItemFromArray(\r\n    item: IDatatransferItem,\r\n    array: IDatatransferItem[]\r\n  ): void {\r\n    for (let i = array.length - 1; i >= 0; i--) {\r\n      if (array[i] === item) {\r\n        array.splice(i, 1);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  public retryItem(item: IDatatransferItem): void {\r\n    this.abortDownload(item);\r\n    this.removeItemFromArray(item, this.queue);\r\n    this.removeItemFromArray(item, this.downloading);\r\n    this._isWorking = this.downloading.length > 0;\r\n    item.externalItem.progress = 0;\r\n    this.updateItemProgress(item, item.externalItem.progress);\r\n    this.changeItemStatus(item, TransferStatus.Queued);\r\n    this.queue.push(item);\r\n    this.initDownload(item);\r\n    this.downloadNext();\r\n  }\r\n\r\n  public download(filename: string, url: string, sizeInBytes: number): void {\r\n    const newItem = new DatatransferItem({\r\n      id: this.generateUniqueIdentifier(),\r\n      name: filename,\r\n      sizeContainer: new SizeContainer({\r\n        decimalByteUnit: DecimalByteUnit.Byte,\r\n        decimalByteUnitSize: sizeInBytes,\r\n      }),\r\n      progressContainer: new ProgressContainer(sizeInBytes),\r\n      transferType: TransferType.Download,\r\n      status: TransferStatus.Queued,\r\n      externalItem: {\r\n        url,\r\n        progress: 0,\r\n        size: sizeInBytes,\r\n        lastProgressCallback: new Date(),\r\n      },\r\n    });\r\n\r\n    this.addItem(newItem);\r\n    this.files.push(newItem);\r\n    this.queue.push(newItem);\r\n    this.initDownload(newItem);\r\n    this.downloadNext();\r\n  }\r\n\r\n  private initDownload(item: IDatatransferItem): void {\r\n    const xhr = new XMLHttpRequest();\r\n    item.externalItem.xhr = xhr;\r\n\r\n    xhr.open(ConfigService.settings.core.downloadMethod, item.externalItem.url);\r\n    xhr.timeout = ConfigService.settings.core.downloadXhrTimeout;\r\n    xhr.withCredentials = ConfigService.settings.core.downloadWithCredentials;\r\n\r\n    // Add data from header options\r\n    let customHeaders = ConfigService.settings.core.downloadHeaders;\r\n    if (typeof customHeaders === \"function\") {\r\n      customHeaders = customHeaders(item);\r\n    }\r\n    this.commonUtil.each(customHeaders, function (k: string, v: string) {\r\n      xhr.setRequestHeader(k, v);\r\n    });\r\n\r\n    xhr.responseType = \"blob\";\r\n    xhr.onloadstart = function (e) {\r\n      const that = this as BlobDownloader;\r\n      that.changeItemStatus(item, TransferStatus.Downloading);\r\n    }.bind(this);\r\n    xhr.onprogress = function (e) {\r\n      const that = this as BlobDownloader;\r\n      if (\r\n        new Date().getTime() -\r\n          item.externalItem.lastProgressCallback.getTime() >\r\n        that.throttleProgressCallbacks * 1000\r\n      ) {\r\n        item.externalItem.progress = e.loaded / e.total;\r\n        that.updateItemProgress(item, item.externalItem.progress);\r\n        that.updateOverallProgress(that.transferType, that.getProgress());\r\n        item.externalItem.lastProgressCallback = new Date();\r\n      }\r\n    }.bind(this);\r\n    xhr.onloadend = function (e) {\r\n      /*\r\n            Value\tState\tDescription\r\n            0\tUNSENT\tClient has been created. open() not called yet.\r\n            1\tOPENED\topen() has been called.\r\n            2\tHEADERS_RECEIVED\tsend() has been called, and headers and status are available.\r\n            3\tLOADING\tDownloading; responseText holds partial data.\r\n            4\tDONE\tThe operation is complete.\r\n            */\r\n      const that = this as BlobDownloader;\r\n      if (xhr.readyState === 4) {\r\n        item.externalItem.progress = 1;\r\n        that.updateItemProgress(item, item.externalItem.progress);\r\n        if (xhr.status === 200) {\r\n          that.changeItemStatus(item, TransferStatus.Finished);\r\n          if (ConfigService.settings.core.saveDownloadFileAs) {\r\n            ConfigService.settings.core.saveDownloadFileAs(\r\n              xhr.response,\r\n              item.name\r\n            );\r\n          } else {\r\n            saveAs(xhr.response, item.name);\r\n          }\r\n        } else if (xhr.status !== 0) {\r\n          // don't change status for aborted items\r\n          that.changeItemStatus(item, TransferStatus.Failed);\r\n        }\r\n        that.removeItemFromArray(item, that.downloading);\r\n        that.downloadNext();\r\n      }\r\n    }.bind(this);\r\n  }\r\n\r\n  private downloadNext(): void {\r\n    this.updateOverallSize(this.getSize());\r\n    this.updateOverallProgress(this.transferType, this.getProgress());\r\n    if (\r\n      this.downloading.length <\r\n      ConfigService.settings.core.simultaneousDownloads\r\n    ) {\r\n      const item = this.queue.shift();\r\n      if (!!item && !!item.externalItem && !!item.externalItem.xhr) {\r\n        this.changeItemStatus(item, TransferStatus.Downloading);\r\n        this.downloading.push(item);\r\n        this._isWorking = this.downloading.length > 0;\r\n        item.externalItem.xhr.send();\r\n      }\r\n    }\r\n  }\r\n\r\n  private abortDownload(item: IDatatransferItem): void {\r\n    if (!!item && !!item.externalItem && !!item.externalItem.xhr) {\r\n      item.externalItem.xhr.abort();\r\n      item.externalItem.xhr = null;\r\n    }\r\n  }\r\n\r\n  private getSize(): number {\r\n    let totalSize = 0;\r\n    this.files.forEach((file, index) => {\r\n      totalSize += file.externalItem.size;\r\n    });\r\n    return totalSize;\r\n  }\r\n\r\n  private getProgress(): number {\r\n    let totalDone = 0;\r\n    let totalSize = 0;\r\n    this.files.forEach((file, index) => {\r\n      let currentFileProgress = file.externalItem.progress;\r\n      if (file.status === TransferStatus.Failed) {\r\n        currentFileProgress = 1;\r\n      }\r\n      totalDone += currentFileProgress * file.externalItem.size;\r\n      totalSize += file.externalItem.size;\r\n    });\r\n    return totalSize > 0 ? totalDone / totalSize : 0;\r\n  }\r\n}\r\n","import { Injectable, NgZone } from \"@angular/core\";\r\nimport { MatDialog } from \"@angular/material/dialog\";\r\nimport { LoggerService } from \"../services/logger.service\";\r\nimport { DatatransferStore } from \"../stores/datatransfer.store\";\r\nimport { DateUtil } from \"../utils/date.util\";\r\nimport { PaginationService } from \"../services/pagination.service\";\r\nimport { ExportService } from \"../services/export.service\";\r\nimport { DatatransferFacade } from \"../facades/datatransfer.facade\";\r\nimport { ResumableJsUploader } from \"../io/uploaders/resumablejs.uploader\";\r\nimport { BlobDownloader } from \"../io/downloaders/blob.downloader\";\r\n\r\n@Injectable()\r\nexport class DatatransferFacadeFactory {\r\n  private facade1: DatatransferFacade;\r\n\r\n  constructor(\r\n    private logger: LoggerService,\r\n    private zone: NgZone,\r\n    private store: DatatransferStore,\r\n    private dateUtil: DateUtil,\r\n    private paginationService: PaginationService,\r\n    private exportService: ExportService,\r\n    private dialog: MatDialog,\r\n    private resumableUploader: ResumableJsUploader,\r\n    private blobDownloader: BlobDownloader\r\n  ) {}\r\n\r\n  // TODO: pass arguments to define which uploader/downloader implementation should be used\r\n  public createDatatransferFacade(): DatatransferFacade {\r\n    if (!this.facade1) {\r\n      this.facade1 = new DatatransferFacade(\r\n        this.logger,\r\n        this.zone,\r\n        this.store,\r\n        this.dateUtil,\r\n        this.paginationService,\r\n        this.exportService,\r\n        this.resumableUploader,\r\n        this.blobDownloader,\r\n        this.dialog\r\n      );\r\n    }\r\n    return this.facade1;\r\n  }\r\n}\r\n","import { Component, OnInit, ViewChild, ComponentFactoryResolver } from '@angular/core';\r\nimport { CustomEventType, CustomEventTypeExtensions } from './enums/custom-event-type.enum';\r\nimport { HostDirective } from './directives/host.directive';\r\nimport { MainComponent } from './components/main.component';\r\nimport { DatatransferFacade } from './facades/datatransfer.facade';\r\nimport { DatatransferFacadeFactory } from './factories/datatransfer-facade.factory';\r\nimport { ConfigService } from './services/config.service';\r\nimport { PaginationService } from './services/pagination.service';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'angular-material-datatransfer-lib',\r\n  templateUrl: './angular-material-datatransfer.component.html'\r\n})\r\nexport class AngularMaterialDatatransferComponent implements OnInit {\r\n\r\n  @ViewChild(HostDirective, { static: true }) amdHost: HostDirective;\r\n\r\n  private datatransferFacade: DatatransferFacade;\r\n\r\n  constructor(private componentFactoryResolver: ComponentFactoryResolver,\r\n              private datatransferFacadeFactory: DatatransferFacadeFactory,\r\n              private configService: ConfigService,\r\n              private paginationService: PaginationService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    document.dispatchEvent(new Event(CustomEventTypeExtensions.toString(CustomEventType.INIT)));\r\n  }\r\n\r\n  public create(config: any): void {\r\n    this.setConfig(config);\r\n  }\r\n\r\n  public setConfig(config: any): void {\r\n    this.configService.load(config);\r\n    this.paginationService.setRppOptions(ConfigService.settings.core.paginationRppOptions);\r\n    this.datatransferFacade = this.datatransferFacadeFactory.createDatatransferFacade();\r\n\r\n    const viewContainerRef = this.amdHost.viewContainerRef;\r\n    viewContainerRef.clear();\r\n\r\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(MainComponent);\r\n    const componentRef = viewContainerRef.createComponent(componentFactory);\r\n    const componentRefInstance = componentRef.instance as MainComponent;\r\n    componentRefInstance.datatransferFacade = this.datatransferFacade;\r\n  }\r\n\r\n  public download(filename: string, url: string, size: number): void {\r\n    this.datatransferFacade.download(filename, url, size);\r\n  }\r\n}\r\n","<div class=\"angular-material-datatransfer\">\r\n    <ng-template amd-host></ng-template>\r\n</div>","import { Injectable } from '@angular/core';\r\nimport { IDatatransferItem, DatatransferItem } from '../models/datatransfer-item.model';\r\nimport { SizeContainer } from '../models/size-container.model';\r\nimport { DecimalByteUnit } from '../enums/decimal-byte-unit.enum';\r\nimport { ProgressContainer } from '../models/progress-container.model';\r\nimport { TransferType } from '../enums/transfer-type.enum';\r\nimport { TransferStatus } from '../enums/transfer-status.enum';\r\nimport { PreprocessContainer } from '../models/preprocess-container.model';\r\n\r\n@Injectable()\r\nexport class DemoService {\r\n  title = 'angular-material-datatransfer';\r\n\r\n  testItems: IDatatransferItem[] = [\r\n    new DatatransferItem({\r\n      id: '1',\r\n      name: 'DICOM_patientXY_1.dcm',\r\n      path: '/mnt/sdcard/folder1/a/b/',\r\n      sizeContainer: new SizeContainer({ decimalByteUnit: DecimalByteUnit.MB, decimalByteUnitSize: 15 }),\r\n      progressContainer: new ProgressContainer(15 * 1000 * 1000),\r\n      transferType: TransferType.Upload,\r\n      status: TransferStatus.Uploading\r\n    }),\r\n    new DatatransferItem({\r\n      id: '2',\r\n      name: 'DICOM_patientXY_2.dcm',\r\n      path: '/mnt/sdcard/folder1/a/b/',\r\n      sizeContainer: new SizeContainer({ decimalByteUnit: DecimalByteUnit.MB, decimalByteUnitSize: 17 }),\r\n      transferType: TransferType.Upload,\r\n      status: TransferStatus.Failed\r\n    }),\r\n    new DatatransferItem({\r\n      id: '3',\r\n      name: 'DICOM_patientXY_3.dcm',\r\n      path: '/mnt/sdcard/folder1/a/b/',\r\n      preprocessContainer: new PreprocessContainer({ percent: 30 }),\r\n      sizeContainer: new SizeContainer({ decimalByteUnit: DecimalByteUnit.MB, decimalByteUnitSize: 13 }),\r\n      transferType: TransferType.Upload,\r\n      status: TransferStatus.Preprocessing\r\n    }),\r\n    new DatatransferItem({\r\n      id: '4',\r\n      name: 'DICOM_patientXY_4.dcm',\r\n      path: '/mnt/sdcard/folder1/a/b/',\r\n      sizeContainer: new SizeContainer({ decimalByteUnit: DecimalByteUnit.MB, decimalByteUnitSize: 11 }),\r\n      transferType: TransferType.Upload,\r\n      status: TransferStatus.Queued,\r\n    }),\r\n    new DatatransferItem({\r\n      id: '5',\r\n      name: 'SMIR.Thorax.089Y.M.CT.7.000.dcm.zip',\r\n      path: '/',\r\n      sizeContainer: new SizeContainer({ decimalByteUnit: DecimalByteUnit.GB, decimalByteUnitSize: 2 }),\r\n      transferType: TransferType.Download,\r\n      status: TransferStatus.Queued\r\n    }),\r\n    new DatatransferItem({\r\n      id: '6',\r\n      name: 'NIFTI_patientXY.nii',\r\n      path: '/mnt/sdcard/folder2/d/',\r\n      sizeContainer: new SizeContainer({ decimalByteUnit: DecimalByteUnit.GB, decimalByteUnitSize: 12 }),\r\n      transferType: TransferType.Upload,\r\n      status: TransferStatus.Queued,\r\n    })\r\n  ];\r\n}\r\n","import { NgModule, ApplicationRef } from \"@angular/core\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { MatButtonModule } from \"@angular/material/button\";\r\nimport { MatCheckboxModule } from \"@angular/material/checkbox\";\r\nimport { MatDialogModule } from \"@angular/material/dialog\";\r\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\r\nimport { MatIconModule } from \"@angular/material/icon\";\r\nimport { MatInputModule } from \"@angular/material/input\";\r\nimport { MatMenuModule } from \"@angular/material/menu\";\r\nimport { MatProgressBarModule } from \"@angular/material/progress-bar\";\r\nimport { MatProgressSpinnerModule } from \"@angular/material/progress-spinner\";\r\nimport { MatSelectModule } from \"@angular/material/select\";\r\nimport { MatTooltipModule } from \"@angular/material/tooltip\";\r\n\r\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\r\n\r\nimport { AngularMaterialDatatransferComponent } from \"./angular-material-datatransfer.component\";\r\nimport { MainComponent } from \"./components/main.component\";\r\nimport { BrowseDialogComponent } from \"./components/browse-dialog.component\";\r\nimport { DropzoneComponent } from \"./components/dropzone.component\";\r\nimport { EditDialogComponent } from \"./components/edit-dialog.component\";\r\nimport { PaginationComponent } from \"./components/pagination.component\";\r\nimport { ProgressComponent } from \"./components/progress.component\";\r\nimport { ConfigService } from \"./services/config.service\";\r\nimport { LoggerService } from \"./services/logger.service\";\r\nimport { PaginationService } from \"./services/pagination.service\";\r\nimport { ExportService } from \"./services/export.service\";\r\nimport { DemoService } from \"./services/demo.service\";\r\nimport { CryptoService } from \"./services/crypto.service\";\r\nimport { DatatransferStore } from \"./stores/datatransfer.store\";\r\nimport { DatatransferFacadeFactory } from \"./factories/datatransfer-facade.factory\";\r\nimport { CommonUtil } from \"./utils/common.util\";\r\nimport { DateUtil } from \"./utils/date.util\";\r\nimport { DecimalByteUnitUtil } from \"./utils/decimal-byte-unit.util\";\r\nimport { GuidUtil } from \"./utils/guid.util\";\r\nimport { CsvExporter } from \"./io/exporters/csv.exporter\";\r\nimport { JsonExporter } from \"./io/exporters/json.exporter\";\r\nimport { ResumableJsUploader } from \"./io/uploaders/resumablejs.uploader\";\r\nimport { BlobDownloader } from \"./io/downloaders/blob.downloader\";\r\nimport { HostDirective } from \"./directives/host.directive\";\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AngularMaterialDatatransferComponent,\r\n    MainComponent,\r\n    BrowseDialogComponent,\r\n    DropzoneComponent,\r\n    EditDialogComponent,\r\n    PaginationComponent,\r\n    ProgressComponent,\r\n    HostDirective,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatButtonModule,\r\n    MatCheckboxModule,\r\n    MatDialogModule,\r\n    MatFormFieldModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatMenuModule,\r\n    MatProgressBarModule,\r\n    MatProgressSpinnerModule,\r\n    MatSelectModule,\r\n    MatTooltipModule,\r\n    FlexLayoutModule,\r\n  ],\r\n  exports: [AngularMaterialDatatransferComponent],\r\n  entryComponents: [MainComponent, BrowseDialogComponent, EditDialogComponent],\r\n  providers: [\r\n    ConfigService,\r\n    LoggerService,\r\n    PaginationService,\r\n    ExportService,\r\n    DemoService,\r\n    CryptoService,\r\n    DatatransferStore,\r\n    DatatransferFacadeFactory,\r\n    CommonUtil,\r\n    DateUtil,\r\n    DecimalByteUnitUtil,\r\n    GuidUtil,\r\n    CsvExporter,\r\n    JsonExporter,\r\n    ResumableJsUploader,\r\n    BlobDownloader,\r\n  ],\r\n})\r\nexport class AngularMaterialDatatransferModule {\r\n  constructor(public appRef: ApplicationRef) {}\r\n}\r\n"]}