import { Injectable } from '@angular/core';
import { EnumExtension } from '../extensions/enum.extension';
import { DecimalByteUnit } from '../enums/decimal-byte-unit.enum';
import * as i0 from "@angular/core";
export class DecimalByteUnitUtil {
    constructor() {
        this.C_KB = Math.pow(10, 3);
        this.C_MB = Math.pow(10, 6);
        this.C_GB = Math.pow(10, 9);
        this.C_TB = Math.pow(10, 12);
        this.C_PB = Math.pow(10, 15);
        this.MAX = Number.MAX_VALUE;
        this.byteUnits = EnumExtension.getNames(DecimalByteUnit);
    }
    multiply(number, multiplier) {
        const limit = this.MAX / multiplier;
        if (number > limit) {
            return Number.MAX_VALUE;
        }
        if (number < -limit) {
            return Number.MIN_VALUE;
        }
        return number * multiplier;
    }
    convert(number, fromUnit, toUnit) {
        const bytes = this.toBytes(number, fromUnit);
        switch (toUnit) {
            case DecimalByteUnit.Byte:
                return bytes;
            case DecimalByteUnit.KB:
                return bytes / this.C_KB;
            case DecimalByteUnit.MB:
                return bytes / this.C_MB;
            case DecimalByteUnit.GB:
                return bytes / this.C_GB;
            case DecimalByteUnit.TB:
                return bytes / this.C_TB;
            case DecimalByteUnit.PB:
                return bytes / this.C_PB;
        }
        return number;
    }
    toBytes(number, fromUnit) {
        switch (fromUnit) {
            case DecimalByteUnit.Byte:
                return number;
            case DecimalByteUnit.KB:
                return this.multiply(number, this.C_KB);
            case DecimalByteUnit.MB:
                return this.multiply(number, this.C_MB);
            case DecimalByteUnit.GB:
                return this.multiply(number, this.C_GB);
            case DecimalByteUnit.TB:
                return this.multiply(number, this.C_TB);
            case DecimalByteUnit.PB:
                return this.multiply(number, this.C_PB);
        }
        return number;
    }
    format(number, fromUnit) {
        let result;
        result = [DecimalByteUnit.Byte, this.toBytes(number, fromUnit)];
        for (const currentUnit of this.byteUnits) {
            if (Math.abs(result[1]) < 1000) {
                result[0] = DecimalByteUnit[currentUnit];
                break;
            }
            else {
                result[1] /= 1000;
            }
        }
        result[1] = Number(result[1].toFixed(2));
        return result;
    }
}
DecimalByteUnitUtil.ɵfac = function DecimalByteUnitUtil_Factory(t) { return new (t || DecimalByteUnitUtil)(); };
DecimalByteUnitUtil.ɵprov = i0.ɵɵdefineInjectable({ token: DecimalByteUnitUtil, factory: DecimalByteUnitUtil.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(DecimalByteUnitUtil, [{
        type: Injectable
    }], null, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjaW1hbC1ieXRlLXVuaXQudXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FtZC1saWIvc3JjL2xpYi91dGlscy9kZWNpbWFsLWJ5dGUtdW5pdC51dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzdELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQzs7QUFHbEUsTUFBTSxPQUFPLG1CQUFtQjtJQURoQztRQUVJLFNBQUksR0FBVyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMvQixTQUFJLEdBQVcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDL0IsU0FBSSxHQUFXLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQy9CLFNBQUksR0FBVyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNoQyxTQUFJLEdBQVcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFaEMsUUFBRyxHQUFXLE1BQU0sQ0FBQyxTQUFTLENBQUM7UUFFL0IsY0FBUyxHQUFHLGFBQWEsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUM7S0FrRXZEO0lBaEVXLFFBQVEsQ0FBQyxNQUFjLEVBQUUsVUFBa0I7UUFDL0MsTUFBTSxLQUFLLEdBQVcsSUFBSSxDQUFDLEdBQUcsR0FBRyxVQUFVLENBQUM7UUFFNUMsSUFBSSxNQUFNLEdBQUcsS0FBSyxFQUFFO1lBQ2hCLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQztTQUMzQjtRQUNELElBQUksTUFBTSxHQUFHLENB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bUJBQW1CO3VGQUFuQixtQkFBbUI7Y0FEL0IsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRW51bUV4dGVuc2lvbiB9IGZyb20gJy4uL2V4dGVuc2lvbnMvZW51bS5leHRlbnNpb24nO1xyXG5pbXBvcnQgeyBEZWNpbWFsQnl0ZVVuaXQgfSBmcm9tICcuLi9lbnVtcy9kZWNpbWFsLWJ5dGUtdW5pdC5lbnVtJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIERlY2ltYWxCeXRlVW5pdFV0aWwge1xyXG4gICAgQ19LQjogbnVtYmVyID0gTWF0aC5wb3coMTAsIDMpO1xyXG4gICAgQ19NQjogbnVtYmVyID0gTWF0aC5wb3coMTAsIDYpO1xyXG4gICAgQ19HQjogbnVtYmVyID0gTWF0aC5wb3coMTAsIDkpO1xyXG4gICAgQ19UQjogbnVtYmVyID0gTWF0aC5wb3coMTAsIDEyKTtcclxuICAgIENfUEI6IG51bWJlciA9IE1hdGgucG93KDEwLCAxNSk7XHJcblxyXG4gICAgTUFYOiBudW1iZXIgPSBOdW1iZXIuTUFYX1ZBTFVFO1xyXG5cclxuICAgIGJ5dGVVbml0cyA9IEVudW1FeHRlbnNpb24uZ2V0TmFtZXMoRGVjaW1hbEJ5dGVVbml0KTtcclxuXHJcbiAgICBwcml2YXRlIG11bHRpcGx5KG51bWJlcjogbnVtYmVyLCBtdWx0aXBsaWVyOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgICAgIGNvbnN0IGxpbWl0OiBudW1iZXIgPSB0aGlzLk1BWCAvIG11bHRpcGxpZXI7XHJcblxyXG4gICAgICAgIGlmIChudW1iZXIgPiBsaW1pdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyLk1BWF9WQUxVRTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG51bWJlciA8IC1saW1pdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyLk1JTl9WQUxVRTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBudW1iZXIgKiBtdWx0aXBsaWVyO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjb252ZXJ0KG51bWJlcjogbnVtYmVyLCBmcm9tVW5pdDogRGVjaW1hbEJ5dGVVbml0LCB0b1VuaXQ6IERlY2ltYWxCeXRlVW5pdCk6IG51bWJlciB7XHJcbiAgICAgICAgY29uc3QgYnl0ZXM6IG51bWJlciA9IHRoaXMudG9CeXRlcyhudW1iZXIsIGZyb21Vbml0KTtcclxuICAgICAgICBzd2l0Y2ggKHRvVW5pdCkge1xyXG4gICAgICAgICAgICBjYXNlIERlY2ltYWxCeXRlVW5pdC5CeXRlOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ5dGVzO1xyXG4gICAgICAgICAgICBjYXNlIERlY2ltYWxCeXRlVW5pdC5LQjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBieXRlcyAvIHRoaXMuQ19LQjtcclxuICAgICAgICAgICAgY2FzZSBEZWNpbWFsQnl0ZVVuaXQuTUI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYnl0ZXMgLyB0aGlzLkNfTUI7XHJcbiAgICAgICAgICAgIGNhc2UgRGVjaW1hbEJ5dGVVbml0LkdCOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ5dGVzIC8gdGhpcy5DX0dCO1xyXG4gICAgICAgICAgICBjYXNlIERlY2ltYWxCeXRlVW5pdC5UQjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBieXRlcyAvIHRoaXMuQ19UQjtcclxuICAgICAgICAgICAgY2FzZSBEZWNpbWFsQnl0ZVVuaXQuUEI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYnl0ZXMgLyB0aGlzLkNfUEI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudW1iZXI7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHRvQnl0ZXMobnVtYmVyOiBudW1iZXIsIGZyb21Vbml0OiBEZWNpbWFsQnl0ZVVuaXQpOiBudW1iZXIge1xyXG4gICAgICAgIHN3aXRjaCAoZnJvbVVuaXQpIHtcclxuICAgICAgICAgICAgY2FzZSBEZWNpbWFsQnl0ZVVuaXQuQnl0ZTpcclxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XHJcbiAgICAgICAgICAgIGNhc2UgRGVjaW1hbEJ5dGVVbml0LktCOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubXVsdGlwbHkobnVtYmVyLCB0aGlzLkNfS0IpO1xyXG4gICAgICAgICAgICBjYXNlIERlY2ltYWxCeXRlVW5pdC5NQjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm11bHRpcGx5KG51bWJlciwgdGhpcy5DX01CKTtcclxuICAgICAgICAgICAgY2FzZSBEZWNpbWFsQnl0ZVVuaXQuR0I6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tdWx0aXBseShudW1iZXIsIHRoaXMuQ19HQik7XHJcbiAgICAgICAgICAgIGNhc2UgRGVjaW1hbEJ5dGVVbml0LlRCOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubXVsdGlwbHkobnVtYmVyLCB0aGlzLkNfVEIpO1xyXG4gICAgICAgICAgICBjYXNlIERlY2ltYWxCeXRlVW5pdC5QQjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm11bHRpcGx5KG51bWJlciwgdGhpcy5DX1BCKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bWJlcjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZm9ybWF0KG51bWJlcjogbnVtYmVyLCBmcm9tVW5pdDogRGVjaW1hbEJ5dGVVbml0KTogW0RlY2ltYWxCeXRlVW5pdCwgbnVtYmVyXSB7XHJcbiAgICAgICAgbGV0IHJlc3VsdDogW0RlY2ltYWxCeXRlVW5pdCwgbnVtYmVyXTtcclxuICAgICAgICByZXN1bHQgPSBbRGVjaW1hbEJ5dGVVbml0LkJ5dGUsIHRoaXMudG9CeXRlcyhudW1iZXIsIGZyb21Vbml0KV07XHJcbiAgICAgICAgZm9yIChjb25zdCBjdXJyZW50VW5pdCBvZiB0aGlzLmJ5dGVVbml0cykge1xyXG4gICAgICAgICAgICBpZiAoTWF0aC5hYnMocmVzdWx0WzFdKSA8IDEwMDApIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdFswXSA9IERlY2ltYWxCeXRlVW5pdFtjdXJyZW50VW5pdF07XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdFsxXSAvPSAxMDAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlc3VsdFsxXSA9IE51bWJlcihyZXN1bHRbMV0udG9GaXhlZCgyKSk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxufVxyXG4iXX0=