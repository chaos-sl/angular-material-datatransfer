import { SizeContainer } from './size-container.model';
import { TransferType } from '../enums/transfer-type.enum';
import { TransferStatus } from '../enums/transfer-status.enum';
import { PreprocessContainer } from './preprocess-container.model';
import { ProgressContainer } from './progress-container.model';
export class DatatransferItem {
    constructor(init) {
        this.sizeContainer = new SizeContainer();
        this.preprocessContainer = new PreprocessContainer();
        this.progressContainer = new ProgressContainer(0);
        Object.assign(this, init);
    }
    get path() {
        return this._path;
    }
    set path(newPath) {
        this._path = newPath;
        this.displayPath = newPath;
        if (this.displayPath) {
            // remove last character
            if (this.displayPath.endsWith('/')) {
                this.displayPath = this.displayPath.slice(0, -1);
            }
            // replace all '/' with ' > '
            this.displayPath = this.displayPath.replace(/\//g, ' > ');
        }
    }
    get message() {
        return this._message;
    }
    set message(newMessage) {
        this._message = newMessage.toLowerCase().startsWith('<!doctype html') ? undefined : newMessage;
    }
    getStatusName() {
        return TransferStatus[this.status];
    }
    getTransferTypeName() {
        return TransferType[this.transferType];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YXRyYW5zZmVyLWl0ZW0ubW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbWQtbGliL3NyYy9saWIvbW9kZWxzL2RhdGF0cmFuc2Zlci1pdGVtLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBa0IsYUFBYSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdkUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzNELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUMvRCxPQUFPLEVBQXdCLG1CQUFtQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDekYsT0FBTyxFQUFzQixpQkFBaUIsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBbUJuRixNQUFNLE9BQU8sZ0JBQWdCO0lBbUMzQixZQUFtQixJQUFnQztRQUNqRCxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksYUFBYSxFQUFFLENBQUM7UUFDekMsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksbUJBQW1CLEVBQUUsQ0FBQztRQUNyRCxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsRCxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBcENELElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBQ0QsSUFBSSxJQUFJLENBQUMsT0FBZTtRQUNwQixJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQztRQUNyQixJQUFJLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQztRQUMzQixJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDcEIsd0JBQXdCO1lBQ3hCLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ2xDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDbEQ7WUFDRCw2QkFBNkI7WUFDN0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDM0Q7SUFDTCxDQUFDO0lBUUQsSUFBSSxPQUFPO1FBQ1QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7SUFDRCxJQUFJLE9BQU8sQ0FBQyxVQUFrQjtRQUM1QixJQUFJLENBQUMsUUFBUSxHQUFHLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUM7SUFDakcsQ0FBQztJQVdNLGFBQWE7UUFDbEIsT0FBTyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFTSxtQkFBbUI7UUFDeEIsT0FBTyxZQUFZLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3pDLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElTaXplQ29udGFpbmVyLCBTaXplQ29udGFpbmVyIH0gZnJvbSAnLi9zaXplLWNvbnRhaW5lci5tb2RlbCc7XHJcbmltcG9ydCB7IFRyYW5zZmVyVHlwZSB9IGZyb20gJy4uL2VudW1zL3RyYW5zZmVyLXR5cGUuZW51bSc7XHJcbmltcG9ydCB7IFRyYW5zZmVyU3RhdHVzIH0gZnJvbSAnLi4vZW51bXMvdHJhbnNmZXItc3RhdHVzLmVudW0nO1xyXG5pbXBvcnQgeyBJUHJlcHJvY2Vzc0NvbnRhaW5lciwgUHJlcHJvY2Vzc0NvbnRhaW5lciB9IGZyb20gJy4vcHJlcHJvY2Vzcy1jb250YWluZXIubW9kZWwnO1xyXG5pbXBvcnQgeyBJUHJvZ3Jlc3NDb250YWluZXIsIFByb2dyZXNzQ29udGFpbmVyIH0gZnJvbSAnLi9wcm9ncmVzcy1jb250YWluZXIubW9kZWwnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJRGF0YXRyYW5zZmVySXRlbSB7XHJcbiAgaWQ6IHN0cmluZztcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgcGF0aDogc3RyaW5nO1xyXG4gIGRpc3BsYXlQYXRoOiBzdHJpbmc7XHJcbiAgc2l6ZUNvbnRhaW5lcjogSVNpemVDb250YWluZXI7XHJcbiAgdHJhbnNmZXJUeXBlOiBUcmFuc2ZlclR5cGU7XHJcbiAgc3RhdHVzOiBUcmFuc2ZlclN0YXR1cztcclxuICBwcmVwcm9jZXNzQ29udGFpbmVyOiBJUHJlcHJvY2Vzc0NvbnRhaW5lcjtcclxuICBwcm9ncmVzc0NvbnRhaW5lcjogSVByb2dyZXNzQ29udGFpbmVyO1xyXG4gIG1lc3NhZ2U/OiBzdHJpbmc7XHJcbiAgaXNTZWxlY3RlZD86IGJvb2xlYW47XHJcbiAgZXh0ZXJuYWxJdGVtPzogYW55O1xyXG4gIGdldFN0YXR1c05hbWUoKTogc3RyaW5nO1xyXG4gIGdldFRyYW5zZmVyVHlwZU5hbWUoKTogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRGF0YXRyYW5zZmVySXRlbSBpbXBsZW1lbnRzIElEYXRhdHJhbnNmZXJJdGVtIHtcclxuICBwdWJsaWMgaWQ6IHN0cmluZztcclxuICBwdWJsaWMgbmFtZTogc3RyaW5nO1xyXG4gIHByaXZhdGUgX3BhdGg6IHN0cmluZztcclxuICBnZXQgcGF0aCgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuX3BhdGg7XHJcbiAgfVxyXG4gIHNldCBwYXRoKG5ld1BhdGg6IHN0cmluZykge1xyXG4gICAgICB0aGlzLl9wYXRoID0gbmV3UGF0aDtcclxuICAgICAgdGhpcy5kaXNwbGF5UGF0aCA9IG5ld1BhdGg7XHJcbiAgICAgIGlmICh0aGlzLmRpc3BsYXlQYXRoKSB7XHJcbiAgICAgICAgLy8gcmVtb3ZlIGxhc3QgY2hhcmFjdGVyXHJcbiAgICAgICAgaWYgKHRoaXMuZGlzcGxheVBhdGguZW5kc1dpdGgoJy8nKSkge1xyXG4gICAgICAgICAgdGhpcy5kaXNwbGF5UGF0aCA9IHRoaXMuZGlzcGxheVBhdGguc2xpY2UoMCwgLTEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyByZXBsYWNlIGFsbCAnLycgd2l0aCAnID4gJ1xyXG4gICAgICAgIHRoaXMuZGlzcGxheVBhdGggPSB0aGlzLmRpc3BsYXlQYXRoLnJlcGxhY2UoL1xcLy9nLCAnID4gJyk7XHJcbiAgICAgIH1cclxuICB9XHJcbiAgcHVibGljIGRpc3BsYXlQYXRoOiBzdHJpbmc7XHJcbiAgcHVibGljIHNpemVDb250YWluZXI6IElTaXplQ29udGFpbmVyO1xyXG4gIHB1YmxpYyB0cmFuc2ZlclR5cGU6IFRyYW5zZmVyVHlwZTtcclxuICBwdWJsaWMgc3RhdHVzOiBUcmFuc2ZlclN0YXR1cztcclxuICBwdWJsaWMgcHJlcHJvY2Vzc0NvbnRhaW5lcjogSVByZXByb2Nlc3NDb250YWluZXI7XHJcbiAgcHVibGljIHByb2dyZXNzQ29udGFpbmVyOiBJUHJvZ3Jlc3NDb250YWluZXI7XHJcbiAgcHJpdmF0ZSBfbWVzc2FnZTsgc3RyaW5nO1xyXG4gIGdldCBtZXNzYWdlKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5fbWVzc2FnZTtcclxuICB9XHJcbiAgc2V0IG1lc3NhZ2UobmV3TWVzc2FnZTogc3RyaW5nKSB7XHJcbiAgICB0aGlzLl9tZXNzYWdlID0gbmV3TWVzc2FnZS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoJzwhZG9jdHlwZSBodG1sJykgPyB1bmRlZmluZWQgOiBuZXdNZXNzYWdlO1xyXG4gIH1cclxuICBwdWJsaWMgaXNTZWxlY3RlZD86IGJvb2xlYW47XHJcbiAgcHVibGljIGV4dGVybmFsSXRlbT86IGFueTtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKGluaXQ/OiBQYXJ0aWFsPERhdGF0cmFuc2Zlckl0ZW0+KSB7XHJcbiAgICB0aGlzLnNpemVDb250YWluZXIgPSBuZXcgU2l6ZUNvbnRhaW5lcigpO1xyXG4gICAgdGhpcy5wcmVwcm9jZXNzQ29udGFpbmVyID0gbmV3IFByZXByb2Nlc3NDb250YWluZXIoKTtcclxuICAgIHRoaXMucHJvZ3Jlc3NDb250YWluZXIgPSBuZXcgUHJvZ3Jlc3NDb250YWluZXIoMCk7XHJcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIGluaXQpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldFN0YXR1c05hbWUoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBUcmFuc2ZlclN0YXR1c1t0aGlzLnN0YXR1c107XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0VHJhbnNmZXJUeXBlTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIFRyYW5zZmVyVHlwZVt0aGlzLnRyYW5zZmVyVHlwZV07XHJcbiAgfVxyXG59XHJcbiJdfQ==