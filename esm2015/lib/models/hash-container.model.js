import { PreprocessContainer } from './preprocess-container.model';
import { HashTypeExtensions } from '../enums/hash-type.enum';
import { EncodingTypeExtensions } from '../enums/encoding-type.enum';
export class HashContainer extends PreprocessContainer {
    constructor(file, hashTypeImplementation, encodingTypeImplementation, hashType, encodingType, inputEncodingType) {
        super();
        this.file = file;
        this.hashType = hashType;
        this.hashTypeString = HashTypeExtensions.toString(hashTypeImplementation, hashType);
        this.encodingType = encodingType;
        this.encodingTypeString = EncodingTypeExtensions.toString(encodingTypeImplementation, encodingType);
        this.inputEncodingType = inputEncodingType;
        this.inputEncodingTypeString = EncodingTypeExtensions.toString(encodingTypeImplementation, inputEncodingType);
        this.startDate = new Date();
        this.endDate = new Date();
        this.reader = new FileReader();
    }
}
export class StreamHashContainer extends HashContainer {
    constructor(file, hashTypeImplementation, encodingTypeImplementation, hashType, encodingType, inputEncodingType) {
        super(file, hashTypeImplementation, encodingTypeImplementation, hashType, encodingType, inputEncodingType);
        this.chunkSize = 0;
        this.offset = 0;
    }
    cancel(cancel) {
        super.cancel(cancel);
        this.offset = 0;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaC1jb250YWluZXIubW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbWQtbGliL3NyYy9saWIvbW9kZWxzL2hhc2gtY29udGFpbmVyLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBd0IsbUJBQW1CLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN6RixPQUFPLEVBQW9DLGtCQUFrQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDL0YsT0FBTyxFQUE0QyxzQkFBc0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBc0IvRyxNQUFNLE9BQU8sYUFBYyxTQUFRLG1CQUFtQjtJQWNsRCxZQUFtQixJQUFVLEVBQUUsc0JBQThDLEVBQUUsMEJBQXNELEVBQ2xILFFBQWtCLEVBQUUsWUFBMEIsRUFBRSxpQkFBK0I7UUFDOUYsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsY0FBYyxHQUFHLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxzQkFBc0IsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUNqQyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsc0JBQXNCLENBQUMsUUFBUSxDQUFDLDBCQUEwQixFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ3BHLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQztRQUMzQyxJQUFJLENBQUMsdUJBQXVCLEdBQUcsc0JBQXNCLENBQUMsUUFBUSxDQUFDLDBCQUEwQixFQUFFLGlCQUFpQixDQUFDLENBQUM7UUFDOUcsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQzVCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUMxQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksVUFBVSxFQUFFLENBQUM7SUFDbkMsQ0FBQztDQUNKO0FBRUQsTUFBTSxPQUFPLG1CQUFvQixTQUFRLGFBQWE7SUFJbEQsWUFBbUIsSUFBVSxFQUFFLHNCQUE4QyxFQUFFLDBCQUFzRCxFQUNsSCxRQUFrQixFQUFFLFlBQTBCLEVBQUUsaUJBQStCO1FBQzlGLEtBQUssQ0FBQyxJQUFJLEVBQUUsc0JBQXNCLEVBQUUsMEJBQTBCLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBQzNHLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQ25CLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ3BCLENBQUM7SUFFTSxNQUFNLENBQUMsTUFBZTtRQUN6QixLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ3BCLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElQcmVwcm9jZXNzQ29udGFpbmVyLCBQcmVwcm9jZXNzQ29udGFpbmVyIH0gZnJvbSAnLi9wcmVwcm9jZXNzLWNvbnRhaW5lci5tb2RlbCc7XHJcbmltcG9ydCB7IEhhc2hUeXBlLCBIYXNoVHlwZUltcGxlbWVudGF0aW9uLCBIYXNoVHlwZUV4dGVuc2lvbnMgfSBmcm9tICcuLi9lbnVtcy9oYXNoLXR5cGUuZW51bSc7XHJcbmltcG9ydCB7IEVuY29kaW5nVHlwZSwgRW5jb2RpbmdUeXBlSW1wbGVtZW50YXRpb24sIEVuY29kaW5nVHlwZUV4dGVuc2lvbnMgfSBmcm9tICcuLi9lbnVtcy9lbmNvZGluZy10eXBlLmVudW0nO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJSGFzaENvbnRhaW5lciBleHRlbmRzIElQcmVwcm9jZXNzQ29udGFpbmVyIHtcclxuICAgIGZpbGU6IEZpbGU7XHJcbiAgICBoYXNoVHlwZTogSGFzaFR5cGU7XHJcbiAgICBoYXNoVHlwZVN0cmluZzogc3RyaW5nO1xyXG4gICAgZW5jb2RpbmdUeXBlOiBFbmNvZGluZ1R5cGU7XHJcbiAgICBlbmNvZGluZ1R5cGVTdHJpbmc6IHN0cmluZztcclxuICAgIGlucHV0RW5jb2RpbmdUeXBlOiBFbmNvZGluZ1R5cGU7XHJcbiAgICBpbnB1dEVuY29kaW5nVHlwZVN0cmluZzogc3RyaW5nO1xyXG4gICAgc3RhcnREYXRlOiBEYXRlO1xyXG4gICAgZW5kRGF0ZTogRGF0ZTtcclxuICAgIGhhc2g6IGFueTtcclxuICAgIGhhc2hTdHJpbmc6IHN0cmluZztcclxuICAgIHJlYWRlcjogRmlsZVJlYWRlcjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJU3RyZWFtSGFzaENvbnRhaW5lciBleHRlbmRzIElIYXNoQ29udGFpbmVyIHtcclxuICAgIGNodW5rU2l6ZTogbnVtYmVyO1xyXG4gICAgb2Zmc2V0OiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBIYXNoQ29udGFpbmVyIGV4dGVuZHMgUHJlcHJvY2Vzc0NvbnRhaW5lciBpbXBsZW1lbnRzIElIYXNoQ29udGFpbmVyIHtcclxuICAgIHB1YmxpYyBmaWxlOiBGaWxlO1xyXG4gICAgcHVibGljIGhhc2hUeXBlOiBIYXNoVHlwZTtcclxuICAgIHB1YmxpYyBoYXNoVHlwZVN0cmluZzogc3RyaW5nO1xyXG4gICAgcHVibGljIGVuY29kaW5nVHlwZTogRW5jb2RpbmdUeXBlO1xyXG4gICAgcHVibGljIGVuY29kaW5nVHlwZVN0cmluZzogc3RyaW5nO1xyXG4gICAgcHVibGljIGlucHV0RW5jb2RpbmdUeXBlOiBFbmNvZGluZ1R5cGU7XHJcbiAgICBwdWJsaWMgaW5wdXRFbmNvZGluZ1R5cGVTdHJpbmc6IHN0cmluZztcclxuICAgIHB1YmxpYyBzdGFydERhdGU6IERhdGU7XHJcbiAgICBwdWJsaWMgZW5kRGF0ZTogRGF0ZTtcclxuICAgIHB1YmxpYyBoYXNoOiBhbnk7XHJcbiAgICBwdWJsaWMgaGFzaFN0cmluZzogc3RyaW5nO1xyXG4gICAgcHVibGljIHJlYWRlcjogRmlsZVJlYWRlcjtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoZmlsZTogRmlsZSwgaGFzaFR5cGVJbXBsZW1lbnRhdGlvbjogSGFzaFR5cGVJbXBsZW1lbnRhdGlvbiwgZW5jb2RpbmdUeXBlSW1wbGVtZW50YXRpb246IEVuY29kaW5nVHlwZUltcGxlbWVudGF0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIGhhc2hUeXBlOiBIYXNoVHlwZSwgZW5jb2RpbmdUeXBlOiBFbmNvZGluZ1R5cGUsIGlucHV0RW5jb2RpbmdUeXBlOiBFbmNvZGluZ1R5cGUpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMuZmlsZSA9IGZpbGU7XHJcbiAgICAgICAgdGhpcy5oYXNoVHlwZSA9IGhhc2hUeXBlO1xyXG4gICAgICAgIHRoaXMuaGFzaFR5cGVTdHJpbmcgPSBIYXNoVHlwZUV4dGVuc2lvbnMudG9TdHJpbmcoaGFzaFR5cGVJbXBsZW1lbnRhdGlvbiwgaGFzaFR5cGUpO1xyXG4gICAgICAgIHRoaXMuZW5jb2RpbmdUeXBlID0gZW5jb2RpbmdUeXBlO1xyXG4gICAgICAgIHRoaXMuZW5jb2RpbmdUeXBlU3RyaW5nID0gRW5jb2RpbmdUeXBlRXh0ZW5zaW9ucy50b1N0cmluZyhlbmNvZGluZ1R5cGVJbXBsZW1lbnRhdGlvbiwgZW5jb2RpbmdUeXBlKTtcclxuICAgICAgICB0aGlzLmlucHV0RW5jb2RpbmdUeXBlID0gaW5wdXRFbmNvZGluZ1R5cGU7XHJcbiAgICAgICAgdGhpcy5pbnB1dEVuY29kaW5nVHlwZVN0cmluZyA9IEVuY29kaW5nVHlwZUV4dGVuc2lvbnMudG9TdHJpbmcoZW5jb2RpbmdUeXBlSW1wbGVtZW50YXRpb24sIGlucHV0RW5jb2RpbmdUeXBlKTtcclxuICAgICAgICB0aGlzLnN0YXJ0RGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgdGhpcy5lbmREYXRlID0gbmV3IERhdGUoKTtcclxuICAgICAgICB0aGlzLnJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTdHJlYW1IYXNoQ29udGFpbmVyIGV4dGVuZHMgSGFzaENvbnRhaW5lciBpbXBsZW1lbnRzIElTdHJlYW1IYXNoQ29udGFpbmVyIHtcclxuICAgIHB1YmxpYyBjaHVua1NpemU6IG51bWJlcjtcclxuICAgIHB1YmxpYyBvZmZzZXQ6IG51bWJlcjtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoZmlsZTogRmlsZSwgaGFzaFR5cGVJbXBsZW1lbnRhdGlvbjogSGFzaFR5cGVJbXBsZW1lbnRhdGlvbiwgZW5jb2RpbmdUeXBlSW1wbGVtZW50YXRpb246IEVuY29kaW5nVHlwZUltcGxlbWVudGF0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIGhhc2hUeXBlOiBIYXNoVHlwZSwgZW5jb2RpbmdUeXBlOiBFbmNvZGluZ1R5cGUsIGlucHV0RW5jb2RpbmdUeXBlOiBFbmNvZGluZ1R5cGUpIHtcclxuICAgICAgICBzdXBlcihmaWxlLCBoYXNoVHlwZUltcGxlbWVudGF0aW9uLCBlbmNvZGluZ1R5cGVJbXBsZW1lbnRhdGlvbiwgaGFzaFR5cGUsIGVuY29kaW5nVHlwZSwgaW5wdXRFbmNvZGluZ1R5cGUpO1xyXG4gICAgICAgIHRoaXMuY2h1bmtTaXplID0gMDtcclxuICAgICAgICB0aGlzLm9mZnNldCA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNhbmNlbChjYW5jZWw6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5jYW5jZWwoY2FuY2VsKTtcclxuICAgICAgICB0aGlzLm9mZnNldCA9IDA7XHJcbiAgICB9XHJcbn1cclxuIl19