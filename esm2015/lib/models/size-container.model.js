import { ReflectiveInjector } from '@angular/core';
import { DecimalByteUnit } from '../enums/decimal-byte-unit.enum';
import { DecimalByteUnitUtil } from '../utils/decimal-byte-unit.util';
export class SizeContainer {
    constructor(init) {
        this.decimalByteUnit = DecimalByteUnit.MB;
        this.decimalByteUnitSize = 0;
        let injector = ReflectiveInjector.resolveAndCreate([DecimalByteUnitUtil]);
        this.decimalByteUnitUtil = injector.get(DecimalByteUnitUtil);
        this.update(init);
    }
    update(init) {
        if (!!this.decimalByteUnitUtil && !!init && !!init.decimalByteUnitSize) {
            this.updateDecimal(init.decimalByteUnit, init.decimalByteUnitSize);
        }
    }
    updateDecimal(decimalByteUnit, decimalByteUnitSize) {
        let convertResult = this.decimalByteUnitUtil.format(decimalByteUnitSize, decimalByteUnit);
        this.decimalByteUnit = convertResult[0];
        this.decimalByteUnitSize = convertResult[1];
        this.displayUnit = DecimalByteUnit[this.decimalByteUnit];
        this.displaySize = !!this.decimalByteUnitSize ? this.decimalByteUnitSize : 0;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2l6ZS1jb250YWluZXIubW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbWQtbGliL3NyYy9saWIvbW9kZWxzL3NpemUtY29udGFpbmVyLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDbEUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFXdEUsTUFBTSxPQUFPLGFBQWE7SUFTdEIsWUFBbUIsSUFBNkI7UUFIekMsb0JBQWUsR0FBb0IsZUFBZSxDQUFDLEVBQUUsQ0FBQztRQUN0RCx3QkFBbUIsR0FBRyxDQUFDLENBQUM7UUFHM0IsSUFBSSxRQUFRLEdBQUcsa0JBQWtCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUM7UUFDMUUsSUFBSSxDQUFDLG1CQUFtQixHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUM3RCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RCLENBQUM7SUFFTSxNQUFNLENBQUMsSUFBNkI7UUFDdkMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLG1CQUFtQixJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRTtZQUNwRSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7U0FDdEU7SUFDTCxDQUFDO0lBRU0sYUFBYSxDQUFDLGVBQWdDLEVBQUUsbUJBQTJCO1FBQzlFLElBQUksYUFBYSxHQUNiLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFFMUUsSUFBSSxDQUFDLGVBQWUsR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEMsSUFBSSxDQUFDLG1CQUFtQixHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUU1QyxJQUFJLENBQUMsV0FBVyxHQUFHLGVBQWUsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDekQsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqRixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZWZsZWN0aXZlSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRGVjaW1hbEJ5dGVVbml0IH0gZnJvbSAnLi4vZW51bXMvZGVjaW1hbC1ieXRlLXVuaXQuZW51bSc7XHJcbmltcG9ydCB7IERlY2ltYWxCeXRlVW5pdFV0aWwgfSBmcm9tICcuLi91dGlscy9kZWNpbWFsLWJ5dGUtdW5pdC51dGlsJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVNpemVDb250YWluZXIge1xyXG4gICAgZGlzcGxheVVuaXQ6IHN0cmluZztcclxuICAgIGRpc3BsYXlTaXplOiBudW1iZXI7XHJcbiAgICBkZWNpbWFsQnl0ZVVuaXQ6IERlY2ltYWxCeXRlVW5pdDtcclxuICAgIGRlY2ltYWxCeXRlVW5pdFNpemU6IG51bWJlcjtcclxuICAgIHVwZGF0ZShpbml0PzogUGFydGlhbDxTaXplQ29udGFpbmVyPik6IHZvaWQ7XHJcbiAgICB1cGRhdGVEZWNpbWFsKGRlY2ltYWxCeXRlVW5pdDogRGVjaW1hbEJ5dGVVbml0LCBkZWNpbWFsQnl0ZVVuaXRTaXplOiBudW1iZXIpOiB2b2lkO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU2l6ZUNvbnRhaW5lciBpbXBsZW1lbnRzIElTaXplQ29udGFpbmVyIHtcclxuXHJcbiAgICBwcml2YXRlIGRlY2ltYWxCeXRlVW5pdFV0aWw6IERlY2ltYWxCeXRlVW5pdFV0aWw7XHJcblxyXG4gICAgcHVibGljIGRpc3BsYXlVbml0OiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgZGlzcGxheVNpemU6IG51bWJlcjtcclxuICAgIHB1YmxpYyBkZWNpbWFsQnl0ZVVuaXQ6IERlY2ltYWxCeXRlVW5pdCA9IERlY2ltYWxCeXRlVW5pdC5NQjtcclxuICAgIHB1YmxpYyBkZWNpbWFsQnl0ZVVuaXRTaXplID0gMDtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoaW5pdD86IFBhcnRpYWw8U2l6ZUNvbnRhaW5lcj4pIHtcclxuICAgICAgICBsZXQgaW5qZWN0b3IgPSBSZWZsZWN0aXZlSW5qZWN0b3IucmVzb2x2ZUFuZENyZWF0ZShbRGVjaW1hbEJ5dGVVbml0VXRpbF0pO1xyXG4gICAgICAgIHRoaXMuZGVjaW1hbEJ5dGVVbml0VXRpbCA9IGluamVjdG9yLmdldChEZWNpbWFsQnl0ZVVuaXRVdGlsKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZShpbml0KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdXBkYXRlKGluaXQ/OiBQYXJ0aWFsPFNpemVDb250YWluZXI+KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCEhdGhpcy5kZWNpbWFsQnl0ZVVuaXRVdGlsICYmICEhaW5pdCAmJiAhIWluaXQuZGVjaW1hbEJ5dGVVbml0U2l6ZSkge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZURlY2ltYWwoaW5pdC5kZWNpbWFsQnl0ZVVuaXQsIGluaXQuZGVjaW1hbEJ5dGVVbml0U2l6ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB1cGRhdGVEZWNpbWFsKGRlY2ltYWxCeXRlVW5pdDogRGVjaW1hbEJ5dGVVbml0LCBkZWNpbWFsQnl0ZVVuaXRTaXplOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBsZXQgY29udmVydFJlc3VsdDogW0RlY2ltYWxCeXRlVW5pdCwgbnVtYmVyXSA9XHJcbiAgICAgICAgICAgIHRoaXMuZGVjaW1hbEJ5dGVVbml0VXRpbC5mb3JtYXQoZGVjaW1hbEJ5dGVVbml0U2l6ZSwgZGVjaW1hbEJ5dGVVbml0KTtcclxuXHJcbiAgICAgICAgdGhpcy5kZWNpbWFsQnl0ZVVuaXQgPSBjb252ZXJ0UmVzdWx0WzBdO1xyXG4gICAgICAgIHRoaXMuZGVjaW1hbEJ5dGVVbml0U2l6ZSA9IGNvbnZlcnRSZXN1bHRbMV07XHJcblxyXG4gICAgICAgIHRoaXMuZGlzcGxheVVuaXQgPSBEZWNpbWFsQnl0ZVVuaXRbdGhpcy5kZWNpbWFsQnl0ZVVuaXRdO1xyXG4gICAgICAgIHRoaXMuZGlzcGxheVNpemUgPSAhIXRoaXMuZGVjaW1hbEJ5dGVVbml0U2l6ZSA/IHRoaXMuZGVjaW1hbEJ5dGVVbml0U2l6ZSA6IDA7XHJcbiAgICB9XHJcbn1cclxuIl19