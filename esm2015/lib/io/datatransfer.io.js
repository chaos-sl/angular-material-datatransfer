import { ConfigService } from '../services/config.service';
import { StreamHashContainer } from '../models/hash-container.model';
import { HashTypeImplementation, HashTypeExtensions } from '../enums/hash-type.enum';
import { EncodingTypeImplementation, EncodingTypeExtensions } from '../enums/encoding-type.enum';
export class BaseDatatransfer {
    constructor(logger, guidUtil, cryptoService) {
        this.logger = logger;
        this.guidUtil = guidUtil;
        this.cryptoService = cryptoService;
        this.events = [];
        this._isWorking = false;
    }
    on(event, callback) {
        this.events.push(event.toLowerCase(), callback);
    }
    fire(...args) {
        const event = args[0].toLowerCase();
        // Find event listeners, and support pseudo-event `catchAll`
        for (let i = 0; i <= this.events.length; i += 2) {
            if (this.events[i] === event) {
                this.events[i + 1].apply(this, args.slice(1));
            }
            if (this.events[i] === 'catchall') {
                this.events[i + 1].apply(null, args);
            }
        }
    }
    updateZone() {
        this.fire('zoneUpdated');
    }
    changeItemStatus(item, status, message) {
        this.fire('itemStatusChanged', item, status, message);
    }
    updateItemProgress(item, progress) {
        this.fire('itemProgressUpdated', item, progress);
    }
    updateOverallProgress(transferType, progress) {
        this.fire('overallProgressUpdated', transferType, progress);
    }
    updateOverallSize(size) {
        this.fire('overallSizeUpdated', size);
    }
    isWorking() {
        return this._isWorking;
    }
    addItem(item) {
        this.fire('itemAdded', item);
    }
    generateUniqueIdentifier() {
        return this.guidUtil.createGuid();
    }
    preprocessHash(item, file, continueCallback, cancelCallback) {
        const successCallback = function (container) {
            const that = this;
            if (container.hashString) {
                // const seconds = (container.endDate.getTime() - container.startDate.getTime()) / 1000;
                // console.log('file hashing took ' + seconds + ' seconds');
                const xhr = new XMLHttpRequest();
                const responseHandler = function (e) {
                    // ignore response if container has been cancelled
                    if (!container.isCancelled()) {
                        if (xhr.status === 200) {
                            item.message = xhr.responseText;
                            cancelCallback();
                        }
                        else {
                            continueCallback();
                        }
                    }
                };
                xhr.addEventListener('load', responseHandler, false);
                xhr.addEventListener('error', responseHandler, false);
                xhr.addEventListener('timeout', responseHandler, false);
                let params = [];
                params = params.concat([
                    [ConfigService.settings.core.preprocessHashParameterName, container.hashString],
                    [ConfigService.settings.core.preprocessHashFileNameParameterName, item.name]
                ]
                    .map(function (pair) {
                    return [
                        pair[0], encodeURIComponent(pair[1])
                    ].join('=');
                }));
                xhr.open(ConfigService.settings.core.preprocessHashMethod, ConfigService.settings.core.getTarget('preprocessHash', params));
                xhr.send(null);
            }
            else {
                continueCallback();
            }
        }.bind(this);
        const errorCallback = function (event, container) {
            console.log(event);
            continueCallback();
        };
        if (!item.preprocessContainer.isCancelled() && item.preprocessContainer instanceof StreamHashContainer) {
            // continue
        }
        else {
            const hashType = HashTypeExtensions.toEnum(HashTypeImplementation.Internal, ConfigService.settings.core.preprocessHashFunctionName);
            const encodingType = EncodingTypeExtensions.toEnum(EncodingTypeImplementation.Internal, ConfigService.settings.core.preprocessHashEncodingName);
            const inputEncodingType = EncodingTypeExtensions.toEnum(EncodingTypeImplementation.Internal, ConfigService.settings.core.preprocessHashInputEncodingName);
            item.preprocessContainer = this.cryptoService.createStreamHashContainer(file, hashType, encodingType, inputEncodingType, successCallback, errorCallback);
        }
        // wait for the initial mat-progress-spinner animation to complete
        setTimeout(function () {
            item.preprocessContainer.run();
        }, 1000);
    }
}
//# sourceMappingURL=data:application/json;base64,