import { Injectable } from '@angular/core';
import { ProgressContainer } from '../models/progress-container.model';
import { TransferStatus } from '../enums/transfer-status.enum';
import * as i0 from "@angular/core";
export class DatatransferStore {
    constructor() {
        this.items = [];
        this.count = 0;
        this.failedCount = 0;
        this.uploadProgress = new ProgressContainer(0);
        this.downloadProgress = new ProgressContainer(0);
    }
    updateCount() {
        this.count = this.items.length;
    }
    updateFailedCount() {
        this.failedCount = this.getByStatus(TransferStatus.Failed).length;
    }
    getItems() {
        return this.items;
    }
    getSelected() {
        return this.items.filter((item) => item.isSelected === true);
    }
    getById(id) {
        return this.items.find((item) => item.id === id);
    }
    getIndexById(id) {
        return this.items.findIndex(i => i.id === id);
    }
    clear() {
        this.items.length = 0;
        this.updateCount();
        this.updateFailedCount();
    }
    addItem(item) {
        this.items.push(item);
        this.updateCount();
    }
    removeById(id) {
        const index = this.getIndexById(id);
        if (index > -1) {
            this.items.splice(index, 1);
            this.updateCount();
        }
    }
    getByStatus(status) {
        return this.items.filter((item) => item.status === status);
    }
}
DatatransferStore.ɵfac = function DatatransferStore_Factory(t) { return new (t || DatatransferStore)(); };
DatatransferStore.ɵprov = i0.ɵɵdefineInjectable({ token: DatatransferStore, factory: DatatransferStore.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(DatatransferStore, [{
        type: Injectable
    }], function () { return []; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YXRyYW5zZmVyLnN0b3JlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW1kLWxpYi9zcmMvbGliL3N0b3Jlcy9kYXRhdHJhbnNmZXIuc3RvcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQXNCLGlCQUFpQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDM0YsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLCtCQUErQixDQUFDOztBQUcvRCxNQUFNLE9BQU8saUJBQWlCO0lBUzFCO1FBUFEsVUFBSyxHQUF3QixFQUFFLENBQUM7UUFFakMsVUFBSyxHQUFHLENBQUMsQ0FBQztRQUNWLGdCQUFXLEdBQUcsQ0FBQyxDQUFDO1FBQ2hCLG1CQUFjLEdBQXVCLElBQUksaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUQscUJBQWdCLEdBQXVCLElBQUksaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFJdkUsQ0FBQztJQUVPLFdBQVc7UUFDZixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO0lBQ25DLENBQUM7SUFFTSxpQkFBaUI7UUFDcEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDdEUsQ0FBQztJQUVNLFFBQVE7UUFDWCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUVNLFdBQVc7UUFDZCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxLQUFLLElBQUksQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFFTSxPQUFPLENBQUMsRUFBVTtRQUNyQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFTSxZQUFZLENBQUMsRUFBVTtRQUMxQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRU0sS0FBSztRQUNSLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVNLE9BQU8sQ0FBQyxJQUF1QjtRQUNsQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVNLFVBQVUsQ0FBQyxFQUFVO1FBQ3hCLE1BQU0sS0FBSyxHQUFXLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDNUMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDWixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDNUIsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ3RCO0lBQ0wsQ0FBQztJQUVNLFdBQVcsQ0FBQyxNQUFzQjtRQUNyQyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLE1BQU0sQ0FBQyxDQUFDO0lBQy9ELENBQUM7O2tGQTFEUSxpQkFBaUI7eURBQWpCLGlCQUFpQixXQUFqQixpQkFBaUI7dUZBQWpCLGlCQUFpQjtjQUQ3QixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBJRGF0YXRyYW5zZmVySXRlbSB9IGZyb20gJy4uL21vZGVscy9kYXRhdHJhbnNmZXItaXRlbS5tb2RlbCc7XHJcbmltcG9ydCB7IElQcm9ncmVzc0NvbnRhaW5lciwgUHJvZ3Jlc3NDb250YWluZXIgfSBmcm9tICcuLi9tb2RlbHMvcHJvZ3Jlc3MtY29udGFpbmVyLm1vZGVsJztcclxuaW1wb3J0IHsgVHJhbnNmZXJTdGF0dXMgfSBmcm9tICcuLi9lbnVtcy90cmFuc2Zlci1zdGF0dXMuZW51bSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBEYXRhdHJhbnNmZXJTdG9yZSB7XHJcblxyXG4gICAgcHJpdmF0ZSBpdGVtczogSURhdGF0cmFuc2Zlckl0ZW1bXSA9IFtdO1xyXG5cclxuICAgIHB1YmxpYyBjb3VudCA9IDA7XHJcbiAgICBwdWJsaWMgZmFpbGVkQ291bnQgPSAwO1xyXG4gICAgcHVibGljIHVwbG9hZFByb2dyZXNzOiBJUHJvZ3Jlc3NDb250YWluZXIgPSBuZXcgUHJvZ3Jlc3NDb250YWluZXIoMCk7XHJcbiAgICBwdWJsaWMgZG93bmxvYWRQcm9ncmVzczogSVByb2dyZXNzQ29udGFpbmVyID0gbmV3IFByb2dyZXNzQ29udGFpbmVyKDApO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHVwZGF0ZUNvdW50KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuY291bnQgPSB0aGlzLml0ZW1zLmxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdXBkYXRlRmFpbGVkQ291bnQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5mYWlsZWRDb3VudCA9IHRoaXMuZ2V0QnlTdGF0dXMoVHJhbnNmZXJTdGF0dXMuRmFpbGVkKS5sZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldEl0ZW1zKCk6IElEYXRhdHJhbnNmZXJJdGVtW10ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLml0ZW1zO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRTZWxlY3RlZCgpOiBJRGF0YXRyYW5zZmVySXRlbVtdIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pdGVtcy5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0uaXNTZWxlY3RlZCA9PT0gdHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldEJ5SWQoaWQ6IHN0cmluZyk6IElEYXRhdHJhbnNmZXJJdGVtIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pdGVtcy5maW5kKChpdGVtKSA9PiBpdGVtLmlkID09PSBpZCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldEluZGV4QnlJZChpZDogc3RyaW5nKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pdGVtcy5maW5kSW5kZXgoaSA9PiBpLmlkID09PSBpZCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsZWFyKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuaXRlbXMubGVuZ3RoID0gMDtcclxuICAgICAgICB0aGlzLnVwZGF0ZUNvdW50KCk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVGYWlsZWRDb3VudCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhZGRJdGVtKGl0ZW06IElEYXRhdHJhbnNmZXJJdGVtKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5pdGVtcy5wdXNoKGl0ZW0pO1xyXG4gICAgICAgIHRoaXMudXBkYXRlQ291bnQoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVtb3ZlQnlJZChpZDogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgaW5kZXg6IG51bWJlciA9IHRoaXMuZ2V0SW5kZXhCeUlkKGlkKTtcclxuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xyXG4gICAgICAgICAgICB0aGlzLml0ZW1zLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQ291bnQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldEJ5U3RhdHVzKHN0YXR1czogVHJhbnNmZXJTdGF0dXMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pdGVtcy5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0uc3RhdHVzID09PSBzdGF0dXMpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==