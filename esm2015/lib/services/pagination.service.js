import { Injectable } from '@angular/core';
import { PaginationContainer } from '../models/pagination-container.model';
import { DatatransferStore } from '../stores/datatransfer.store';
import * as i0 from "@angular/core";
import * as i1 from "../stores/datatransfer.store";
export class PaginationService {
    constructor(datatransferStore) {
        this.datatransferStore = datatransferStore;
        this.paginatedItems = [];
        this.pagination = new PaginationContainer();
    }
    setRppOptions(rppOptions) {
        this.pagination.rppOptions = rppOptions;
        this.setPaginationContainer();
    }
    update(total) {
        if (total <= 0) {
            this.paginatedItems.length = 0;
        }
        this.pagination.total = total;
        this.setPaginationContainer();
    }
    setPaginationContainer() {
        const pageCount = this.pageCount();
        if (this.pagination.pages.length > pageCount) {
            this.pagination.pages.splice(pageCount);
        }
        else {
            for (let i = this.pagination.pages.length; i < pageCount; i++) {
                this.pagination.pages.push(i + 1);
            }
        }
        if (!this.pagination.pages.includes(this.pagination.page)) {
            this.pagination.page = 1;
        }
        if (!!this.pagination.rppOptions && this.pagination.rppOptions.length > 0
            && !this.pagination.rppOptions.includes(this.pagination.rpp)) {
            this.pagination.rpp = this.pagination.rppOptions[0];
        }
        this.onPaginationChange();
    }
    max() {
        return this.hasNext() ? this.pagination.page * this.pagination.rpp : this.pagination.total;
    }
    min() {
        return this.pagination.total > 0 ? this.pagination.page * this.pagination.rpp - this.pagination.rpp + 1 : 0;
    }
    first() {
        this.pagination.page = 1;
        this.onPaginationChange();
    }
    last() {
        this.pagination.page = this.pageCount();
        this.onPaginationChange();
    }
    hasNext() {
        return this.pagination.page * this.pagination.rpp < this.pagination.total;
    }
    hasPrevious() {
        return this.pagination.page > 1;
    }
    moveNext() {
        this.pagination.page++;
        this.onPaginationChange();
    }
    movePrevious() {
        this.pagination.page--;
        this.onPaginationChange();
    }
    setPage(page) {
        this.pagination.page = page;
        this.onPageChange();
    }
    onPageChange() {
        this.setPaginationContainer();
        this.onPaginationChange();
    }
    onRppChange() {
        this.setPaginationContainer();
        this.pagination.page = 1;
        this.onPaginationChange();
    }
    onPaginationChange() {
        const startIndex = (this.pagination.page - 1) * this.pagination.rpp;
        const endIndex = Math.min(startIndex + this.pagination.rpp, this.pagination.total);
        this.paginatedItems = this.datatransferStore.getItems().slice(startIndex, endIndex);
    }
    pageCount() {
        return this.pagination.total > 0 ? Math.ceil(this.pagination.total / (this.pagination.rpp > 0 ? this.pagination.rpp : 1)) : 1;
    }
    getPageByItemId(id) {
        const index = this.datatransferStore.getIndexById(id);
        if (index > -1) {
            return Math.ceil((index + 1) / this.pagination.rpp);
        }
    }
    setPageByItemId(id) {
        const page = this.getPageByItemId(id);
        if (this.pagination.page !== page) {
            this.setPage(page);
        }
    }
}
PaginationService.ɵfac = function PaginationService_Factory(t) { return new (t || PaginationService)(i0.ɵɵinject(i1.DatatransferStore)); };
PaginationService.ɵprov = i0.ɵɵdefineInjectable({ token: PaginationService, factory: PaginationService.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PaginationService, [{
        type: Injectable
    }], function () { return [{ type: i1.DatatransferStore }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,