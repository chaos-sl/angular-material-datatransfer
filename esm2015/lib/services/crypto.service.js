import { Injectable, NgZone } from '@angular/core';
import * as cryptoBrowserify from 'crypto-browserify';
import { HashTypeImplementation } from '../enums/hash-type.enum';
import { EncodingTypeImplementation } from '../enums/encoding-type.enum';
import { HashContainer, StreamHashContainer } from '../models/hash-container.model';
import * as i0 from "@angular/core";
export class CryptoService {
    constructor(zone) {
        this.zone = zone;
        // hash 4MB at a time
        this.STREAM_HASH_CHUNK_SIZE = 1024 * 1000 * 4;
        this.HASH_TYPE_IMPLEMENTATION = HashTypeImplementation.CryptoBrowserify;
        this.ENCODING_TYPE_IMPLEMENTATION = EncodingTypeImplementation.CryptoBrowserify;
        // Performance remains unchanged by running the hash function outside of Angular.
        // this.zone.runOutsideAngular(() => { }
    }
    createHashContainer(file, hashType, encodingType, inputEncodingType) {
        const container = new HashContainer(file, this.HASH_TYPE_IMPLEMENTATION, this.ENCODING_TYPE_IMPLEMENTATION, hashType, encodingType, inputEncodingType);
        container.hash = cryptoBrowserify.createHash(container.hashTypeString);
        container.reader.onload = function (event) {
            container.hashString = container.hash.update(event.target.result, container.inputEncodingTypeString)
                .digest(container.encodingTypeString);
            container.endDate = new Date();
            container.percent = 100;
        }.bind(container);
        container.doWork = function () {
            container.reader.readAsBinaryString(container.file);
        };
        return container;
    }
    createStreamHashContainer(file, hashType, encodingType, inputEncodingType, successCallback, errorCallback) {
        const container = new StreamHashContainer(file, this.HASH_TYPE_IMPLEMENTATION, this.ENCODING_TYPE_IMPLEMENTATION, hashType, encodingType, inputEncodingType);
        container.chunkSize = this.STREAM_HASH_CHUNK_SIZE;
        container.offset = 0;
        container.hash = cryptoBrowserify.createHash(container.hashTypeString);
        container.reader.onload = function (event) {
            const binary = event.target.result;
            if (container.offset + container.chunkSize >= container.file.size) {
                container.hash.end(binary, container.inputEncodingTypeString);
            }
            else {
                container.hash.write(binary, container.inputEncodingTypeString);
            }
            container.offset += container.chunkSize;
            container.doWork();
        }.bind(container);
        container.reader.onerror = function (event) {
            errorCallback(event, container);
        };
        container.doWork = function () {
            if (!container.isCancelled() && !container.isPaused()) {
                if (container.offset > container.file.size) {
                    container.hashString = container.hash.read().toString(container.encodingTypeString);
                    container.endDate = new Date();
                    container.percent = 100;
                    successCallback(container);
                    return;
                }
                const slice = container.file.slice(container.offset, container.offset + container.chunkSize);
                container.reader.readAsBinaryString(slice);
                container.percent = Math.round(container.offset / file.size * 100);
            }
        };
        return container;
    }
}
CryptoService.ɵfac = function CryptoService_Factory(t) { return new (t || CryptoService)(i0.ɵɵinject(i0.NgZone)); };
CryptoService.ɵprov = i0.ɵɵdefineInjectable({ token: CryptoService, factory: CryptoService.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(CryptoService, [{
        type: Injectable
    }], function () { return [{ type: i0.NgZone }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3J5cHRvLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbWQtbGliL3NyYy9saWIvc2VydmljZXMvY3J5cHRvLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxLQUFLLGdCQUFnQixNQUFNLG1CQUFtQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxzQkFBc0IsRUFBWSxNQUFNLHlCQUF5QixDQUFDO0FBQzNFLE9BQU8sRUFBRSwwQkFBMEIsRUFBZ0IsTUFBTSw2QkFBNkIsQ0FBQztBQUN2RixPQUFPLEVBQWtCLGFBQWEsRUFBd0IsbUJBQW1CLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQzs7QUFJMUgsTUFBTSxPQUFPLGFBQWE7SUFPdEIsWUFBb0IsSUFBWTtRQUFaLFNBQUksR0FBSixJQUFJLENBQVE7UUFMaEMscUJBQXFCO1FBQ0osMkJBQXNCLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLENBQUM7UUFDekMsNkJBQXdCLEdBQUcsc0JBQXNCLENBQUMsZ0JBQWdCLENBQUM7UUFDbkUsaUNBQTRCLEdBQUcsMEJBQTBCLENBQUMsZ0JBQWdCLENBQUM7UUFHeEYsaUZBQWlGO1FBQ2pGLHdDQUF3QztJQUM1QyxDQUFDO0lBRU0sbUJBQW1CLENBQUMsSUFBVSxFQUFFLFFBQWtCLEVBQUUsWUFBMEIsRUFDMUQsaUJBQStCO1FBRXRELE1BQU0sU0FBUyxHQUFHLElBQUksYUFBYSxDQUMvQixJQUFJLEVBQ0osSUFBSSxDQUFDLHdCQUF3QixFQUM3QixJQUFJLENBQUMsNEJBQTRCLEVBQ2pDLFFBQVEsRUFDUixZQUFZLEVBQ1osaUJBQWlCLENBQUMsQ0FBQztRQUV2QixTQUFTLENBQUMsSUFBSSxHQUFHLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLENB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QUcsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFDN0YsU0FBUyxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDM0MsU0FBUyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQzthQUN0RTtRQUNMLENBQUMsQ0FBQztRQUVGLE9BQU8sU0FBUyxDQUFDO0lBQ3JCLENBQUM7OzBFQXpGUSxhQUFhO3FEQUFiLGFBQWEsV0FBYixhQUFhO3VGQUFiLGFBQWE7Y0FEekIsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgKiBhcyBjcnlwdG9Ccm93c2VyaWZ5IGZyb20gJ2NyeXB0by1icm93c2VyaWZ5JztcclxuaW1wb3J0IHsgSGFzaFR5cGVJbXBsZW1lbnRhdGlvbiwgSGFzaFR5cGUgfSBmcm9tICcuLi9lbnVtcy9oYXNoLXR5cGUuZW51bSc7XHJcbmltcG9ydCB7IEVuY29kaW5nVHlwZUltcGxlbWVudGF0aW9uLCBFbmNvZGluZ1R5cGUgfSBmcm9tICcuLi9lbnVtcy9lbmNvZGluZy10eXBlLmVudW0nO1xyXG5pbXBvcnQgeyBJSGFzaENvbnRhaW5lciwgSGFzaENvbnRhaW5lciwgSVN0cmVhbUhhc2hDb250YWluZXIsIFN0cmVhbUhhc2hDb250YWluZXIgfSBmcm9tICcuLi9tb2RlbHMvaGFzaC1jb250YWluZXIubW9kZWwnO1xyXG5pbXBvcnQgeyBGaWxlUmVhZGVyRXZlbnQgfSBmcm9tICcuLi9leHRlbnNpb25zL2ZpbGUtcmVhZGVyLmV4dGVuc2lvbic7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBDcnlwdG9TZXJ2aWNlIHtcclxuXHJcbiAgICAvLyBoYXNoIDRNQiBhdCBhIHRpbWVcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgU1RSRUFNX0hBU0hfQ0hVTktfU0laRSA9IDEwMjQgKiAxMDAwICogNDtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgSEFTSF9UWVBFX0lNUExFTUVOVEFUSU9OID0gSGFzaFR5cGVJbXBsZW1lbnRhdGlvbi5DcnlwdG9Ccm93c2VyaWZ5O1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBFTkNPRElOR19UWVBFX0lNUExFTUVOVEFUSU9OID0gRW5jb2RpbmdUeXBlSW1wbGVtZW50YXRpb24uQ3J5cHRvQnJvd3NlcmlmeTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHpvbmU6IE5nWm9uZSkge1xyXG4gICAgICAgIC8vIFBlcmZvcm1hbmNlIHJlbWFpbnMgdW5jaGFuZ2VkIGJ5IHJ1bm5pbmcgdGhlIGhhc2ggZnVuY3Rpb24gb3V0c2lkZSBvZiBBbmd1bGFyLlxyXG4gICAgICAgIC8vIHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7IH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY3JlYXRlSGFzaENvbnRhaW5lcihmaWxlOiBGaWxlLCBoYXNoVHlwZTogSGFzaFR5cGUsIGVuY29kaW5nVHlwZTogRW5jb2RpbmdUeXBlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRFbmNvZGluZ1R5cGU6IEVuY29kaW5nVHlwZSk6IElIYXNoQ29udGFpbmVyIHtcclxuXHJcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gbmV3IEhhc2hDb250YWluZXIoXHJcbiAgICAgICAgICAgIGZpbGUsXHJcbiAgICAgICAgICAgIHRoaXMuSEFTSF9UWVBFX0lNUExFTUVOVEFUSU9OLFxyXG4gICAgICAgICAgICB0aGlzLkVOQ09ESU5HX1RZUEVfSU1QTEVNRU5UQVRJT04sXHJcbiAgICAgICAgICAgIGhhc2hUeXBlLFxyXG4gICAgICAgICAgICBlbmNvZGluZ1R5cGUsXHJcbiAgICAgICAgICAgIGlucHV0RW5jb2RpbmdUeXBlKTtcclxuXHJcbiAgICAgICAgY29udGFpbmVyLmhhc2ggPSBjcnlwdG9Ccm93c2VyaWZ5LmNyZWF0ZUhhc2goY29udGFpbmVyLmhhc2hUeXBlU3RyaW5nKTtcclxuXHJcbiAgICAgICAgY29udGFpbmVyLnJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbihldmVudDogRmlsZVJlYWRlckV2ZW50KSB7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lci5oYXNoU3RyaW5nID0gY29udGFpbmVyLmhhc2gudXBkYXRlKGV2ZW50LnRhcmdldC5yZXN1bHQsIGNvbnRhaW5lci5pbnB1dEVuY29kaW5nVHlwZVN0cmluZylcclxuICAgICAgICAgICAgICAgIC5kaWdlc3QoY29udGFpbmVyLmVuY29kaW5nVHlwZVN0cmluZyk7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lci5lbmREYXRlID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgY29udGFpbmVyLnBlcmNlbnQgPSAxMDA7XHJcbiAgICAgICAgfS5iaW5kKGNvbnRhaW5lcik7XHJcblxyXG4gICAgICAgIGNvbnRhaW5lci5kb1dvcmsgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgY29udGFpbmVyLnJlYWRlci5yZWFkQXNCaW5hcnlTdHJpbmcoY29udGFpbmVyLmZpbGUpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBjb250YWluZXI7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNyZWF0ZVN0cmVhbUhhc2hDb250YWluZXIoZmlsZTogRmlsZSwgaGFzaFR5cGU6IEhhc2hUeXBlLCBlbmNvZGluZ1R5cGU6IEVuY29kaW5nVHlwZSwgaW5wdXRFbmNvZGluZ1R5cGU6IEVuY29kaW5nVHlwZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjazogRnVuY3Rpb24sIGVycm9yQ2FsbGJhY2s6IEZ1bmN0aW9uKTogSVN0cmVhbUhhc2hDb250YWluZXIge1xyXG5cclxuICAgICAgICBjb25zdCBjb250YWluZXIgPSBuZXcgU3RyZWFtSGFzaENvbnRhaW5lcihcclxuICAgICAgICAgICAgZmlsZSxcclxuICAgICAgICAgICAgdGhpcy5IQVNIX1RZUEVfSU1QTEVNRU5UQVRJT04sXHJcbiAgICAgICAgICAgIHRoaXMuRU5DT0RJTkdfVFlQRV9JTVBMRU1FTlRBVElPTixcclxuICAgICAgICAgICAgaGFzaFR5cGUsXHJcbiAgICAgICAgICAgIGVuY29kaW5nVHlwZSxcclxuICAgICAgICAgICAgaW5wdXRFbmNvZGluZ1R5cGUpO1xyXG5cclxuICAgICAgICBjb250YWluZXIuY2h1bmtTaXplID0gdGhpcy5TVFJFQU1fSEFTSF9DSFVOS19TSVpFO1xyXG4gICAgICAgIGNvbnRhaW5lci5vZmZzZXQgPSAwO1xyXG4gICAgICAgIGNvbnRhaW5lci5oYXNoID0gY3J5cHRvQnJvd3NlcmlmeS5jcmVhdGVIYXNoKGNvbnRhaW5lci5oYXNoVHlwZVN0cmluZyk7XHJcblxyXG4gICAgICAgIGNvbnRhaW5lci5yZWFkZXIub25sb2FkID0gZnVuY3Rpb24oZXZlbnQ6IEZpbGVSZWFkZXJFdmVudCkge1xyXG4gICAgICAgICAgICBjb25zdCBiaW5hcnkgPSBldmVudC50YXJnZXQucmVzdWx0O1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvbnRhaW5lci5vZmZzZXQgKyBjb250YWluZXIuY2h1bmtTaXplID49IGNvbnRhaW5lci5maWxlLnNpemUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5oYXNoLmVuZChiaW5hcnksIGNvbnRhaW5lci5pbnB1dEVuY29kaW5nVHlwZVN0cmluZyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb250YWluZXIuaGFzaC53cml0ZShiaW5hcnksIGNvbnRhaW5lci5pbnB1dEVuY29kaW5nVHlwZVN0cmluZyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnRhaW5lci5vZmZzZXQgKz0gY29udGFpbmVyLmNodW5rU2l6ZTtcclxuXHJcbiAgICAgICAgICAgIGNvbnRhaW5lci5kb1dvcmsoKTtcclxuICAgICAgICB9LmJpbmQoY29udGFpbmVyKTtcclxuXHJcbiAgICAgICAgY29udGFpbmVyLnJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICAgICAgZXJyb3JDYWxsYmFjayhldmVudCwgY29udGFpbmVyKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb250YWluZXIuZG9Xb3JrID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmICghY29udGFpbmVyLmlzQ2FuY2VsbGVkKCkgJiYgIWNvbnRhaW5lci5pc1BhdXNlZCgpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29udGFpbmVyLm9mZnNldCA+IGNvbnRhaW5lci5maWxlLnNpemUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuaGFzaFN0cmluZyA9IGNvbnRhaW5lci5oYXNoLnJlYWQoKS50b1N0cmluZyhjb250YWluZXIuZW5jb2RpbmdUeXBlU3RyaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuZW5kRGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLnBlcmNlbnQgPSAxMDA7XHJcbiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc0NhbGxiYWNrKGNvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHNsaWNlID0gY29udGFpbmVyLmZpbGUuc2xpY2UoY29udGFpbmVyLm9mZnNldCwgY29udGFpbmVyLm9mZnNldCArIGNvbnRhaW5lci5jaHVua1NpemUpO1xyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyLnJlYWRlci5yZWFkQXNCaW5hcnlTdHJpbmcoc2xpY2UpO1xyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyLnBlcmNlbnQgPSBNYXRoLnJvdW5kKGNvbnRhaW5lci5vZmZzZXQgLyBmaWxlLnNpemUgKiAxMDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGNvbnRhaW5lcjtcclxuICAgIH1cclxuXHJcbn1cclxuIl19