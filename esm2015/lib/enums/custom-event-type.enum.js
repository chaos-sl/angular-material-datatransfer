export var CustomEventType;
(function (CustomEventType) {
    CustomEventType[CustomEventType["UNKNOWN"] = 0] = "UNKNOWN";
    // This event can be used to bootstrap the app module. An IAppConfig can be passed as detail payload.
    CustomEventType[CustomEventType["CREATE"] = 1] = "CREATE";
    // This event can be used to trigger an item download. The filename, url and size can be passed as detail payload.
    CustomEventType[CustomEventType["DOWNLOAD_ITEM"] = 2] = "DOWNLOAD_ITEM";
    // This event can be used to update the app configuration. An IAppConfig can be passed as detail payload.
    CustomEventType[CustomEventType["UPDATE_CONFIG"] = 3] = "UPDATE_CONFIG";
    // Indicates that the app has been initialized.
    CustomEventType[CustomEventType["INIT"] = 4] = "INIT";
    // Indicates that the overall upload has been completed.
    CustomEventType[CustomEventType["UPLOAD_COMPLETED"] = 5] = "UPLOAD_COMPLETED";
    // Indicates that the overall download has been completed.
    CustomEventType[CustomEventType["DOWNLOAD_COMPLETED"] = 6] = "DOWNLOAD_COMPLETED";
    // Indicates that an item has been added. It will be passed a IDatatransferItem as detail payload.
    CustomEventType[CustomEventType["ITEM_ADDED"] = 7] = "ITEM_ADDED";
    // Indicates that an item has been removed. It will be passed a IDatatransferItem as detail payload.
    CustomEventType[CustomEventType["ITEM_REMOVED"] = 8] = "ITEM_REMOVED";
    // Indicates that an item has been completed.
    CustomEventType[CustomEventType["ITEM_COMPLETED"] = 9] = "ITEM_COMPLETED";
    // Indicates that all items have been cleared.
    CustomEventType[CustomEventType["ITEMS_CLEARED"] = 10] = "ITEMS_CLEARED";
    // Indicates that an item have been clicked.
    CustomEventType[CustomEventType["ITEM_CLICKED"] = 11] = "ITEM_CLICKED";
})(CustomEventType || (CustomEventType = {}));
// tslint:disable-next-line: no-namespace
export var CustomEventTypeExtensions;
(function (CustomEventTypeExtensions) {
    const CUSTOM_EVENT_TYPE_NS = 'github:niklr/angular-material-datatransfer.';
    const CUSTOM_EVENT_TYPE_UNKNOWN = CUSTOM_EVENT_TYPE_NS + 'unknown';
    const CUSTOM_EVENT_TYPE_CREATE = CUSTOM_EVENT_TYPE_NS + 'create';
    const CUSTOM_EVENT_TYPE_DOWNLOAD_ITEM = CUSTOM_EVENT_TYPE_NS + 'download-item';
    const CUSTOM_EVENT_TYPE_UPDATE_CONFIG = CUSTOM_EVENT_TYPE_NS + 'update-config';
    const CUSTOM_EVENT_TYPE_INIT = CUSTOM_EVENT_TYPE_NS + 'init';
    const CUSTOM_EVENT_TYPE_UPLOAD_COMPLETED = CUSTOM_EVENT_TYPE_NS + 'upload-completed';
    const CUSTOM_EVENT_TYPE_DOWNLOAD_COMPLETED = CUSTOM_EVENT_TYPE_NS + 'download-completed';
    const CUSTOM_EVENT_TYPE_ITEM_ADDED = CUSTOM_EVENT_TYPE_NS + 'item-added';
    const CUSTOM_EVENT_TYPE_ITEM_REMOVED = CUSTOM_EVENT_TYPE_NS + 'item-removed';
    const CUSTOM_EVENT_TYPE_ITEM_COMPLETED = CUSTOM_EVENT_TYPE_NS + 'item-completed';
    const CUSTOM_EVENT_TYPE_ITEMS_CLEARED = CUSTOM_EVENT_TYPE_NS + 'items-cleared';
    const CUSTOM_EVENT_TYPE_ITEM_CLICKED = CUSTOM_EVENT_TYPE_NS + 'item-clicked';
    function toString(type) {
        switch (type) {
            case CustomEventType.CREATE:
                return CUSTOM_EVENT_TYPE_CREATE;
            case CustomEventType.DOWNLOAD_ITEM:
                return CUSTOM_EVENT_TYPE_DOWNLOAD_ITEM;
            case CustomEventType.UPDATE_CONFIG:
                return CUSTOM_EVENT_TYPE_UPDATE_CONFIG;
            case CustomEventType.INIT:
                return CUSTOM_EVENT_TYPE_INIT;
            case CustomEventType.UPLOAD_COMPLETED:
                return CUSTOM_EVENT_TYPE_UPLOAD_COMPLETED;
            case CustomEventType.DOWNLOAD_COMPLETED:
                return CUSTOM_EVENT_TYPE_DOWNLOAD_COMPLETED;
            case CustomEventType.ITEM_ADDED:
                return CUSTOM_EVENT_TYPE_ITEM_ADDED;
            case CustomEventType.ITEM_REMOVED:
                return CUSTOM_EVENT_TYPE_ITEM_REMOVED;
            case CustomEventType.ITEM_COMPLETED:
                return CUSTOM_EVENT_TYPE_ITEM_COMPLETED;
            case CustomEventType.ITEMS_CLEARED:
                return CUSTOM_EVENT_TYPE_ITEMS_CLEARED;
            case CustomEventType.ITEM_CLICKED:
                return CUSTOM_EVENT_TYPE_ITEM_CLICKED;
            default:
                return CUSTOM_EVENT_TYPE_UNKNOWN;
        }
    }
    CustomEventTypeExtensions.toString = toString;
    function toEnum(type) {
        switch (type) {
            case CUSTOM_EVENT_TYPE_CREATE:
                return CustomEventType.CREATE;
            case CUSTOM_EVENT_TYPE_DOWNLOAD_ITEM:
                return CustomEventType.DOWNLOAD_ITEM;
            case CUSTOM_EVENT_TYPE_UPDATE_CONFIG:
                return CustomEventType.UPDATE_CONFIG;
            case CUSTOM_EVENT_TYPE_INIT:
                return CustomEventType.INIT;
            case CUSTOM_EVENT_TYPE_UPLOAD_COMPLETED:
                return CustomEventType.UPLOAD_COMPLETED;
            case CUSTOM_EVENT_TYPE_DOWNLOAD_COMPLETED:
                return CustomEventType.DOWNLOAD_COMPLETED;
            case CUSTOM_EVENT_TYPE_ITEM_ADDED:
                return CustomEventType.ITEM_ADDED;
            case CUSTOM_EVENT_TYPE_ITEM_REMOVED:
                return CustomEventType.ITEM_REMOVED;
            case CUSTOM_EVENT_TYPE_ITEM_COMPLETED:
                return CustomEventType.ITEM_COMPLETED;
            case CUSTOM_EVENT_TYPE_ITEMS_CLEARED:
                return CustomEventType.ITEMS_CLEARED;
            case CUSTOM_EVENT_TYPE_ITEM_CLICKED:
                return CustomEventType.ITEM_CLICKED;
            default:
                return CustomEventType.UNKNOWN;
        }
    }
    CustomEventTypeExtensions.toEnum = toEnum;
})(CustomEventTypeExtensions || (CustomEventTypeExtensions = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLWV2ZW50LXR5cGUuZW51bS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FtZC1saWIvc3JjL2xpYi9lbnVtcy9jdXN0b20tZXZlbnQtdHlwZS5lbnVtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBTixJQUFZLGVBd0JYO0FBeEJELFdBQVksZUFBZTtJQUN2QiwyREFBTyxDQUFBO0lBQ1AscUdBQXFHO0lBQ3JHLHlEQUFNLENBQUE7SUFDTixrSEFBa0g7SUFDbEgsdUVBQWEsQ0FBQTtJQUNiLHlHQUF5RztJQUN6Ryx1RUFBYSxDQUFBO0lBQ2IsK0NBQStDO0lBQy9DLHFEQUFJLENBQUE7SUFDSix3REFBd0Q7SUFDeEQsNkVBQWdCLENBQUE7SUFDaEIsMERBQTBEO0lBQzFELGlGQUFrQixDQUFBO0lBQ2xCLGtHQUFrRztJQUNsRyxpRUFBVSxDQUFBO0lBQ1Ysb0dBQW9HO0lBQ3BHLHFFQUFZLENBQUE7SUFDWiw2Q0FBNkM7SUFDN0MseUVBQWMsQ0FBQTtJQUNkLDhDQUE4QztJQUM5Qyx3RUFBYSxDQUFBO0lBQ2IsNENBQTRDO0lBQzVDLHNFQUFZLENBQUE7QUFDaEIsQ0FBQyxFQXhCVyxlQUFlLEtBQWYsZUFBZSxRQXdCMUI7QUFFRCx5Q0FBeUM7QUFDekMsTUFBTSxLQUFXLHlCQUF5QixDQXNFekM7QUF0RUQsV0FBaUIseUJBQXlCO0lBQ3RDLE1BQU0sb0JBQW9CLEdBQUcsNkNBQTZDLENBQUM7SUFDM0UsTUFBTSx5QkFBeUIsR0FBRyxvQkFBb0IsR0FBRyxTQUFTLENBQUM7SUFDbkUsTUFBTSx3QkFBd0IsR0FBRyxvQkFBb0IsR0FBRyxRQUFRLENBQUM7SUFDakUsTUFBTSwrQkFBK0IsR0FBRyxvQkFBb0IsR0FBRyxlQUFlLENBQUM7SUFDL0UsTUFBTSwrQkFBK0IsR0FBRyxvQkFBb0IsR0FBRyxlQUFlLENBQUM7SUFDL0UsTUFBTSxzQkFBc0IsR0FBRyxvQkFBb0IsR0FBRyxNQUFNLENBQUM7SUFDN0QsTUFBTSxrQ0FBa0MsR0FBRyxvQkFBb0IsR0FBRyxrQkFBa0IsQ0FBQztJQUNyRixNQUFNLG9DQUFvQyxHQUFHLG9CQUFvQixHQUFHLG9CQUFvQixDQUFDO0lBQ3pGLE1BQU0sNEJBQTRCLEdBQUcsb0JBQW9CLEdBQUcsWUFBWSxDQUFDO0lBQ3pFLE1BQU0sOEJBQThCLEdBQUcsb0JBQW9CLEdBQUcsY0FBYyxDQUFDO0lBQzdFLE1BQU0sZ0NBQWdDLEdBQUcsb0JBQW9CLEdBQUcsZ0JBQWdCLENBQUM7SUFDakYsTUFBTSwrQkFBK0IsR0FBRyxvQkFBb0IsR0FBRyxlQUFlLENBQUM7SUFDL0UsTUFBTSw4QkFBOEIsR0FBRyxvQkFBb0IsR0FBRyxjQUFjLENBQUM7SUFDN0UsU0FBZ0IsUUFBUSxDQUFDLElBQXFCO1FBQzFDLFFBQVEsSUFBSSxFQUFFO1lBQ1YsS0FBSyxlQUFlLENBQUMsTUFBTTtnQkFDdkIsT0FBTyx3QkFBd0IsQ0FBQztZQUNwQyxLQUFLLGVBQWUsQ0FBQyxhQUFhO2dCQUM5QixPQUFPLCtCQUErQixDQUFDO1lBQzNDLEtBQUssZUFBZSxDQUFDLGFBQWE7Z0JBQzlCLE9BQU8sK0JBQStCLENBQUM7WUFDM0MsS0FBSyxlQUFlLENBQUMsSUFBSTtnQkFDckIsT0FBTyxzQkFBc0IsQ0FBQztZQUNsQyxLQUFLLGVBQWUsQ0FBQyxnQkFBZ0I7Z0JBQ2pDLE9BQU8sa0NBQWtDLENBQUM7WUFDOUMsS0FBSyxlQUFlLENBQUMsa0JBQWtCO2dCQUNuQyxPQUFPLG9DQUFvQyxDQUFDO1lBQ2hELEtBQUssZUFBZSxDQUFDLFVBQVU7Z0JBQzNCLE9BQU8sNEJBQTRCLENBQUM7WUFDeEMsS0FBSyxlQUFlLENBQUMsWUFBWTtnQkFDN0IsT0FBTyw4QkFBOEIsQ0FBQztZQUMxQyxLQUFLLGVBQWUsQ0FBQyxjQUFjO2dCQUMvQixPQUFPLGdDQUFnQyxDQUFDO1lBQzVDLEtBQUssZUFBZSxDQUFDLGFBQWE7Z0JBQzlCLE9BQU8sK0JBQStCLENBQUM7WUFDM0MsS0FBSyxlQUFlLENBQUMsWUFBWTtnQkFDN0IsT0FBTyw4QkFBOEIsQ0FBQztZQUMxQztnQkFDSSxPQUFPLHlCQUF5QixDQUFDO1NBQ3hDO0lBQ0wsQ0FBQztJQTNCZSxrQ0FBUSxXQTJCdkIsQ0FBQTtJQUNELFNBQWdCLE1BQU0sQ0FBQyxJQUFZO1FBQy9CLFFBQVEsSUFBSSxFQUFFO1lBQ1YsS0FBSyx3QkFBd0I7Z0JBQ3pCLE9BQU8sZUFBZSxDQUFDLE1BQU0sQ0FBQztZQUNsQyxLQUFLLCtCQUErQjtnQkFDaEMsT0FBTyxlQUFlLENBQUMsYUFBYSxDQUFDO1lBQ3pDLEtBQUssK0JBQStCO2dCQUNoQyxPQUFPLGVBQWUsQ0FBQyxhQUFhLENBQUM7WUFDekMsS0FBSyxzQkFBc0I7Z0JBQ3ZCLE9BQU8sZUFBZSxDQUFDLElBQUksQ0FBQztZQUNoQyxLQUFLLGtDQUFrQztnQkFDbkMsT0FBTyxlQUFlLENBQUMsZ0JBQWdCLENBQUM7WUFDNUMsS0FBSyxvQ0FBb0M7Z0JBQ3JDLE9BQU8sZUFBZSxDQUFDLGtCQUFrQixDQUFDO1lBQzlDLEtBQUssNEJBQTRCO2dCQUM3QixPQUFPLGVBQWUsQ0FBQyxVQUFVLENBQUM7WUFDdEMsS0FBSyw4QkFBOEI7Z0JBQy9CLE9BQU8sZUFBZSxDQUFDLFlBQVksQ0FBQztZQUN4QyxLQUFLLGdDQUFnQztnQkFDakMsT0FBTyxlQUFlLENBQUMsY0FBYyxDQUFDO1lBQzFDLEtBQUssK0JBQStCO2dCQUNoQyxPQUFPLGVBQWUsQ0FBQyxhQUFhLENBQUM7WUFDekMsS0FBSyw4QkFBOEI7Z0JBQy9CLE9BQU8sZUFBZSxDQUFDLFlBQVksQ0FBQztZQUN4QztnQkFDSSxPQUFPLGVBQWUsQ0FBQyxPQUFPLENBQUM7U0FDdEM7SUFDTCxDQUFDO0lBM0JlLGdDQUFNLFNBMkJyQixDQUFBO0FBQ0wsQ0FBQyxFQXRFZ0IseUJBQXlCLEtBQXpCLHlCQUF5QixRQXNFekMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZW51bSBDdXN0b21FdmVudFR5cGUge1xyXG4gICAgVU5LTk9XTixcclxuICAgIC8vIFRoaXMgZXZlbnQgY2FuIGJlIHVzZWQgdG8gYm9vdHN0cmFwIHRoZSBhcHAgbW9kdWxlLiBBbiBJQXBwQ29uZmlnIGNhbiBiZSBwYXNzZWQgYXMgZGV0YWlsIHBheWxvYWQuXHJcbiAgICBDUkVBVEUsXHJcbiAgICAvLyBUaGlzIGV2ZW50IGNhbiBiZSB1c2VkIHRvIHRyaWdnZXIgYW4gaXRlbSBkb3dubG9hZC4gVGhlIGZpbGVuYW1lLCB1cmwgYW5kIHNpemUgY2FuIGJlIHBhc3NlZCBhcyBkZXRhaWwgcGF5bG9hZC5cclxuICAgIERPV05MT0FEX0lURU0sXHJcbiAgICAvLyBUaGlzIGV2ZW50IGNhbiBiZSB1c2VkIHRvIHVwZGF0ZSB0aGUgYXBwIGNvbmZpZ3VyYXRpb24uIEFuIElBcHBDb25maWcgY2FuIGJlIHBhc3NlZCBhcyBkZXRhaWwgcGF5bG9hZC5cclxuICAgIFVQREFURV9DT05GSUcsXHJcbiAgICAvLyBJbmRpY2F0ZXMgdGhhdCB0aGUgYXBwIGhhcyBiZWVuIGluaXRpYWxpemVkLlxyXG4gICAgSU5JVCxcclxuICAgIC8vIEluZGljYXRlcyB0aGF0IHRoZSBvdmVyYWxsIHVwbG9hZCBoYXMgYmVlbiBjb21wbGV0ZWQuXHJcbiAgICBVUExPQURfQ09NUExFVEVELFxyXG4gICAgLy8gSW5kaWNhdGVzIHRoYXQgdGhlIG92ZXJhbGwgZG93bmxvYWQgaGFzIGJlZW4gY29tcGxldGVkLlxyXG4gICAgRE9XTkxPQURfQ09NUExFVEVELFxyXG4gICAgLy8gSW5kaWNhdGVzIHRoYXQgYW4gaXRlbSBoYXMgYmVlbiBhZGRlZC4gSXQgd2lsbCBiZSBwYXNzZWQgYSBJRGF0YXRyYW5zZmVySXRlbSBhcyBkZXRhaWwgcGF5bG9hZC5cclxuICAgIElURU1fQURERUQsXHJcbiAgICAvLyBJbmRpY2F0ZXMgdGhhdCBhbiBpdGVtIGhhcyBiZWVuIHJlbW92ZWQuIEl0IHdpbGwgYmUgcGFzc2VkIGEgSURhdGF0cmFuc2Zlckl0ZW0gYXMgZGV0YWlsIHBheWxvYWQuXHJcbiAgICBJVEVNX1JFTU9WRUQsXHJcbiAgICAvLyBJbmRpY2F0ZXMgdGhhdCBhbiBpdGVtIGhhcyBiZWVuIGNvbXBsZXRlZC5cclxuICAgIElURU1fQ09NUExFVEVELFxyXG4gICAgLy8gSW5kaWNhdGVzIHRoYXQgYWxsIGl0ZW1zIGhhdmUgYmVlbiBjbGVhcmVkLlxyXG4gICAgSVRFTVNfQ0xFQVJFRCxcclxuICAgIC8vIEluZGljYXRlcyB0aGF0IGFuIGl0ZW0gaGF2ZSBiZWVuIGNsaWNrZWQuXHJcbiAgICBJVEVNX0NMSUNLRURcclxufVxyXG5cclxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1uYW1lc3BhY2VcclxuZXhwb3J0IG5hbWVzcGFjZSBDdXN0b21FdmVudFR5cGVFeHRlbnNpb25zIHtcclxuICAgIGNvbnN0IENVU1RPTV9FVkVOVF9UWVBFX05TID0gJ2dpdGh1YjpuaWtsci9hbmd1bGFyLW1hdGVyaWFsLWRhdGF0cmFuc2Zlci4nO1xyXG4gICAgY29uc3QgQ1VTVE9NX0VWRU5UX1RZUEVfVU5LTk9XTiA9IENVU1RPTV9FVkVOVF9UWVBFX05TICsgJ3Vua25vd24nO1xyXG4gICAgY29uc3QgQ1VTVE9NX0VWRU5UX1RZUEVfQ1JFQVRFID0gQ1VTVE9NX0VWRU5UX1RZUEVfTlMgKyAnY3JlYXRlJztcclxuICAgIGNvbnN0IENVU1RPTV9FVkVOVF9UWVBFX0RPV05MT0FEX0lURU0gPSBDVVNUT01fRVZFTlRfVFlQRV9OUyArICdkb3dubG9hZC1pdGVtJztcclxuICAgIGNvbnN0IENVU1RPTV9FVkVOVF9UWVBFX1VQREFURV9DT05GSUcgPSBDVVNUT01fRVZFTlRfVFlQRV9OUyArICd1cGRhdGUtY29uZmlnJztcclxuICAgIGNvbnN0IENVU1RPTV9FVkVOVF9UWVBFX0lOSVQgPSBDVVNUT01fRVZFTlRfVFlQRV9OUyArICdpbml0JztcclxuICAgIGNvbnN0IENVU1RPTV9FVkVOVF9UWVBFX1VQTE9BRF9DT01QTEVURUQgPSBDVVNUT01fRVZFTlRfVFlQRV9OUyArICd1cGxvYWQtY29tcGxldGVkJztcclxuICAgIGNvbnN0IENVU1RPTV9FVkVOVF9UWVBFX0RPV05MT0FEX0NPTVBMRVRFRCA9IENVU1RPTV9FVkVOVF9UWVBFX05TICsgJ2Rvd25sb2FkLWNvbXBsZXRlZCc7XHJcbiAgICBjb25zdCBDVVNUT01fRVZFTlRfVFlQRV9JVEVNX0FEREVEID0gQ1VTVE9NX0VWRU5UX1RZUEVfTlMgKyAnaXRlbS1hZGRlZCc7XHJcbiAgICBjb25zdCBDVVNUT01fRVZFTlRfVFlQRV9JVEVNX1JFTU9WRUQgPSBDVVNUT01fRVZFTlRfVFlQRV9OUyArICdpdGVtLXJlbW92ZWQnO1xyXG4gICAgY29uc3QgQ1VTVE9NX0VWRU5UX1RZUEVfSVRFTV9DT01QTEVURUQgPSBDVVNUT01fRVZFTlRfVFlQRV9OUyArICdpdGVtLWNvbXBsZXRlZCc7XHJcbiAgICBjb25zdCBDVVNUT01fRVZFTlRfVFlQRV9JVEVNU19DTEVBUkVEID0gQ1VTVE9NX0VWRU5UX1RZUEVfTlMgKyAnaXRlbXMtY2xlYXJlZCc7XHJcbiAgICBjb25zdCBDVVNUT01fRVZFTlRfVFlQRV9JVEVNX0NMSUNLRUQgPSBDVVNUT01fRVZFTlRfVFlQRV9OUyArICdpdGVtLWNsaWNrZWQnO1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHRvU3RyaW5nKHR5cGU6IEN1c3RvbUV2ZW50VHlwZSk6IHN0cmluZyB7XHJcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgQ3VzdG9tRXZlbnRUeXBlLkNSRUFURTpcclxuICAgICAgICAgICAgICAgIHJldHVybiBDVVNUT01fRVZFTlRfVFlQRV9DUkVBVEU7XHJcbiAgICAgICAgICAgIGNhc2UgQ3VzdG9tRXZlbnRUeXBlLkRPV05MT0FEX0lURU06XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gQ1VTVE9NX0VWRU5UX1RZUEVfRE9XTkxPQURfSVRFTTtcclxuICAgICAgICAgICAgY2FzZSBDdXN0b21FdmVudFR5cGUuVVBEQVRFX0NPTkZJRzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBDVVNUT01fRVZFTlRfVFlQRV9VUERBVEVfQ09ORklHO1xyXG4gICAgICAgICAgICBjYXNlIEN1c3RvbUV2ZW50VHlwZS5JTklUOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIENVU1RPTV9FVkVOVF9UWVBFX0lOSVQ7XHJcbiAgICAgICAgICAgIGNhc2UgQ3VzdG9tRXZlbnRUeXBlLlVQTE9BRF9DT01QTEVURUQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gQ1VTVE9NX0VWRU5UX1RZUEVfVVBMT0FEX0NPTVBMRVRFRDtcclxuICAgICAgICAgICAgY2FzZSBDdXN0b21FdmVudFR5cGUuRE9XTkxPQURfQ09NUExFVEVEOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIENVU1RPTV9FVkVOVF9UWVBFX0RPV05MT0FEX0NPTVBMRVRFRDtcclxuICAgICAgICAgICAgY2FzZSBDdXN0b21FdmVudFR5cGUuSVRFTV9BRERFRDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBDVVNUT01fRVZFTlRfVFlQRV9JVEVNX0FEREVEO1xyXG4gICAgICAgICAgICBjYXNlIEN1c3RvbUV2ZW50VHlwZS5JVEVNX1JFTU9WRUQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gQ1VTVE9NX0VWRU5UX1RZUEVfSVRFTV9SRU1PVkVEO1xyXG4gICAgICAgICAgICBjYXNlIEN1c3RvbUV2ZW50VHlwZS5JVEVNX0NPTVBMRVRFRDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBDVVNUT01fRVZFTlRfVFlQRV9JVEVNX0NPTVBMRVRFRDtcclxuICAgICAgICAgICAgY2FzZSBDdXN0b21FdmVudFR5cGUuSVRFTVNfQ0xFQVJFRDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBDVVNUT01fRVZFTlRfVFlQRV9JVEVNU19DTEVBUkVEO1xyXG4gICAgICAgICAgICBjYXNlIEN1c3RvbUV2ZW50VHlwZS5JVEVNX0NMSUNLRUQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gQ1VTVE9NX0VWRU5UX1RZUEVfSVRFTV9DTElDS0VEO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIENVU1RPTV9FVkVOVF9UWVBFX1VOS05PV047XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHRvRW51bSh0eXBlOiBzdHJpbmcpOiBDdXN0b21FdmVudFR5cGUge1xyXG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIENVU1RPTV9FVkVOVF9UWVBFX0NSRUFURTpcclxuICAgICAgICAgICAgICAgIHJldHVybiBDdXN0b21FdmVudFR5cGUuQ1JFQVRFO1xyXG4gICAgICAgICAgICBjYXNlIENVU1RPTV9FVkVOVF9UWVBFX0RPV05MT0FEX0lURU06XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gQ3VzdG9tRXZlbnRUeXBlLkRPV05MT0FEX0lURU07XHJcbiAgICAgICAgICAgIGNhc2UgQ1VTVE9NX0VWRU5UX1RZUEVfVVBEQVRFX0NPTkZJRzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBDdXN0b21FdmVudFR5cGUuVVBEQVRFX0NPTkZJRztcclxuICAgICAgICAgICAgY2FzZSBDVVNUT01fRVZFTlRfVFlQRV9JTklUOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEN1c3RvbUV2ZW50VHlwZS5JTklUO1xyXG4gICAgICAgICAgICBjYXNlIENVU1RPTV9FVkVOVF9UWVBFX1VQTE9BRF9DT01QTEVURUQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gQ3VzdG9tRXZlbnRUeXBlLlVQTE9BRF9DT01QTEVURUQ7XHJcbiAgICAgICAgICAgIGNhc2UgQ1VTVE9NX0VWRU5UX1RZUEVfRE9XTkxPQURfQ09NUExFVEVEOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEN1c3RvbUV2ZW50VHlwZS5ET1dOTE9BRF9DT01QTEVURUQ7XHJcbiAgICAgICAgICAgIGNhc2UgQ1VTVE9NX0VWRU5UX1RZUEVfSVRFTV9BRERFRDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBDdXN0b21FdmVudFR5cGUuSVRFTV9BRERFRDtcclxuICAgICAgICAgICAgY2FzZSBDVVNUT01fRVZFTlRfVFlQRV9JVEVNX1JFTU9WRUQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gQ3VzdG9tRXZlbnRUeXBlLklURU1fUkVNT1ZFRDtcclxuICAgICAgICAgICAgY2FzZSBDVVNUT01fRVZFTlRfVFlQRV9JVEVNX0NPTVBMRVRFRDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBDdXN0b21FdmVudFR5cGUuSVRFTV9DT01QTEVURUQ7XHJcbiAgICAgICAgICAgIGNhc2UgQ1VTVE9NX0VWRU5UX1RZUEVfSVRFTVNfQ0xFQVJFRDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBDdXN0b21FdmVudFR5cGUuSVRFTVNfQ0xFQVJFRDtcclxuICAgICAgICAgICAgY2FzZSBDVVNUT01fRVZFTlRfVFlQRV9JVEVNX0NMSUNLRUQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gQ3VzdG9tRXZlbnRUeXBlLklURU1fQ0xJQ0tFRDtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBDdXN0b21FdmVudFR5cGUuVU5LTk9XTjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19